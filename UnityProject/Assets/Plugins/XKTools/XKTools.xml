<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XKTools</name>
    </assembly>
    <members>
        <member name="T:XKTools.ActionDelayer">
            <summary>
            Use for delay any action
            </summary>
        </member>
        <member name="T:XKTools.ActionDelayer.ActionToDo">
            <summary>
            
            </summary>
            <param name="objs"></param>
        </member>
        <member name="T:XKTools.ActionDelayer.ActionOnTimer">
            <summary>
            
            </summary>
            <param name="timer"></param>
            <param name="delayTime"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.ActionDelayer.DelayAction(System.Single,XKTools.ActionDelayer.ActionToDo,System.Object[])">
            <summary>
            Starts a couroutine which will Wait before applying the delayedFunction
            </summary>
            <param name="delayTime">time to wait</param>
            <param name="delayedFunction">function to execute when delay is passed</param>
            <param name="delayedFunctionArgs">arguments for the delayedFunction</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ActionDelayer.DelayAction(System.Single,XKTools.ActionDelayer.ActionToDo,System.Object[],XKTools.ActionDelayer.ActionToDo,System.Object[])">
            <summary>
            Starts a couroutine which will Wait before to launch the delayedFunction, then then Wait before to launch onEnd
            </summary>
            <param name="delayTime">time to wait</param>
            <param name="delayedFunction">function to execute when delay is passed</param>
            <param name="delayedFunctionArgs">arguments for the delayedFunction</param>
            <param name="onEnd">Called after delayedFunction and once delayTime is passed one more time</param>
            <param name="endArgs">arguments for the onEnd function</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ActionDelayer.DelayAction(System.Single,XKTools.ActionDelayer.ActionToDo,XKTools.ActionDelayer.ActionToDo,System.Object[])">
            <summary>
            Starts a couroutine which will Wait before to launch the delayedFunction, then then Wait before to launch onEnd
            </summary>
            <param name="delayTime">time to wait</param>
            <param name="delayedFunction">function to execute when delay is passed</param>
            <param name="onEnd">Called after delayedFunction and once delayTime is passed one more time</param>
            <param name="args">object array for ALL delegates</param>
        </member>
        <member name="M:XKTools.ActionDelayer.DelayAction(System.Single,XKTools.ActionDelayer.ActionOnTimer,System.Object[],XKTools.ActionDelayer.ActionToDo,System.Object[],XKTools.ActionDelayer.ActionOnTimer,System.Object[],XKTools.ActionDelayer.ActionToDo,System.Object[])">
            <summary>
            Starts a couroutine which will Wait applying the onDelayingEnterfunction, , then launch the delayedFunction, then Wait applying the onDelayingExitfunction, then launch onEnd
            </summary>
            <param name="delayTime">time to wait</param>
            <param name="onDelayingEnter">called while waiting for delayedFunction</param>
            <param name="onDelayingEnterArgs">onDelayingEnter(timer, delayTime, onDelayingEnterArgs)</param>
            <param name="delayedFunction">function to execute when delay is passed</param>
            <param name="delayedFunctionArgs">arguments for the delayedFunction</param>
            <param name="onDelayingExit">called while waiting for the end (after delayedFunction)</param>
            <param name="onDelayingExitArgs">onDelayingExit(timer, delayTime, onDelayingExitArgs)</param>
            <param name="onEnd">Called after delayedFunction and once delayTime is passed one more time</param>
            <param name="endArgs">arguments for the onEnd function</param>
        </member>
        <member name="M:XKTools.ActionDelayer.DelayAction(System.Single,XKTools.ActionDelayer.ActionOnTimer,XKTools.ActionDelayer.ActionToDo,XKTools.ActionDelayer.ActionOnTimer,XKTools.ActionDelayer.ActionToDo,System.Object[])">
            <summary>
            Starts a couroutine which will Wait applying the onDelayingEnterfunction, , then launch the delayedFunction, then Wait applying the onDelayingExitfunction, then launch onEnd
            </summary>
            <param name="delayTime">time to wait</param>
            <param name="onDelayingEnter">called while waiting for delayedFunction</param>
            <param name="delayedFunction">function to execute when delay is passed</param>
            <param name="onDelayingExit">called while waiting for the end (after delayedFunction)</param>
            <param name="onEnd">Called after delayedFunction and once delayTime is passed one more time</param>
            <param name="args">object array for ALL delegates</param>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM">
            <summary>
            \section intro_sec Intro
            <para>This object is a Finite State Machine that stores the states as references and switches easily between them.</para>
            <para>The main strength of the fsm is to control the when next states will be alloed to enter. Also, it is easily possible to delay the end of a state for a fadeout for instance or waiting the end of an animation.</para>
            \section usage_sec Usage
            <para>       FSM fsm = new FSM();</para>
            <para>       fsm.SetDefaultOption(FSM.EQueue.Push);</para>
            <para>       fsm.SetDefaultOption(FSM.EStack.Clear);</para>
            <para>       fsm.SetDefaultOption(FSM.EExit.DoNothing);</para>
            <para>       fsm.RegisterState(new FSMState("A"));</para>
            <para>       fsm.RegisterState(new FSMState("B"));</para>
            <para>       fsm.RegisterState(new FSMState("C"));</para>
            <para>       fsm.SetState("A");</para>
            <para>       fsm.SetState("B");</para>
            <para>       fsm.SetState("C");</para>
            \section timeline_sec Timeline
            <para>       Enter            -> The state is approved and enters (don't forget to call base.Enter)</para>
            <para>       (Update*)</para>
            <para>       AskForExit       -> A new state's been pushed to list or tries to replace the current one</para>
            <para>       (Update*)</para>
            <para>       CanMoveTo        -> Says whether or not the current state is allowed to move to the next state (given in parameters). Note that the state is still active in background until the state is over.</para>
            <para>       (Update*)</para>
            <para>       IsOver           -> All processes are over (fade to black, deferred unloading, other stuffs), we can leave the state.</para>
            <para>       Exit             -> The state is over and exits</para>
            </summary>
            <remarks>
            <para>       Do not forget to reset m_IsOver value of each state if you do not want your state to leave as soon as it enters.</para>
            <para>       Also, you should call the FSMState mother class functions when overriding (Enter, Exit, etc.).</para>
            </remarks>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.EMode">
            <summary>
            This enum helps managing when the states are supposed to get changed
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EMode.Immediate">
            <summary>
            Proceeds states changes right away (in the limit of states possibilities)
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EMode.OneFrameDelay">
            <summary>
            Waits for the next update to proceed to state changes, ask for exit, etc.
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.ELogical">
            <summary>
            Default preset
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ELogical.Simple">
            <summary>
            <para>Preconfigures default FSM options: </para>
            <para>- EQueue.Push</para>
            <para>- EStack.Clear</para>
            <para>- EExit.DoNothing</para>
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ELogical.Pool">
            <summary>
            <para>Preconfigures default FSM options: </para>
            <para>- EQueue.Push</para>
            <para>- EStack.Push</para>
            <para>- EExit.DoNothing</para>
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ELogical.Sequential">
            <summary>
            <para>Preconfigures default FSM options: </para>
            <para>- EQueue.Push</para>
            <para>- EStack.Replace</para>
            <para>- EExit.DoNothing</para>
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.EQueue">
            <summary>
            This enum relates to the way the states are pushed to the Next States queue
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EQueue.Clear">
            <summary>
            <para>Clears next states list at SetState time.</para>
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EQueue.Push">
            <summary>
            <para>Waits for queue to be ready to start this state</para>
            <para>Prechains logic using this functionality.</para>
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.EStack">
            <summary>
            This enum relates to the way the states are pushed to the Active State stack
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EStack.Clear">
            <summary>
            <para>Ask all previous states to exit ASAP then push as top state (they will not necessary exit instantly though).</para>
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EStack.Replace">
            <summary>
            <para>Ask top state only to exit ASAP then push as top state (they will not necessary exit instantly though).</para>
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EStack.Push">
            <summary>
            <para>Keeps previous states active then push as top state</para>
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.EExit">
            <summary>
            On Exit Options
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EExit.DoNothing">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.EExit.Unregister">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.ERemoving">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ERemoving.First">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ERemoving.Last">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ERemoving.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.CState">
            <summary>
            helper for state management
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.CState.Queue">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.CState.Stack">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.CState.Exit">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.CState.PushOnTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.CState.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSM.ExceptionThrownDlg">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.c_TagDump">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSM.ExceptionThown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.#ctor(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="name"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.Initialize">
             <summary>
            
             </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.OnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.OnDrawGizmos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.BeginProfilerSample(System.String)">
            <summary>
            Profiler.BeginSample doesn't work in dll
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.EndProfilerSample">
            <summary>
            Profiler.EndSample doesn't work in dll
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EQueue,XKTools.AdvancedFSM.FSM.EStack,XKTools.AdvancedFSM.FSM.EExit,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="queue"></param>
            <param name="stack"></param>
            <param name="exit"></param>
            <param name="pushOnTop"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EQueue,XKTools.AdvancedFSM.FSM.EStack,XKTools.AdvancedFSM.FSM.EExit)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="queue"></param>
            <param name="stack"></param>
            <param name="exit"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EQueue,XKTools.AdvancedFSM.FSM.EStack)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="queue"></param>
            <param name="stack"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EQueue,XKTools.AdvancedFSM.FSM.EStack,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="queue"></param>
            <param name="stack"></param>
            <param name="pushOnTop"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EQueue)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="queue"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EQueue,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="queue"></param>
            <param name="pushOnTop"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EStack)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="stack"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EStack,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="stack"></param>
            <param name="pushOnTop"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EExit)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="exit"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,XKTools.AdvancedFSM.FSM.EExit,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="exit"></param>
            <param name="pushOnTop"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetState(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="pushOnTop"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetDefaultOption(XKTools.AdvancedFSM.FSM.EQueue)">
            <summary>
            
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetDefaultOption(XKTools.AdvancedFSM.FSM.EStack)">
            <summary>
            
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetDefaultOption(XKTools.AdvancedFSM.FSM.EExit)">
            <summary>
            
            </summary>
            <param name="exit"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.SetDefaultLogical(XKTools.AdvancedFSM.FSM.ELogical)">
            <summary>
            
            </summary>
            <param name="logical"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.GetState(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.RemoveState(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.RemoveState(System.Object,XKTools.AdvancedFSM.FSM.ERemoving)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="behaviour"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.RegisterState(XKTools.AdvancedFSM.FSMState)">
            <summary>
            Stores state to FSM and calls Initialize()
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.UnregisterState(System.Object)">
            <summary>
            Also calls shutdown event
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.UnregisterState(System.Object,System.Boolean)">
            <summary>
            Also calls shutdown event
            </summary>
            <param name="reference"></param>
            <param name="log"> </param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.ClearNextStates">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.ClearStates(System.Boolean)">
            <summary>
            
            </summary>
            <param name="shutdown">This shutdowns the states and clears referenced states</param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.FormatSubStatesList(System.Int32)">
            <summary>
            Creates a formated string representative of the current active FSM and FSMState stacks
            </summary>
            <param name="indentLevel"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.LogStack">
            <summary>
            Log states
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.LogStateTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.GetStates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.IsStateRunning(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.IsNextState(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.StateStack">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.TopState">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.TopStateReference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.StateStackCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.GetStackState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.GetStackState(System.Int32)">
            <summary>
            
            </summary>
            <param name="depth">0 would be the top state</param>
            <returns></returns>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.NextStatesCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.GetNextState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.GetNextState(System.Int32)">
            <summary>
            
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.IsOver">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.States">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSM.IsStateRegistered(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.Parent">
            <summary>
            Parent State containing this as SubFsm
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.StateChangeMode">
            <summary>
            <para>This value says when the states are supposed to get changed</para>
            <para>Immediate - Proceeds states changes right away (in the limit of states possibilities)</para>
            <para>OnFrameDealy - Waits for the next update to proceed to state changes, ask for exit, etc.</para>
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.Name">
            <summary>
            Fsm name (mostly used for serialization and inspector display)
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.ExecuteBackgroundUpdates">
            <summary>
            Also executes fsm during background updates of the parent state
            <remarks>The default value is false -> Sub fsm will be updated if parent state is Top State</remarks>
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSM.ProcessBackgroundStateChanges">
            <summary>
            Also executes fsm during background updates of the parent state, otherwise only front updates will be performed
            <remarks>The default value is true -> Sub fsm will be execute if parent state is Top State or if ExecuteBackgroundUpdates is true</remarks>
            </summary>
        </member>
        <member name="T:XKTools.AdvancedFSM.FSMState">
            <summary>
            <para>Base FsmState</para>
            <para>Needs a reference object</para>
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSMState.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSMState.m_Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSMState.m_IsOver">
            <summary>
            Do not forget to reset this value if you do not want your state to leave as soon as it enters.
            </summary>
        </member>
        <member name="F:XKTools.AdvancedFSM.FSMState.m_NeedToExit">
            <summary>
            Do not forget to reset this value if you do not want your state to leave as soon as possible.
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.Initialize">
            <summary>
            Called at referencement tim
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.Shutdown">
            <summary>
            Called at dereferencement time
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.Reset">
            <summary>
            This function is just a helper you can call whenever you want, it's not directly used by the FSM
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.Enter">
            <summary>
            Called when pushed in stack
            </summary>
            <remarks>base.Enter() should be called in anycase</remarks>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.Exit">
            <summary>
            Called when getting out of the active stack
            </summary>
            <remarks>base.Exit() should be called in anycase</remarks>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnStateWillEnter(XKTools.AdvancedFSM.FSMState)">
            <summary>
            <para>This event is triggered on all active states</para>
            <para>This might be helpful to link several states between them</para>
            <para>This is called before entering the enteringState</para>
            </summary>
            <param name="enteringState"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnStateHasEntered(XKTools.AdvancedFSM.FSMState)">
            <summary>
            <para>This event is triggered on all active states</para>
            <para>This might be helpful to link several states between them</para>
            <para>This is called right after entering the enteringState</para>
            </summary>
            <param name="enteringState"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnStateWillExit(XKTools.AdvancedFSM.FSMState)">
            <summary>
            <para>This event is triggered when a state is removed from the stack</para>
            <para>This might be helpful to link several states between them</para>
            <para>This is called before exiting the exitingState</para>
            </summary>
            <param name="exitingState"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnStateHasExited(XKTools.AdvancedFSM.FSMState)">
            <summary>
            <para>This event is triggered when a state is removed from the stack</para>
            <para>This might be helpful to link several states between them</para>
            <para>This is called right after exiting the exitingState</para>
            </summary>
            <param name="exitingState"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.AskForExit(XKTools.AdvancedFSM.FSMState)">
            <summary>
            <para>Overriding this function helps delaying exit event</para>
            <para>Please call base function when overriding</para>
            </summary>
            <param name="nextState">You can configure next state throug htis method</param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.CanMoveTo(XKTools.AdvancedFSM.FSMState)">
            <summary>
            Called every frame once in stack
            </summary>
            <param name="nextState"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.IsOver">
            <summary>
            Called every frame once in stack, says the sate is "dead", this will trigger exit event, no matter what
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.Update">
            <summary>
            <para>Called once in active stack</para>
            <para>Should be used as common (front and background) update</para>
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.FixedUpdate">
            <summary>
            <para>Called once in active stack</para>
            <para>Should be used as common (front and background) update</para>
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.LateUpdate">
            <summary>
            <para>Called once in active stack</para>
            <para>Should be used as common (front and background) update</para>
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.FrontUpdate">
            <summary>
            Should be used as common (front and background) update
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.FrontFixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.FrontLateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.BackgroundUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.BackgroundFixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.BackgroundLateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnDrawGizmos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.FrontToBack">
            <summary>
            Called when the state is backgrounded
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.BackToFront">
            <summary>
            Called when the sate is back on satge
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnTopStateChanged(XKTools.AdvancedFSM.FSMState)">
            <summary>
            Called when the top state has changed
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnSubStateChanged(XKTools.AdvancedFSM.FSMState)">
            <summary>
            Called when the top state has changed
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.Fsm">
            <summary>
            Accessor on the Fsm that owns this state
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.SubFsms">
            <summary>
            Accessor on Fsms owned by this state
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.SubFsmsList">
            <summary>
            Accessor on Fsms owned by this state
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.StackIndex">
            <summary>
            0 means the state is on top of the stack
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.IsTopState">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.IsTopStateSelf">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.IsTopStateInHierarchy">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.Active">
            <summary>
            Says whether or not the state is in active stack
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.NeedToExit">
            <summary>
            Helps delaying destruction state exit time
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.StateTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.WriteValue(System.Object,System.Object)">
            <summary>
            Set data into ExchangeTable
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.ReadValue``1(System.Object,``0)">
            <summary>
            Reads a value from ExchangeTable
            </summary>
            <typeparam name="V">Must be IConvertible (int, float, class, object, ...)</typeparam>
            <param name="key"></param>
            <param name="defaultValue">If the key is unknown, this value will be returned</param>
            <returns>The ExchangeTable value or the default value in case of unknown key</returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.ReadXKValue``1(System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.ReadValue(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.ReadValueSimple(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.FormatSubStatesList(System.Int32)">
            <summary>
            Creates a formated string representative of the current active FSM and FSMState stacks
            </summary>
            <param name="indentLevel"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.EndState">
            <summary>
            Set IsOver to true
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.PushSubFsm(XKTools.AdvancedFSM.FSM)">
            <summary>
            Auto initializes the fsm
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.PushSubFsm(XKTools.AdvancedFSM.FSM,System.Boolean)">
            <summary>
            Auto initializes the fsm if asked
            </summary>
            <param name="fsm"></param>
            <param name="initialize"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.RemoveSubFsm(System.Object,System.Boolean)">
            <summary>
            Auto shutdown the fsm if asked
            </summary>
            <param name="identifier"></param>
            <param name="shutdown"></param>
            <returns>Null if the identifier is not referenced, the FSM otherwise</returns>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.ClearSubFsms(System.Boolean)">
            <summary>
            
            </summary>
            <param name="shutdown"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.LoadDataFromExchangeTable">
            <summary>
            This is good time to get useful pointers from hash table
            <remarks>This function is called at Enter time</remarks>
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.UnloadDataFromExchangeTable">
            <summary>
            This is good time to release state pointers so multiple references do not stay all app along
            <remarks>This function is called at Exit time</remarks>
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.SetStackIndex(System.Int32,XKTools.AdvancedFSM.FSMState)">
            <summary>
            
            </summary>
            <param name="newStackIndex"></param>
            <param name="topState"></param>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnInternalEnter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnInternalExit">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.AdvancedFSM.FSMState.OnInternalTopStateChanged(XKTools.AdvancedFSM.FSMState)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.AdvancedFSM.FSMState.IsDead">
            <summary>
            Called if a crash was detected
            </summary>
        </member>
        <member name="T:XKTools.GenomIK.CharGene">
            <summary>
            
            </summary>
            <remarks>This object kind is making strong use of the Recycler system</remarks>
        </member>
        <member name="M:XKTools.GenomIK.CharGene.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.CharGene.Randomize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.CharGene.Mutate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.CharGene.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.CharGene.ReturnToRecycler">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.CharGene.Dif(XKTools.GenomIK.Gene)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.GenomIK.CharGene.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GenomIK.FloatingGene">
            <summary>
            
            </summary>
            <remarks>This object kind is making strong use of the Recycler system</remarks>
        </member>
        <member name="M:XKTools.GenomIK.FloatingGene.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.FloatingGene.Randomize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.FloatingGene.Mutate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.FloatingGene.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.FloatingGene.ReturnToRecycler">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.FloatingGene.Dif(XKTools.GenomIK.Gene)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.GenomIK.FloatingGene.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GenomIK.Gene">
            <summary>
            A gene represents an element of a situation simaulation, that simmulation will then attributre a score to the parent Genome
            </summary>
            <remarks>This object kind is making strong use of the Recycler system</remarks>
        </member>
        <member name="M:XKTools.GenomIK.Gene.Randomize">
            <summary>
            Generates a random gene of given type, range is at discretion
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Gene.Duplicate">
            <summary>
            Generates a new identical gene
            </summary>>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.Gene.Mutate">
            <summary>
            Generates a new mutated gene
            <remarks>A mutation could be input from a more complex paramtric Mutation described as a class (based on user inputs for instance)</remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.Gene.ReturnToRecycler">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Gene.Dif(XKTools.GenomIK.Gene)">
            <summary>
            Computes difference between this gene and an other gene
            </summary>
            <param name="other"></param>
            <returns>0 for no difference, 1 for major diffence</returns>
        </member>
        <member name="T:XKTools.GenomIK.Genome">
            <summary>
            A Genome is a set of Genes coupled with a score for a situation (computed from a simulation)
            <remarks>This object kind is making strong use of the Recycler system</remarks>
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.AdditionalScore">
            <summary></summary>
        </member>
        <member name="M:XKTools.GenomIK.Genome.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Genome.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.Genome.AddGene(XKTools.GenomIK.Gene)">
            <summary>
            
            </summary>
            <param name="gene"></param>
        </member>
        <member name="M:XKTools.GenomIK.Genome.AttachAgent(XKTools.GenomIK.IGenomeAgent)">
            <summary>
            
            </summary>
            <param name="agent"></param>
        </member>
        <member name="M:XKTools.GenomIK.Genome.MaximizeScore(System.Single)">
            <summary>
            
            </summary>
            <param name="newScore"></param>
        </member>
        <member name="P:XKTools.GenomIK.Genome.Genes">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.VerifiedGenes">
            <summary>
            For sequential moves
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.Score">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.MinScore">
            <summary>
            Min score among multiple attempts
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.Generation">
            <summary>
            Max(parentA, parentB) + 1
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.Iteration">
            <summary>
            Interesting for immediate simulation system)
            <seealso cref="T:XKTools.GenomIK.CharGenomeSimulator"/>
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.EvaluationStep">
            <summary>
            Make sure an evaluation works
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.Genome.Agent">
            <summary>
            An external agent, useful to test continuous physics for instance
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Genome.Dif(XKTools.GenomIK.Genome)">
            <summary>
            Computes difference between this genome and an other genome
            </summary>
            <param name="other"></param>
            <returns>0 for no difference, 1 for major diffence</returns>
        </member>
        <member name="T:XKTools.GenomIK.GenomePool">
            <summary>
            Contains the Genomes, sorts best results and prunes remains. It is also in cahge of Genome's dating!
            </summary>
            <remarks>This object kind is making strong use of the Recycler system</remarks>
        </member>
        <member name="T:XKTools.GenomIK.GenomePool.GenerateRandomGenomeDlg">
            <summary>
            
            </summary>
            <param name="genome"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.GenerateRandomGenome``1(System.Int32)">
            <summary>
            Generates a new genome, completely uneducated from previous runs filled with genes
            </summary>
            <param name="genomeSize"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.FindMatches(XKTools.GenomIK.SimConf)">
            <summary>
            Generates pair of genomes
            <remarks>The default behaviour is to mix one of the best genomes with an other random genome</remarks>
            </summary>
            <param name="simConf"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.GenerateProsterity(System.Collections.Generic.List{XKTools.GenomIK.Match},XKTools.GenomIK.SimConf)">
            <summary>
            Generates genomes from matches
            </summary>
            <param name="matches"></param>
            <param name="simConf"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.GenerateFirstSeed``1(System.Int32)">
            <summary>
            
            </summary>
            <param name="genomeSize"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.GenerateRandomPool(System.Int32,XKTools.GenomIK.GenomePool.GenerateRandomGenomeDlg)">
            <summary>
            
            </summary>
            <param name="genomeCount"></param>
            <param name="dlg"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.GenerateRandomPool``1(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="genomeCount"></param>
            <param name="genomeSize"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.GenerateProsterity(XKTools.GenomIK.SimConf)">
            <summary>
            Generates new Genomes
            </summary>
            <param name="simConf"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.EndGenomesTest(XKTools.GenomIK.SimConf)">
            <summary>
            
            </summary>
            <param name="simConf"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.EndGenomeTest(XKTools.GenomIK.Genome,XKTools.GenomIK.SimConf)">
            <summary>
            
            </summary>
            <param name="genome"></param>
            <param name="simConf"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.InsertGenome(XKTools.GenomIK.Genome,XKTools.GenomIK.SimConf)">
            <summary>
            
            </summary>
            <param name="genome"></param>
            <param name="simConf"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.VerifyBranchInterest(XKTools.GenomIK.Genome,System.Int32,XKTools.GenomIK.SimConf)">
            <summary>
            
            </summary>
            <param name="genome"></param>
            <param name="idx">idx must be provided given between 0 and m_SortedGenomes.Count</param>
            <param name="simConf"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.PruneLowerGenomes(XKTools.GenomIK.Genome,System.Int32,XKTools.GenomIK.SimConf)">
            <summary>
            
            </summary>
            <param name="genome"></param>
            <param name="idx">idx must be provided given between 0 and m_SortedGenomes.Count</param>
            <param name="simConf"></param>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.RemoveGenomeAtIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.FindSortedSpot(XKTools.GenomIK.Genome)">
            <summary>
            Finds index to insert sortedly
            </summary>
            <param name="genome"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomePool.FindSortedSpotByRaw(XKTools.GenomIK.Genome)">
            <summary>
            Raw sorting, no optim there
            </summary>
            <param name="genome"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.GenomIK.GenomePool.BestGenome">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.GenomePool.LastBestGenome">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.GenomePool.BestCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.GenomePool.UntestedGenomes">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GenomIK.IGenomeAgent">
            <summary>
            To be placed over a MonoBehaviour or whatever that will help continuous detection
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.IGenomeAgent.AttachedGenome">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.IsDead">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.EvaluateGenome">
            <summary>
            This function must update genome score
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.MarkProps">
            <summary>
            Mark initial position, rotation, etc..
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.ResetProps">
            <summary>
            Reset for a new test
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.SetVisible(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.Activate(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.ActivateRecorderMode(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.GenomIK.IGenomeAgent.ApplyNextInput">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GenomIK.CharGenomeSimulator">
            <summary>
            This class is a demo or GenomIK
            <para>Usage: </para>
            <para>Add a CharGenomeSimulator component then call InitiateSimulation()</para>
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.CharGenomeSimulator.GenomeSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.CharGenomeSimulator.ConfigureSimConf">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.CharGenomeSimulator.GenerateRandomPool(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="genomeCount"></param>
            <param name="force"></param>
        </member>
        <member name="M:XKTools.GenomIK.CharGenomeSimulator.EvaluateGenome(XKTools.GenomIK.Genome)">
            <summary>
            
            </summary>
            <param name="genome"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.CharGenomeSimulator.SolveIteration">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.CharGenomeSimulator.GetScore(System.String,System.String)">
            <summary>
            The more score is high, the more chains are identical, until it reaches strX.Length
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.GenomIK.GenomeSimulator">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GenomIK.GenomeSimulator.m_GenomePool">
            <summary></summary>
        </member>
        <member name="F:XKTools.GenomIK.GenomeSimulator.m_IterationCount">
            <summary></summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.GenerateRandomPool(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="genomeCount"></param>
            <param name="force"></param>
        </member>
        <member name="P:XKTools.GenomIK.GenomeSimulator.GenomeSize">
            <summary></summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.ConfigureSimConf">
            <summary></summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.InitiateSimulation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GenomIK.GenomeSimulator.Pool">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.GenomeSimulator.SimConf">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.GenomeSimulator.Iterate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.OnInitiateSimulation">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.EvaluateGenome(XKTools.GenomIK.Genome)">
            <summary>
            
            </summary>
            <param name="genome"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.SolveIteration">
            <summary>
            Evaluates genomes performance
            </summary>
            <returns>True if ultimate solution is found</returns>
        </member>
        <member name="M:XKTools.GenomIK.GenomeSimulator.SolveThemAll">
            <summary>
            Solves all untested genomes pool
            </summary>
            <returns>True if ultimate solution is founr</returns>
        </member>
        <member name="T:XKTools.GenomIK.Match">
            <summary>
            Mixes X genomes
            <remarks>This object kind should be used through Recycler system</remarks>
            </summary>
        </member>
        <member name="F:XKTools.GenomIK.Match.m_Genes">
            <summary>
            Temp list for garbage avoidance
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Match.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Match.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GenomIK.Match.AddGenome(XKTools.GenomIK.Genome)">
            <summary>
            
            </summary>
            <param name="genome"></param>
        </member>
        <member name="M:XKTools.GenomIK.Match.GenerateProsterity(XKTools.GenomIK.SimConf)">
            <summary>
            Generates a new Gene based on its parents and mutation chances
            </summary>
            <param name="simConf"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.Match.Mix(XKTools.GenomIK.SimConf)">
            <summary>
            
            </summary>
            <param name="simConf"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GenomIK.Match.GetMaxFromGenomes(System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="geneCount"></param>
            <param name="generation"></param>
        </member>
        <member name="T:XKTools.GenomIK.SimConf">
            <summary>
            This class is a Genome Pair
            </summary>
            <remarks>This object kind is making strong use of the Recycler system</remarks>
        </member>
        <member name="M:XKTools.GenomIK.SimConf.OnGUI(XKTools.GenomIK.GenomePool)">
            <summary>
            
            </summary>
            <param name="pool"></param>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.StartPoolSize">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.BestPoolSize">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.AgentCount">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.VisibleAgentCount">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.NeededEvaluationCount">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.GenomePerMatch">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.MatchCount">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.MinMatchRange">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.MaxMatchRange">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.ChildPerMatch">
            <summary></summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.MutationRate">
            <summary>Chances of a mutation (from 0 to 1, no mutation to full mutation)</summary>
        </member>
        <member name="P:XKTools.GenomIK.SimConf.ResearchAxisDif">
            <summary>Chances of a mutation (from 0 to 1, percentatge of difference accepted to belong to an other branch)</summary>
        </member>
        <member name="T:XKTools.NeuralIK.Neuron">
            <summary>
            List of synapses
            <remarks>These objects are created with the Recycler</remarks>
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Neuron.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Neuron.Create(System.Single,System.Single)">
            <summary>
            Sets default values
            </summary>
            <param name="threshold"></param>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Neuron.SetResult(System.Int32)">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Neuron.AddSynapse(XKTools.NeuralIK.Neuron,System.Single)">
            <summary>
            
            </summary>
            <param name="connectedNeuron"></param>
            <param name="weight"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Neuron.Mutate(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="maxThreshold"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Neuron.Propagate">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Neuron.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Neuron.Threshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Neuron.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.NeuralIK.NeuronLayer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.Create(System.Int32)">
            <summary>
            Generates some virgin neurons
            </summary>
            <param name="layerSize"></param>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.SetResult(System.Int32)">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.ConnectLayer(XKTools.NeuralIK.NeuronLayer)">
            <summary>
            Link this layer to the other through synapses
            </summary>
            <param name="otherLayer"></param>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.Mutate(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="maxThreshold"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.Propagate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.NeuronLayer.LogResults">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.NeuralIK.Perceptron">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets default values
            </summary>
            <param name="inputNeuronCount"></param>
            <param name="hiddenNeuronCount"></param>
            <param name="outputNeuronCount"></param>
            <param name="inputResult"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.AddInputLayer(System.Int32)">
            <summary>
            
            </summary>
            <param name="neuronCount"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.AddHiddenLayer(System.Int32)">
            <summary>
            
            </summary>
            <param name="neuronCount"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.AddOutputLayer(System.Int32)">
            <summary>
            
            </summary>
            <param name="neuronCount"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.CreateLayer(System.Int32)">
            <summary>
            This funciton recycles a bneuron layer and inits it
            </summary>
            <param name="layerSize"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.ConnectLayers">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Mutate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.Propagate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Perceptron.IsValid">
            <summary>
            Checks the layers are non null
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.NeuralIK.Perceptron.InputLayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Perceptron.OutputLayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Perceptron.MaxThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Perceptron.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.NeuralIK.Synapse">
            <summary>
            This class represent an association of a Neuron and a Weight
            <remarks>These objects are created with the Recycler</remarks>
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Synapse.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NeuralIK.Synapse.Create(XKTools.NeuralIK.Neuron,System.Single)">
            <summary>
            Sets default values
            </summary>
            <param name="connectedNeuron"></param>
            <param name="weight"></param>
        </member>
        <member name="M:XKTools.NeuralIK.Synapse.Mutate">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Synapse.ConnectedNeuron">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.NeuralIK.Synapse.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Anim.HierarchyCopier">
             <summary>
            
             </summary>
        </member>
        <member name="M:XKTools.Anim.HierarchyCopier.CopyHierarchyRecursively(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Helps copying a hierarchy to an other similar hierarchy
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:XKTools.Anim.HierarchyCopier.CopyHierarchyRecursivelyGlobal(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Helps copying a hierarchy to an other similar hierarchy
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:XKTools.Anim.HierarchyCopier.CreateEmptyHierearchy(UnityEngine.GameObject)">
            <summary>
            Create a GameObject that has the same hierarchy as 'obj' but with no components
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.HierarchyCopier.CreateEmptyHierearchy(UnityEngine.Transform)">
            <summary>
            Create a GameObject that has the same hierarchy as 'toCopy''s gameObject but with no components
            </summary>
            <param name="toCopy"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Anim.Mecanimator">
            <summary>
            Wrapper helping to detect strange behaviours from Mecanim Animator such as a SetValue that does not work
            </summary>
        </member>
        <member name="T:XKTools.Anim.Mecanimator.AnimationDlg">
            <summary>
            
            </summary>
            <param name="mecanim">Source of the call</param>
            <param name="clip">Concerned clip</param>
            <param name="layer">Layer of the clip</param>
            <param name="loopCount">Number of loop that has been performed on this clip. Starts at 0.</param>
        </member>
        <member name="F:XKTools.Anim.Mecanimator.m_PlayingAnims">
            <summary>
            The first int is for the layer, the second one is for the loop count
            </summary>
        </member>
        <member name="F:XKTools.Anim.Mecanimator.m_PlayingAnimsBuffer">
            <summary>
            Idem
            </summary>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsInTransition">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsInTransition(System.Int32)">
            <summary>
            
            </summary>
            <param name="layerIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.GetCurrentAnimatorStateInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="layerIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.GetCurrentAnimationClipState(System.Int32)">
            <summary>
            
            </summary>
            <param name="layerIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.SetStateReference(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="currentState"></param>
            <param name="previousState"></param>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsTag(System.String)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsTag(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="indexLayer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsPlayingAnimation(System.String)">
            <summary>
            
            </summary>
            <param name="animationClipName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsPlayingAnimation(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="animationClipName"></param>
            <param name="indexLayer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsPlayingAnimationC(System.String)">
            <summary>
            Check if it plays an animation that contains partName
            </summary>
            <param name="partName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.IsPlayingAnimationC(System.String,System.Int32)">
            <summary>
            Check if it plays an animation that contains partName
            </summary>
            <param name="partName"></param>
            <param name="indexLayer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.SetInteger(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.GetInteger(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.SetFloat(System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.GetFloat(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.SetBool(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.GetBool(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Anim.Mecanimator.StringToHash(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.Animator">
            <summary>
            Get the original animator component in case some functionalities wouldn't be redirected from this class (Avatar for instance)
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.RootPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.RootRotation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.DeltaPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.DeltaRotation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.Speed">
            <summary>
            <para>This is animation speed</para>
            <para>0.0f pauses the animation</para>
            <para>1.0f plays the animation at normal speed</para>
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.AnimSpeed">
            <summary>
            <para>This is animation speed</para>
            <para>0.0f pauses the animation</para>
            <para>1.0f plays the animation at normal speed</para>
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.ApplyRootMotion">
            <summary>
            This moves the root node by the animation so the feet do not slide on the ground
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.MotionSpeed">
            <summary>
            This is motion speed, could be used as a velocity in Meters per Second
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.OnAnimationBegin">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Anim.Mecanimator.OnAnimationEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Asset.AssetManager">
            <summary>
            Base class for asset Managing
            </summary>
        </member>
        <member name="T:XKTools.Asset.AssetManager.InstanciatePrefabDlg">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Asset.AssetManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.AddFolder(System.Object,System.String)">
            <summary>
            Add a Ressource folder to the manager list
            </summary>
            <param name="id">the key of the folder</param>
            <param name="path">the path of the folder</param>
        </member>
        <member name="M:XKTools.Asset.AssetManager.GetPathFromFolder(System.Object)">
            <summary>
            Get the path of a folder by his key
            </summary>
            <param name="id">the requested Id</param>
            <returns>the path</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadResource``1(System.Object,System.String)">
            <summary>
            Load a resource that can be found in the Resources folder of your project
            </summary>
            <typeparam name="U">The type of asset you want to retrieve (must be a class)</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadResource``1(System.Object,System.String,System.Boolean)">
            <summary>
            Load a resource that can be found in the Resources folder of your project
            </summary>
            <typeparam name="U">The type of asset you want to retrieve (must be a class)</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="log">Should we log if we do not find the resource?</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadResource``1(System.String)">
            <summary>
            Load a resource that can be found in the Resources folder of your project
            </summary>
            <typeparam name="U">The type of asset you want to retrieve (must be a class)</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadResource``1(System.String,System.Boolean)">
            <summary>
            Load a resource that can be found in the Resources folder of your project
            </summary>
            <typeparam name="U">The type of asset you want to retrieve (must be a class)</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="log">Should we log if we do not find the resource?</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadResourceEx``1(System.Object,System.String)">
            <summary>
            Load a resource that can be found in the Resources folder of your project
            Throws an exception if the asset does not exists
            </summary>
            <typeparam name="U">The type of asset you want to retrieve (must be a class)</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadResourceEx``1(System.String)">
            <summary>
            Load a resource that can be found in the Resources folder of your project
            Throws an exception if the asset does not exists
            </summary>
            <typeparam name="U">The type of asset you want to retrieve (must be a class)</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadPrefab(System.Object,System.String)">
            <summary>
            Load a Prefab that can be found in the Resources folder of your project
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadPrefab(System.String)">
            <summary>
            Load a Prefab that can be found in the Resources folder of your project
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.PrefabExist(System.Object,System.String)">
            <summary>
            Check if a prefab exists in the Resources folder of your project
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>True if the prefab exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.PrefabExist(System.String)">
            <summary>
            Check if a prefab exists in the Resources folder of your project
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>True if the prefab exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadPrefabEx(System.Object,System.String)">
            <summary>
            Load a Prefab that can be found in the Resources folder of your project
            Throws an exception if the asset does not exists
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The wanted asset or null if the asset does not exists</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.LoadPrefabEx(System.String)">
            <summary>
            Load a Prefab that can be found in the Resources folder of your project
            Throws an exception if the asset does not exists
            </summary>
            <param name="resPath">The path to the wanted prefab (from Resources/ folder)</param>
            <returns>The wanted asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.Object,System.String,``0@)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="resource">The resource loaded</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.Object,System.String,``0@,System.Boolean)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="resource">The resource loaded</param>
            <param name="log">log in case of missing object</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.Object,System.String)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.Object,System.String,System.Boolean)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="log">log in case of missing object</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.String,``0@)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="resource">The resource loaded</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.String,``0@,System.Boolean)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="resource">The resource loaded</param>
            <param name="log">log in case of missing object</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.String)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateResource``1(System.String,System.Boolean)">
            <summary>
            Load and returns an instance of an asset
            </summary>
            <typeparam name="U">The type of asset you want to load and instantiate</typeparam>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="log">log in case of missing object</param>
            <returns>The instantiated asset</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,UnityEngine.Object@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="resource">the resource loaded</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,UnityEngine.Object@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resource">the resource loaded</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefabNoRoot(System.Object,System.String)">
            <summary>
            Load and Instantiate a Gameobject from Resources and destroy its root (return its child)
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefabNoRoot(System.String)">
            <summary>
            Load and Instantiate a Gameobject from Resources and destroy its root (return its child)
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,UnityEngine.Transform,UnityEngine.Object@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <param name="resource">the resource loaded</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,UnityEngine.Transform)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,UnityEngine.Transform,UnityEngine.Object@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <param name="resource">the resource loaded</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,UnityEngine.Transform)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,System.Int32,UnityEngine.Object[]@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="resources">the resources loaded</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,System.Int32)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,System.Int32,UnityEngine.Object[]@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="resources">the resources loaded</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,System.Int32)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,System.Int32,UnityEngine.Transform,UnityEngine.Object[]@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <param name="resources">the resources loaded</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,System.Int32,UnityEngine.Transform)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,System.Int32,UnityEngine.Transform,UnityEngine.Object[]@)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <param name="resources">the resources loaded</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,System.Int32,UnityEngine.Transform)">
            <summary>
            Load and Instantiate a Gameobject from Resources
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="parent">The transform that will be the parent of the created GameObject</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,System.Int32,XKTools.Asset.AssetManager.InstanciatePrefabDlg,UnityEngine.Object[]@)">
            <summary>
            Load and Instantiate a Gameobject from Resources with treatement
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="treatement">The treatement to make on the instances</param>
            <param name="resources">the resources loaded</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.Object,System.String,System.Int32,XKTools.Asset.AssetManager.InstanciatePrefabDlg)">
            <summary>
            Load and Instantiate a Gameobject from Resources with treatement
            </summary>
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="treatement">The treatement to make on the instances</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,System.Int32,XKTools.Asset.AssetManager.InstanciatePrefabDlg,UnityEngine.Object[]@)">
            <summary>
            Load and Instantiate a Gameobject from Resources with treatement
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="treatement">The treatement to make on the instances</param>
            <param name="resources">the resources loaded</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,System.Int32,XKTools.Asset.AssetManager.InstanciatePrefabDlg)">
            <summary>
            Load and Instantiate a Gameobject from Resources with treatement
            </summary>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="count">The number of instance to create</param>
            <param name="treatement">The treatement to make on the instances</param>
            <returns>The array of created GameObjects</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.Instantiate(System.Object,System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,UnityEngine.Space,UnityEngine.Object@)">
            <summary>
            Load and instantiate a GameObject
            </summary>
            
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="position">the position of the new instance</param>
            <param name="rotation">the rotation of the new instance</param>
            <param name="parent">the parent of the new instance</param>
            <param name="scale">the scale of the new instance</param>
            <param name="space">the reference space for instanciation</param>
            <param name="resource">the resource loaded</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.Instantiate(System.Object,System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,UnityEngine.Space)">
            <summary>
            Load and instantiate a GameObject
            </summary>
            
            <param name="folder">The registered folder where is the wanted asset (from Resources/ folder)</param>
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="position">the position of the new instance</param>
            <param name="rotation">the rotation of the new instance</param>
            <param name="parent">the parent of the new instance</param>
            <param name="scale">the scale of the new instance</param>
            <param name="space">the reference space for instanciation</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,UnityEngine.Space,UnityEngine.Object@)">
            <summary>
            Load and instantiate a GameObject
            </summary>
            
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="position">the position of the new instance</param>
            <param name="rotation">the rotation of the new instance</param>
            <param name="parent">the parent of the new instance</param>
            <param name="scale">the scale of the new instance</param>
            <param name="space">the reference space for instanciation</param>
            <param name="resource">the resource loaded</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiatePrefab(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Transform,UnityEngine.Space)">
            <summary>
            Load and instantiate a GameObject
            </summary>
            
            <param name="resPath">The path to the wanted asset (from Resources/ folder)</param>
            <param name="position">the position of the new instance</param>
            <param name="rotation">the rotation of the new instance</param>
            <param name="parent">the parent of the new instance</param>
            <param name="scale">the scale of the new instance</param>
            <param name="space">the reference space for instanciation</param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:XKTools.Asset.AssetManager.InstantiateInternal``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Asset.BundleInfo">
            <summary>
            This class contains all known data about an AssetBundle
            </summary>
        </member>
        <member name="T:XKTools.Asset.BundleInfo.EState">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleInfo.EState.Unavailable">
            <summary>
            Known, but not yet loaded (possibly already downloaded)
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleInfo.EState.Downloading">
            <summary>
            Being downloaded, will become available soon.
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleInfo.EState.Available">
            <summary>
            Available for file Loading
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleInfo.EState.Error">
            <summary>
            Some error occured
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Filename">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Url">
            <summary>
            Distant Path
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Path">
            <summary>
            Local Path
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Progress">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Bundle">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.AssetNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleInfo.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Asset.BundleLibraryGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Asset.BundleLibraryGUI.Start">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Asset.BundleManager">
            <summary>
            Class for asset bundle Management
            
            Asset bundles can not contains scripts...
            But they can contain many other data types:
            - AudioClip
            - Texture
            - Materials
            - Meshes
            - GameObjects
            
                Usage:
                
                    void Test()
                    {
                        LoadAssetBundle("TestRef", "http://192.168.1.1/assetBundles/Unsync/script.php?file=Bundle3.unity3d", OnSuccess, null);
                    }
                    
                    void OnSuccess(params object[] args)
                    {
                        object reference = args[0];
                        if (reference == (object)"TestRef")
                        {
                            TextAsset txt = (TextAsset)LoadObjectFromBundle(reference, "FileIntoBundle");
                            if (txt != null)
                            {
                                Debug.Log(txt.text);
                            }
                        }
                    }
            
            
            </summary>
        </member>
        <member name="T:XKTools.Asset.BundleManager.EProcessOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleManager.EProcessOrder.CacheThenNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleManager.EProcessOrder.NetThenCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleManager.EProcessOrder.NetOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.BundleManager.EProcessOrder.CacheOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Asset.BundleManager.AssetBundleEvent">
            <summary>
            In case of Success / Failure of bundle management, such a event will be triggered.
            The first argument contains the reference object helping retrieving the BundleInfo object.
            The third argument contains where the result comes from (EProcessOrder)
            In case of success, the second argument contains the BundleInfo object.
            In case of failure, the second argument contains the error message.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:XKTools.Asset.BundleManager.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Asset.BundleManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.BundleManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Asset.BundleManager.LoadAssetBundle(System.Object,System.String,XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.AssetBundleEvent)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="url"></param>
            <param name="success"></param>
            <param name="failure"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.LoadAssetBundle(System.Object,System.String,XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.AssetBundleEvent,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="url"></param>
            <param name="success"></param>
            <param name="failure"></param>
            <param name="ignoreCache"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.LoadAssetBundle(System.Object,System.String,XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.EProcessOrder)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="url"></param>
            <param name="success"></param>
            <param name="failure"></param>
            <param name="processOrder"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.LoadAssetBundle(System.Object,System.String,XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.EProcessOrder,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="url"></param>
            <param name="success"></param>
            <param name="failure"></param>
            <param name="processOrder"></param>
            <param name="limitToWifi"> </param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.RefreshLibrary(XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.AssetBundleEvent)">
            <summary>
            
            </summary>
            <param name="success"></param>
            <param name="failure"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.DownloadLibrary(XKTools.Asset.BundleManager.AssetBundleEvent,XKTools.Asset.BundleManager.AssetBundleEvent)">
            <summary>
            
            </summary>
            <param name="success"></param>
            <param name="failure"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.LoadObjectFromBundle(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.BundleManager.InstantiateObjectFromBundle(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.BundleManager.UnloadBundle(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="unloadAllLoadedObjects"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.ShowLibrary(System.Boolean)">
            <summary>
            Helps debugging library by showing through Unity.GUI the states of the library...
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Asset.BundleManager.GetBundle(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.BundleManager.GetBundleInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Asset.BundleManager.SyncUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleManager.SyncReady">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Asset.BundleManager.Library">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Asset.BundleManager.GetCachedPath(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Asset.DownloadManager">
            <summary>
            Class used to handle the downloads
            </summary>
        </member>
        <member name="T:XKTools.Asset.DownloadManager.OnDownloadFailedDlg">
            <summary>
            The OnDownloadFailed delegate
            </summary>
            <param name="uid">The id of the download</param>
            <param name="error">The error</param>
            <param name="domain">The download domain)</param>
            <param name="path">The download path</param>
        </member>
        <member name="T:XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg">
            <summary>
            The OnDownloadTextSucceeded delegate
            </summary>
            <param name="uid">The id of the download</param>
            <param name="text">The text</param>
        </member>
        <member name="T:XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg">
            <summary>
            The OnDownloadtextureSucceeded delegate
            </summary>
            <param name="uid">The id of the download</param>
            <param name="tex">The texture</param>
        </member>
        <member name="T:XKTools.Asset.DownloadManager.CompressTextDlg">
            <summary>
            The delegate to compress a received text
            </summary>
            <param name="buffer">the string to compress into that same string</param>
        </member>
        <member name="T:XKTools.Asset.DownloadManager.CleanTextDlg">
            <summary>
            The delegate to compress a received text
            </summary>
            <param name="str">the string to clean before compression</param>
        </member>
        <member name="F:XKTools.Asset.DownloadManager.c_Tag">
            <summary>
            Log tag for the DownloadManager
            </summary>
        </member>
        <member name="F:XKTools.Asset.DownloadManager.s_InternetLossTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.DownloadManager.s_DownloadTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Asset.DownloadManager.s_ActivityTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.Initialize">
            <summary>
            Initialize the Download Manager
            </summary>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.Shutdown">
            <summary>
            Shutdown the Download Manager
            </summary>
        </member>
        <member name="P:XKTools.Asset.DownloadManager.DomainUrl">
            <summary>
            The domain url
            </summary>
        </member>
        <member name="P:XKTools.Asset.DownloadManager.DeleteAfterQuestionMark">
            <summary>
            Removes text after the question mark in the filename
            </summary>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.GetProgressionOfDownload(System.Int32)">
            <summary>
            Get the progression of the download of given uid (between 0.0f and 1.0f)
            If no download of given uid is found, will assume the download has ended and return 1.0f
            </summary>
            <param name="uid">The uid of the download we want to know the state of</param>
            <returns>The percent of progression between 0 and 1</returns>
        </member>
        <member name="P:XKTools.Asset.DownloadManager.CompressText">
            <summary>
            Helps string compression
            </summary>
        </member>
        <member name="P:XKTools.Asset.DownloadManager.DecompressText">
            <summary>
            Helps string decompression
            </summary>
        </member>
        <member name="P:XKTools.Asset.DownloadManager.CleanText">
            <summary>
            Helps string clean before getting to compression step
            </summary>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextFile(System.String,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextFile(System.String,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextFile(System.String,System.Boolean,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="saveText">Cache the downloaded file</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextFile(System.String,System.String,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="domain">The download domain (helps for saving files on hard drive)</param>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextFile(System.String,System.String,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="domain">The download domain (helps for saving files on hard drive)</param>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextFile(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="domain">The download domain (helps for saving files on hard drive)</param>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="saveText">Cache the downloaded file</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextureFile(System.String,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextureFile(System.String,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextureFile(System.String,System.Boolean,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the text file at the given path
            </summary>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="saveTexture">Cache the downloaded file</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextureFile(System.String,System.String,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the texture at the given path
            </summary>
            <param name="domain">The download domain</param>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextureFile(System.String,System.String,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the texture at the given path
            </summary>
            <param name="domain">The download domain</param>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DownloadTextureFile(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,XKTools.Asset.DownloadManager.OnDownloadTextureSucceededDlg,XKTools.Asset.DownloadManager.OnDownloadFailedDlg)">
            <summary>
            Download the texture at the given path
            </summary>
            <param name="domain">The download domain</param>
            <param name="path">The path</param>
            <param name="forceDownload">Force the download from the server and not from the cache</param>
            <param name="limitToWifi">Limit the download to the wifi, skips data carrier connection</param>
            <param name="saveTexture">Cache the downloaded file</param>
            <param name="onSuccess">The onSuccess delegate</param>
            <param name="onFail">The onFail delegate</param>
            <returns>The download id, -1 in case of error, -2 in case of cache loading</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.GetInternalPath(System.String)">
            <summary>
            Get the internal absolute path for the given relative path
            </summary>
            <param name="path">The relative path</param>
            <returns>The internal absolute path</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.FileExists(System.String,System.String)">
            <summary>
            Check if the file at given path exists
            </summary>
            <param name="domain">The path domain</param>
            <param name="path">The path to test</param>
            <returns>True if the file exists</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.GetFileNameAndPath(System.String)">
            <summary>
            Get back the filename and the path of the given path
            </summary>
            <param name="path">The path where to find the file we want the infos from</param>
            <returns>A tab with the filename (0) and the full path (1)</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.SaveText(System.String,System.String)">
            <summary>
            Save the given text at the given path
            </summary>
            <param name="path">The path where to save the text asset</param>
            <param name="text">The text to save</param>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.LoadText(System.String)">
            <summary>
            Load the text at the given path
            </summary>
            <param name="path">The path where to find the text asset</param>
            <returns>The wanted text</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.SaveTexture(System.String,UnityEngine.Texture2D)">
            <summary>
            Save the given text at the given path
            </summary>
            <param name="path">The path where to save the texture asset</param>
            <param name="texture">The texture to save</param>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.LoadTexture(System.String)">
            <summary>
            Load the text at the given path
            </summary>
            <param name="path">The path where to find the texture asset</param>
            <returns>The wanted text</returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.TestCertif(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Asset.DownloadManager.DetectError(UnityEngine.WWW,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Battery.EBatteryProfile">
            <summary>
            Performance profile selector (according to device and user selection)
            </summary>
        </member>
        <member name="F:XKTools.Battery.EBatteryProfile.Scrooge">
            <summary>
            Very low perf settings
            </summary>
        </member>
        <member name="F:XKTools.Battery.EBatteryProfile.Mild">
            <summary>
            Low perf settings
            </summary>
        </member>
        <member name="F:XKTools.Battery.EBatteryProfile.Typical">
            <summary>
            High perf settings (limited to 60 fps)
            </summary>
        </member>
        <member name="F:XKTools.Battery.EBatteryProfile.NoLimit">
            <summary>
            High perf settings
            </summary>
        </member>
        <member name="F:XKTools.Battery.EBatteryProfile.Custom">
            <summary>
            Must be configure in each project. The default configuration is Typical
            </summary>
        </member>
        <member name="F:XKTools.Battery.EBatteryProfile.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Battery.EPerfSetting">
            <summary>
            Performance per situation (according to game phases)
            </summary>
        </member>
        <member name="F:XKTools.Battery.EPerfSetting.Static">
            <summary>
            No more screen refreshment needed - very low framerate + RTT
            </summary>
        </member>
        <member name="F:XKTools.Battery.EPerfSetting.Low">
            <summary>
            Lower performances for less battery consumption - lower framerate
            </summary>
        </member>
        <member name="F:XKTools.Battery.EPerfSetting.High">
            <summary>
            Higher performances (more battery consumption) - higher framerate
            </summary>
        </member>
        <member name="F:XKTools.Battery.EPerfSetting.Custom1">
            <summary>
            Must be configure in each project. The default configuration is High
            </summary>
        </member>
        <member name="F:XKTools.Battery.EPerfSetting.Custom2">
            <summary>
            Must be configure in each project. The default configuration is High
            </summary>
        </member>
        <member name="F:XKTools.Battery.EPerfSetting.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Battery.BatteryProfile">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Battery.BatteryProfile.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Battery.BatteryProfile.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Battery.BatteryProfile.SetSetting(XKTools.Battery.EPerfSetting,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This function helps defining the profile
            </summary>
            <param name="setting"></param>
            <param name="vsync">Unity's Vertical Sync index [0, 1, 2]</param>
            <param name="framerateCap">Max frame per second, -1 is unlimited</param>
            <param name="noCamera">Stop refreshing cameras</param>
        </member>
        <member name="M:XKTools.Battery.BatteryProfile.GetVSync(XKTools.Battery.EPerfSetting)">
            <summary>
            Retrieve the vertical sync related to the specified profile
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Battery.BatteryProfile.GetFramerate(XKTools.Battery.EPerfSetting)">
            <summary>
            Retrieve the framerate related to the specified profile
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Battery.BatteryProfile.GetNoCamera(XKTools.Battery.EPerfSetting)">
            <summary>
            Retrieve the framerate related to the specified profile
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Battery.BatterySaver">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Battery.BatterySaver.c_Tag">
            <summary>Tag for log category</summary>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.ConfigureBatteryProfile(XKTools.Battery.EBatteryProfile,XKTools.Battery.EPerfSetting,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This function helps defining the profile
            </summary>
            <param name="profile"></param>
            <param name="setting"></param>
            <param name="vsync">Unity's Vertical Sync index [0, 1, 2]</param>
            <param name="framerateCap">Max frame per second, -1 is unlimited</param>
            <param name="noCamera">Stop refreshing cameras</param>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.ConfigureInputTime(System.Single)">
            <summary>
            Time during which the perf will remain high after an input
            </summary>
            <param name="inputTime"></param>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.SetPerfSetting(XKTools.Battery.EPerfSetting,System.Object)">
            <summary>
            
            </summary>
            <param name="setting"></param>
            <param name="revertReference"></param>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.RevertPerfSetting(System.Object)">
            <summary>
            
            </summary>
            <param name="revertReference"></param>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.SetBatteryProfile(XKTools.Battery.EBatteryProfile)">
            <summary>
            
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.GetBatteryProfile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.GetBatteryProfile(XKTools.Battery.EBatteryProfile)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.GetNextPerfSetting">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.GetCurrentPerfSetting">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.GetLastPerfSetting(System.Object)">
            <summary>
            
            </summary>
            <param name="revertReference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Battery.BatterySaver.OverrideLastPerfSetting(System.Object,XKTools.Battery.EPerfSetting)">
            <summary>
            
            </summary>
            <param name="revertReference"></param>
            <param name="lastSetting"></param>
        </member>
        <member name="T:XKTools.CameraCallbacks">
            <summary>
            This script is automatically added to the cameras registered to the CameraManager
            </summary>
        </member>
        <member name="T:XKTools.CameraCallbacks.CameraEventDlg">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraCallbacks.OnPreCullCB">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraCallbacks.OnPreRenderCB">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraCallbacks.OnPostRenderCB">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.CameraBehaviour.FlyCamera">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraBehaviour.FlyCamera.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraBehaviour.FlyCamera.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraBehaviour.FlyCamera.OrientateCamera">
            <summary>
            This function orientates the camera according to the mouse or target node
            </summary>
        </member>
        <member name="M:XKTools.CameraBehaviour.FlyCamera.MoveCamera">
            <summary>
            This moves the camera according to keyboard inputs
            </summary>
        </member>
        <member name="P:XKTools.CameraBehaviour.FlyCamera.MainSpeed">
            <summary>
            Regular camera speed
            </summary>
        </member>
        <member name="P:XKTools.CameraBehaviour.FlyCamera.MouseSensitivity">
            <summary>
            Mouse sensitivity
            </summary>
        </member>
        <member name="P:XKTools.CameraBehaviour.FlyCamera.ParentNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraBehaviour.FlyCamera.TargetNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraBehaviour.FlyCamera.FreeTargeting">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Config">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.LoadConfigProperties(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:XKTools.Config.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.GetProperty(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.GetPropertyAsInt(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.GetPropertyAsFloat(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.GetPropertyAsDouble(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Config.GetPropertyAsBool(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ConfigFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFile.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFile.LoadConfigProperties(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:XKTools.ConfigFile.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFile.GetProperty(System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFile.GetPropertyAsInt(System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFile.GetPropertyAsFloat(System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFile.GetPropertyAsDouble(System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFile.GetPropertyAsBool(System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.ConfigFileBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFileBase.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFileBase.LogMissingProperty(System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:XKTools.ConfigFileBase.LogParsingError(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <param name="type"></param>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadVector3(System.Collections.Hashtable,System.String,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadVector2(System.Collections.Hashtable,System.String,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadFloat(System.Collections.Hashtable,System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadInt(System.Collections.Hashtable,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadVector3(System.Collections.Generic.Dictionary{System.String,System.String},System.String,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadVector2(System.Collections.Generic.Dictionary{System.String,System.String},System.String,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadFloat(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadInt(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadBool(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.ReadString(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigFileBase.LoadConfigProperties(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFileBase.GetContent(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigFileBase.LoadConfigProperties(System.Xml.XmlNode)">
            <summary>
            This function is responsible for xml parsing
            </summary>
            <param name="document"></param>
        </member>
        <member name="T:XKTools.ConfigManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigManager.GetConfigFile(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigManager.IsConfigFileRegistered(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ConfigManager.RegisterConfigFile(System.Object,XKTools.ConfigFileBase)">
            <summary>
            Auto unregister previous config file matching the reference
            </summary>
            <param name="reference"></param>
            <param name="configFile"></param>
        </member>
        <member name="M:XKTools.ConfigManager.UnregisterConfigFile(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="P:XKTools.ConfigManager.Config">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigManager.AddConfig(System.Object,XKTools.ConfigFileBase)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="config"></param>
        </member>
        <member name="M:XKTools.ConfigManager.ClearConfig(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.ConfigManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.EContextState">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EContextState.Common">
            <summary>
            Chat messages, etc.
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EContextState.WaitForSync">
            <summary>
            Waits for the fsm to move on to the next state according to network messages
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EContextState.Gaming">
            <summary>
            The users are now playing the game
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.EContextData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EContextData.GameState">
            <summary>
            This is the state containing the game fsm to track rage quit
            GamingState is waiting for such an event
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.ENetMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetMessage.Common">
            <summary>
            Chat messages, etc.
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetMessage.Sync">
            <summary>
            Lobby Messages (vote for map selection, whatever), Waits for everyone to be ready to start / reset the game, etc...
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetMessage.Game">
            <summary>
            Game messages to be shared among everyone
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetMessage.Transit">
            <summary>
            In between two games
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.ESyncMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ESyncMessage.LoadGame">
            <summary>
            Asks for game loading, also contains pre loading configuration (level, grid size, etc.)
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ESyncMessage.GameLoaded">
            <summary>
            The game is now loaded on the device
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ESyncMessage.StartGame">
            <summary>
            The users starts playing when receiving this message
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ESyncMessage.LoadNextGame">
            <summary>
            Load new game/level (KTBG)
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ESyncMessage.StopGame">
            <summary>
            The user return to menu/lobby when receiving this message
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.ENetDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetDirection.ClientToServer">
            <summary>
            Data sent from Client to Server (waiting for approval and return)
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetDirection.ServerToClient">
            <summary>
            Once validated, the Server return the instructions
            <remarks>This value can also be used to communicate from client to clients (no vlaidation required then)</remarks>
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetDirection.NotStored">
            <summary>
            Datas are not sended through the network 
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.ENetDirection.Stored">
            <summary>
            Datas are stored in game data (StoredDatas array)
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.EIntType">
            <summary>
            Used to cast enums
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EIntType.Byte">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EIntType.Short">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EIntType.Int">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.EType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Int">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Hashtable">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.ArrayList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Value">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Vector3">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Byte">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Short">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Vector2">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.ByteArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.IntArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.FloatArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.StringUtf16">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.UInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EType.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.EMsgFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EMsgFormat.RecreationIds">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Const.EContextFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EContextFormat.Portrait">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Const.EContextFormat.Landscape">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.ContextManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.ContextManager.UserContextCreatorDlg">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Context.ContextManager.RecreateMessageDlg">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Context.ContextManager.UserContextCreatedDlg">
            <summary>
            
            </summary>
            <param name="uc"></param>
            <param name="isLocalUser"></param>
        </member>
        <member name="F:XKTools.Context.ContextManager.c_SyncTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.ContextManager.c_FsmTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.ContextManager.c_NetTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.ContextManager.s_UseControllerManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.ConfigureNetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.OnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.LinkFsmToUserContextes(XKTools.AdvancedFSM.FSM)">
            <summary>
            All users are sharing the same game fsm
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.LinkFsmToUserContext(XKTools.AdvancedFSM.FSM,XKTools.Context.UserContext)">
            <summary>
            Use this function when each user owns a specific game fsm
            UnlinkFsm should be then called when leaving
            </summary>
            <param name="fsm"></param>
            <param name="uc"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.CreateUserContext(System.Boolean,XKTools.EPlayerType)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="playerType"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.CreateUserContext(System.Boolean,System.Boolean,XKTools.EPlayerType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="local"></param>
            <param name="playerType"></param>
            <param name="detectProps">Sets m_SingleDevice and m_Server</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.AddDefaultUserContext">
            <summary>
            Adds a default context (for testing) when the lobby state has not been creating them
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.AddDefaultUserContext(XKTools.EPlayerType)">
            <summary>
            Adds a default context (for testing) when the lobby state has not been creating them
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.AddDefaultUserContext(XKTools.EPlayerType,XKTools.EPlayerType)">
            <summary>
            Adds a default context (for testing) when the lobby state has not been creating them
            </summary>
            <param name="player1"></param>
            <param name="player2"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.AddDefaultUserContext(System.Collections.Generic.List{XKTools.EPlayerType},System.Boolean)">
            <summary>
            Adds default contextes (for testing) when the lobby state has not been creating them
            </summary>
            <param name="players"></param>
            <param name="localMultiplayer">Says if the network</param>
        </member>
        <member name="M:XKTools.Context.ContextManager.AddDefaultUserContext(XKTools.EPlayerType[],System.Boolean)">
            <summary>
            Adds default contextes (for testing) when the lobby state has not been creating them
            </summary>
            <param name="players"></param>
            <param name="localMultiplayer">Says if the network</param>
        </member>
        <member name="M:XKTools.Context.ContextManager.AddFakeUserContext(XKTools.EPlayerType)">
            <summary>
            Used to add some AIs (or maybe spectators) on a network game
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.ClearFakeUsers">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.DisconnectPlayer(XKTools.Context.UserContext,XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
            <param name="uc"></param>
            <param name="reason"></param>
        </member>
        <member name="P:XKTools.Context.ContextManager.ContextFsm">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.WaitingForUsers">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.SequenceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.SequenceInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.ColorsAvailability">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.ClearContextes">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.CreatePlayerCB(System.Boolean,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <param name="isLocalPlayer"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.CreatePlayerCallback(System.Boolean,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <param name="isLocalPlayer"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.CreatePlayerCallback(System.Boolean,System.Boolean,XKTools.Net.PlayerData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="isLocalPlayer"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
            <param name="detectProps">Sets m_SingleDevice and m_Server props</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.UnregisterUserContext(XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="uc"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.UnlinkFsm(XKTools.AdvancedFSM.FSM)">
            <summary>
            Should be called only when game fsms are not shared among players
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.SendMessage(XKTools.Context.Message.MessageBase)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.OnMessage(System.Collections.ArrayList,XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="from"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.ReturnColor(System.Int32)">
            <summary>
            
            </summary>
            <param name="colorIdx"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.RefreshColorAvailability(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="previousColorIdx"></param>
            <param name="colorIdx"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.WaitForOtherUsers(XKTools.Context.Message.MessageBase)">
            <summary>
            
            </summary>
            <param name="waitForMsg"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.StopWaitingForOtherUsers">
            <summary>
            Cancels WaitForOtherUsers (mostly to prevent a scary log that says the logix might be fucked up!)
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.IsWaitingForOthers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.SetUserReadyArguments(System.Object,System.Object[])">
            <summary>
            Set arguments for the message once all users are ready
            <remarks>The data will be released as soon as they're send</remarks>
            </summary>
            <param name="reference"></param>
            <param name="args"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.AUserIsReady(System.Int32)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.AllUsersAreReady">
            <summary>
            Should not be called except in fake occasion (KTBG for instance)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.SetAvailableColors(UnityEngine.Color[])">
            <summary>
            
            </summary>
            <param name="colors"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.SetAvailableColors(UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="colors"></param>
            <param name="minBright"></param>
            <param name="maxBright"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.GetContext(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextManager.GetContext(XKTools.AdvancedFSM.FSM)">
            <summary>
            
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Context.ContextManager.Contextes">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.LocalUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.ServerUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.SingleDevice">
            <summary>
            This Local value explicits wether or not the game is played on 1 device or not
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.Server">
            <summary>
            Local Server
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.Solo">
            <summary>
            Says if the game is played by several people
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.SetState(XKTools.Context.Const.EContextState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:XKTools.Context.ContextManager.SetState(XKTools.Context.Const.EContextState,XKTools.AdvancedFSM.FSM.EStack)">
            <summary>
            Set a new context state. For exemple the stack parameter will be used to push a WaitForSyncState with a GamingState activated
            </summary>
            <param name="state"></param>
            <param name="stack"> </param>
        </member>
        <member name="M:XKTools.Context.ContextManager.GetTopStateReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextManager.GetState(XKTools.Context.Const.EContextState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Context.ContextManager.OnUserContextCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.UserContextCreator">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.AvailableColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.LocalHumanPlayerCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.MessageStatsHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextManager.RetainMessages">
            <summary>
            switches between immediate (false) and delayed (true) messages sending
            </summary>
            <remarks>Can be switch at any moment!</remarks>
        </member>
        <member name="T:XKTools.Context.State.Context.CommonState">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.CommonState.#ctor(System.Object,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="context"></param>
        </member>
        <member name="M:XKTools.Context.State.Context.CommonState.OnNetMessage(XKTools.Context.Message.MessageBase,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Context.State.Context.ContextBaseState">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.State.Context.ContextBaseState.m_ContextManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.State.Context.ContextBaseState.m_UserContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.#ctor(System.Object,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="context"></param>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.Enter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.Exit">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.OnNetMessage(XKTools.Context.Message.MessageBase,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.ValidateAction(XKTools.Context.Message.MessageBase,System.Boolean)">
            <summary>
            This function is the one in charge of checking the action can be performed
            </summary>
            <param name="msg"></param>
            <param name="isServer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.State.Context.ContextBaseState.AskForExit(XKTools.AdvancedFSM.FSMState)">
            <summary>
            
            </summary>
            <param name="nextState"></param>
        </member>
        <member name="P:XKTools.Context.State.Context.ContextBaseState.UserContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.State.Context.GamingState">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.GamingState.#ctor(System.Object,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="context"></param>
        </member>
        <member name="M:XKTools.Context.State.Context.GamingState.Enter">
            <summary>
            Called when pushed in stack
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.GamingState.Exit">
            <summary>
            Called when getting out of the active stack
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.GamingState.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.GamingState.ReceiveData(System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="vals"></param>
        </member>
        <member name="M:XKTools.Context.State.Context.GamingState.OnNetMessage(XKTools.Context.Message.MessageBase,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Context.State.Context.WaitForSyncState">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.WaitForSyncState.#ctor(System.Object,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="context"></param>
        </member>
        <member name="M:XKTools.Context.State.Context.WaitForSyncState.Enter">
            <summary>
            Called when pushed in stack
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.WaitForSyncState.Exit">
            <summary>
            Called when getting out of the active stack
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.WaitForSyncState.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.State.Context.WaitForSyncState.OnNetMessage(XKTools.Context.Message.MessageBase,XKTools.Context.UserContext)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.ContextViewer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextViewer.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextViewer.Update">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Message.CommonMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.CommonMessage.PushRecreationIds(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="T:XKTools.Context.Message.GameMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.GameMessage.PushRecreationIds(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="T:XKTools.Context.Message.MessageBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_ContextManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_SenderId">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_NetDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_IsDirty">
            <summary>
            ToObjectArray() will be called again on server side (use this bool to add new data)
            <remarks>This flag should probably be raised in the CheckValidity()</remarks>
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_PopIdx">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_ProcessingMessageData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBase.m_BatchingList">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.ToObjectList">
            <summary>
            Format:
            [[recreation Ids], [routing], [message data]]
            where [message data] = [[int buffer], [float buffer], other data]] when MessageBuilder.BinaryFormat is NonTyped
            About int and float buffers, note that:
            - float buffer handles float, double, Vector2 and Vector3 types
            - they are automatically handled by the PreMessagePush, PostMessagePush, PreMessagePop and PostMessagePop methods
            - they are optional, which that if they are empty, [message data] could be [[float buffer], [other data]] or [[other data]] for instance
            - they can only store values that are at the same level as the ArrayList from PushMessage. Any value on a lower level (an Hashtable in this ArrayList 
             for instance) will not be stored in any buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.Rebuild(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.Execute">
            <summary>
            Applies the received data to the game
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.CheckValidity(System.Boolean)">
            <summary>
            Ensure that the message can be applied on server and clients
            </summary>
            <param name="serverCheck">true if the method is executed by the server</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PushRecreationIds(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PushRouting(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.RebuildRouting(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PushDebug(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
            <param name="msg">Message content (this is for Checksum computation)</param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.RebuildDebug(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
            <param name="msg">Message content (this is for Checksum computation)</param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PushMessage(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.RebuildMessage(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.SendDataToState(System.Object,System.Object,System.Boolean,System.Object[])">
            <summary>
            
            </summary>
            <param name="stateReference"></param>
            <param name="callbackReference">reference for ReceiveData state</param>
            <param name="skipLocalUser"></param>
            <param name="vals"></param>
            <returns>The user context used to catch the fsm, null if the user is skipped</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.SendDataToState(System.Int32,System.Object,System.Object,System.Boolean,System.Object[])">
            <summary>
            
            </summary>
            <param name="ucId">UserContext Id</param>
            <param name="stateReference"></param>
            <param name="callbackReference">reference for ReceiveData state</param>
            <param name="skipLocalUser"></param>
            <param name="vals"></param>
            <returns>The user context used to catch the fsm, null if the user is skipped</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.SendDataToState(XKTools.Context.UserContext,XKTools.AdvancedFSM.FSMState,System.Object,System.Boolean,System.Object[])">
            <summary>
            
            </summary>
            <param name="uc"></param>
            <param name="state"></param>
            <param name="callbackReference">reference for ReceiveData state</param>
            <param name="skipLocalUser"></param>
            <param name="vals"></param>
            <returns>The user context used to catch the fsm, null if the user is skipped</returns>
        </member>
        <member name="P:XKTools.Context.Message.MessageBase.SenderId">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.Message.MessageBase.NetDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.Message.MessageBase.CanUseBatchingList">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.Message.MessageBase.ResetSequenceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.Message.MessageBase.Checksum">
            <summary>
            Enables / Disables checksum
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PushObject(System.Collections.ArrayList,System.Object)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PushEnum``1(System.Collections.ArrayList,System.Enum)">
            <summary>
            Push an enum value to the list using the given enum type
            </summary>
            <typeparam name="T">Type in which the value will be cast. Should be byte, short or int.</typeparam>
            <param name="list"></param>
            <param name="obj"></param>
            <returns>True on success, false if an error occurs</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PreMessagePush">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PostMessagePush(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PreMessagePop(System.Collections.ArrayList)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PopObject``1(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PopObjectNonBatched``1(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.PopObjectBatched``1(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromArrayListToVector3(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromVector3ToArrayList(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromFloatArrayToVector3(System.Single[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromVector3ToFloatArray(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromArrayListToArray``1(System.Collections.ArrayList,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="wantedCount"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromArrayToArrayList``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromIntPairToArrayList(XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBase.FromArrayListToIntPair(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Context.Message.MessageBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Message.MessageBuilder.EBinaryFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.EBinaryFormat.Typed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.EBinaryFormat.NonTyped">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Message.MessageBuilder.RecreateMessageDlg">
            <summary>
            
            </summary>
            <param name="vals"></param>
            <param name="ids"></param>
            <param name="idsIdx"></param>
            <returns></returns>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.RecreateCommonMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.RecreateGameMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.RecreateSyncMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.s_DefaultEnumType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.MessageBuilder.s_BinaryFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.RecreateMessage(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="vals"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.RecreateMessage(System.Collections.ArrayList,System.Collections.ArrayList,System.Int32,XKTools.Context.Message.MessageBuilder.RecreateMessageDlg)">
            <summary>
            Check Validation
            </summary>
            <param name="vals"></param>
            <param name="ids"></param>
            <param name="idsIdx"></param>
            <param name="onSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.CastEnum(System.Object)">
            <summary>
            Cast an enum value into the default enum type
            </summary>
            <param name="value">The value to be cast</param>
            <returns>The cast value on success, null on error</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.CastEnum(System.Object,XKTools.Context.Const.EIntType)">
            <summary>
            Cast an enum value into the given type
            </summary>
            <param name="value">The value to be cast</param>
            <param name="type">Destination type</param>
            <returns>The cast value on success, null on error</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.CastEnumToByte(System.Object)">
            <summary>
            Cast an enum value into the given type
            </summary>
            <param name="value">The value to be cast</param>
            <returns>The cast value on success, null on error</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.CastEnumToShort(System.Object)">
            <summary>
            Cast an enum value into the given type
            </summary>
            <param name="value">The value to be cast</param>
            <returns>The cast value on success, null on error</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.CastEnumToInt(System.Object)">
            <summary>
            Cast an enum value into the given type
            </summary>
            <param name="value">The value to be cast</param>
            <returns>The cast value on success, null on error</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.UncastEnum``1(System.Object)">
            <summary>
            Cast an object into an enum value
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="obj">Object to be cast</param>
            <returns>A valid value if the cast went alright, deault(T) if an error occured</returns>
        </member>
        <member name="M:XKTools.Context.Message.MessageBuilder.UncastEnumAsInt(System.Object)">
            <summary>
            Cast an enum value from its byte/short/int value into its int value
            </summary>
            <param name="obj">The enum value as parsed from binary</param>
            <returns>-1 it 'obj' type is neither byte, nor short, not int or a positive int value corresponding to the enum value</returns>
        </member>
        <member name="P:XKTools.Context.Message.MessageBuilder.DefaultEnumType">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.Message.MessageBuilder.BinaryFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.Message.SyncMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.Message.SyncMessage.m_EndSyncMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.SyncMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.Message.SyncMessage.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="resetPing"></param>
        </member>
        <member name="M:XKTools.Context.Message.SyncMessage.PushRecreationIds(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:XKTools.Context.Message.SyncMessage.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.ContextTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextTransform.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextTransform.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Rect)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="scale"></param>
            <param name="constraintZone"></param>
        </member>
        <member name="M:XKTools.Context.ContextTransform.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Rect,System.Single)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="scale"></param>
            <param name="constraintZone"></param>
            <param name="rotationDeg"></param>
        </member>
        <member name="P:XKTools.Context.ContextTransform.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextTransform.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextTransform.ConstraintZone">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.ContextTransform.Rotation">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Context.ContextTransformCreator">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.ContextTransformCreator.c_FacesToFaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextTransformCreator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.ContextTransformCreator.ComputeScaleAndPos(System.Int32,System.Boolean,System.Boolean,XKTools.Context.Const.EContextFormat,System.Single)">
            <summary>
            
            </summary>
            <param name="playerCount"></param>
            <param name="singleDevice"></param>
            <param name="facesToFaces"></param>
            <param name="format"></param>
            <param name="widestScreenRatio"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextTransformCreator.ComputeScaleAndPos(System.Boolean,XKTools.Context.Const.EContextFormat,System.Single)">
            <summary>
            
            </summary>
            <param name="facesToFaces"></param>
            <param name="format"></param>
            <param name="widestScreenRatio"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.ContextTransformCreator.AttributeScaleAndPos(System.Collections.Generic.List{XKTools.Context.ContextTransform})">
            <summary>
            
            </summary>
            <param name="trs"></param>
        </member>
        <member name="T:XKTools.Context.UserContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.s_GameReference">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_ContextManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_GameFsm">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_GameFsmShared">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Id">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Local">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Server">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_PlayerType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_PlayerId">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Controller">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Difficulty">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_DeviceSyncIdxToState">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_DeviceSyncIdx">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Ended">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_HasEntered">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Transform">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Victories">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_PlayedGames">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Context.UserContext.m_ColorIdx">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Context.UserContext.ShortUserName(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxCharCount"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Context.UserContext.ContextManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.GameFsm">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.GameFsmShared">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.PlayerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Player">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Controller">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Difficulty">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.HasEntered">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.DeviceSyncIdxToState">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.DeviceSyncIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Victories">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.PlayedGames">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.ColorIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.ReturnColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Ready">
            <summary>
            This property must be managed from the ContextManager only
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Fake">
            <summary>
            This property must be managed from the ContextManager only
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.SendMessage(XKTools.Context.Message.MessageBase,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.ReceiveMessage(XKTools.Context.Message.MessageBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.ReadPendingAsyncMessages">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.OnPingUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.ClearFsm(XKTools.AdvancedFSM.FSM)">
            <summary>
            Default behaviour is to clear states and shutdown fsm.
            Maybe you intend to Unload your game?
            </summary>
            <param name="gameFsm"></param>
        </member>
        <member name="M:XKTools.Context.UserContext.ClearFsmInternal(XKTools.AdvancedFSM.FSM)">
            <summary>
            Default behaviour is to clear states and shutdown fsm.
            Maybe you intend to Unload your game?
            </summary>
            <param name="gameFsm"></param>
        </member>
        <member name="P:XKTools.Context.UserContext.IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Ended">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.IsLocalServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Context.UserContext.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.OnEnter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.OnLeave">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Context.UserContext.OnError(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XKTools.Context.UserContext.XKTools#Net#INetworkable#SetLocalServer(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="local"></param>
            <param name="server"></param>
        </member>
        <member name="M:XKTools.Context.UserContext.XKTools#Net#INetworkable#ReceiveData(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
            <remarks>A crash exists in this function, but we don't know where exactly, so we've been adding a few test and checkers</remarks>
        </member>
        <member name="T:XKTools.Controller">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Controller.Reaction">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:XKTools.Controller.m_Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Controller.m_PlayerId">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Controller.m_Events">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Controller.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Controller.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Controller.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Controller.TrigAction(System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="args"></param>
        </member>
        <member name="M:XKTools.Controller.OnEnable">
            <summary>
            Called when the controller turns to enabled state
            </summary>
        </member>
        <member name="M:XKTools.Controller.OnDisable">
            <summary>
            Called when the controller turns to disabled state
            </summary>
        </member>
        <member name="M:XKTools.Controller.RegisterListener(System.Object,XKTools.Controller.Reaction)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="reaction"></param>
        </member>
        <member name="M:XKTools.Controller.UnRegisterListener(System.Object,XKTools.Controller.Reaction)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="reaction"></param>
        </member>
        <member name="P:XKTools.Controller.PlayerId">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Controller.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.EPlayerType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.Human">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.LocalAI">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.NetworkableAI">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.Simulation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.Replay">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.Network">
            <summary>
            Intended for network passive controller waiting for datas sent from a Human (or anything else) on the other side
            <remarks>Data communication is on your entire charge</remarks>
            </summary>
        </member>
        <member name="F:XKTools.EPlayerType.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.EController">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EController.Keyboard">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EController.GamePad">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EController.ArcadeStick">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EController.TouchScreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EController.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.EDifficulty">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EDifficulty.Easy">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EDifficulty.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EDifficulty.Hard">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EDifficulty.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.EButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.Up">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.Down">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.B">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EButton.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.EAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.L_XAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.L_YAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.R_XAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.R_YAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.DPad_XAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.DPad_YAxis">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.LS">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.RS">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.B">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.LB">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.RB">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.TriggersL">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.TriggersR">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.Back">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EAxis.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ETouchStyle">
            <summary>
            Specifies the kind of touch we'll look for
            </summary>
        </member>
        <member name="F:XKTools.ETouchStyle.ContinuousGesture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ETouchStyle.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ControllerManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ControllerManager.c_MaxPlayerCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.RegisterController(XKTools.Controller,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <param name="initializeCtrl"></param>
        </member>
        <member name="M:XKTools.ControllerManager.UnRegisterController(XKTools.Controller)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:XKTools.ControllerManager.RegisterSaveFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.GetSaveKey(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.GetSaveAxis(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.GetControllerSaveKey(System.Int32)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.GetController(System.Int32)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.SetController(System.Int32,XKTools.EController)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
        </member>
        <member name="M:XKTools.ControllerManager.SaveInputs">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ControllerManager.GetAxisName(XKTools.EAxis,System.Int32)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="ctrlIdx"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.GetInputData(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.SetInputData(System.Int32,XKTools.EController,XKTools.EButton,System.Object)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <param name="data"></param>
        </member>
        <member name="M:XKTools.ControllerManager.GetInputAsKeyCode(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.GetInputAsAxis(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.GetInputAsGesture(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ControllerManager.SetInputAsKeyCode(System.Int32,XKTools.EController,XKTools.EButton,UnityEngine.KeyCode)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <param name="key"></param>
        </member>
        <member name="M:XKTools.ControllerManager.SetInputAsAxis(System.Int32,XKTools.EController,XKTools.EButton,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <param name="axisName"></param>
            <param name="axisSign"></param>
        </member>
        <member name="M:XKTools.ControllerManager.SetInputAsGesture(System.Int32,XKTools.EController,XKTools.EButton,XKTools.EContinuousGesture)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <param name="key"></param>
        </member>
        <member name="M:XKTools.ControllerManager.SetDefaultInputData(System.Int32,XKTools.EController,XKTools.EButton,System.Object)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <param name="key"></param>
        </member>
        <member name="M:XKTools.ControllerManager.GetDefaultInputData(System.Int32,XKTools.EController,XKTools.EButton)">
            <summary>
            
            </summary>
            <param name="playerId"></param>
            <param name="ctrl"></param>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.ControllerManager.Controllers">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.HumanController">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.HumanController.KeyEvent">
            <summary>
            
            </summary>
            <param name="pressed"></param>
            <param name="transit"></param>
        </member>
        <member name="F:XKTools.HumanController.EAxisData.Name">
            <summary>
            Preconcatenated Axis_SubAxis_CtrlIdx
            </summary>
        </member>
        <member name="F:XKTools.HumanController.EAxisData.Threshold">
            <summary>
            Consider sign and threshold
            </summary>
        </member>
        <member name="F:XKTools.HumanController.EAxisData.LastAxis">
            <summary>
            Helps for transitions
            </summary>
        </member>
        <member name="F:XKTools.HumanController.m_ControllerManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.HumanController.m_Controller">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.HumanController.#ctor">
            <summary>
            Default touch style is ContinuousGesture
            </summary>
        </member>
        <member name="M:XKTools.HumanController.#ctor(XKTools.ETouchStyle)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:XKTools.HumanController.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.HumanController.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.HumanController.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.HumanController.RegisterInputs">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.HumanController.SetTouchStyle(XKTools.ETouchStyle)">
            <summary>
            This functions configures the touch style of the controller
            </summary>
            <param name="touchStyle"></param>
        </member>
        <member name="P:XKTools.HumanController.Ctrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.HumanController.TouchStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.HumanController.ContinuousGesture">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.HumanController.OnKey(System.Object,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Action"></param>
            <param name="pressed"></param>
            <param name="transit"></param>
        </member>
        <member name="M:XKTools.HumanController.OnTouch(System.Object)">
            <summary>
            
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:XKTools.HumanController.OnAxis(System.Object,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="pressed"></param>
            <param name="transit"></param>
        </member>
        <member name="M:XKTools.HumanController.RegisterKey(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="key"></param>
        </member>
        <member name="M:XKTools.HumanController.UnRegisterKey(System.Object)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XKTools.HumanController.RegisterAxis(System.Object,System.Collections.ArrayList,System.Single)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="axisData"></param>
            <param name="threshold"></param>
        </member>
        <member name="M:XKTools.HumanController.UnRegisterAxis(System.Object)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XKTools.HumanController.CheckCustomKey(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Data.BatchingList">
            <summary>
            A list that has 2 internal buffers: one for ints and the other for floats.
            The first one only stores int whereas the second one can store floats, 2D vectors or 3D vectors.
            </summary>
        </member>
        <member name="M:XKTools.Data.BatchingList.Add(System.Object)">
            <summary>
            Add the given object to the corresponding buffer
            </summary>
            <param name="obj">The object to add to the list</param>
            <returns>If not null, the argument could not be added (wrong type). In this case, the returned value is the argument</returns>
        </member>
        <member name="P:XKTools.Data.BatchingList.IntBuffer">
            <summary>
            Int buffer as an int[]
            </summary>
        </member>
        <member name="P:XKTools.Data.BatchingList.FloatBuffer">
            <summary>
            Float buffer as a float[]
            </summary>
        </member>
        <member name="M:XKTools.Data.BatchingList.Clear">
            <summary>
            Clear all buffers
            </summary>
        </member>
        <member name="M:XKTools.Data.BatchingList.SetIntBuffer(System.Int32[])">
            <summary>
            Clean int buffer and fill it with the given values
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:XKTools.Data.BatchingList.SetFloatBuffer(System.Single[])">
            <summary>
            Clean float buffer and fill it with the given values
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:XKTools.Data.BatchingList.GetInteger(System.Boolean@)">
            <summary>
            Get the next int that has not been read yet.
            </summary>
            <param name="error">Will be set to true if an error occurs</param>
            <returns>The next int value or 0 in case of error</returns>
        </member>
        <member name="M:XKTools.Data.BatchingList.GetFloat(System.Boolean@)">
            <summary>
            Get the float int that has not been read yet.
            </summary>
            <param name="error">Will be set to true if an error occurs</param>
            <returns>The next float value or float.NaN in case of error</returns>
        </member>
        <member name="M:XKTools.Data.BatchingList.GetVector2(System.Boolean@)">
            <summary>
            Read a Vector2 from the float buffer
            </summary>
            <param name="error">Will be set to true if an error occurs</param>
            <returns>The next float value or Vector2.zero in case of error</returns>
        </member>
        <member name="M:XKTools.Data.BatchingList.GetVector3(System.Boolean@)">
            <summary>
            Read a Vector3 from the float buffer
            </summary>
            <param name="error">Will be set to true if an error occurs</param>
            <returns>The next float value or Vector3.zero in case of error</returns>
        </member>
        <member name="T:XKTools.Data.IBinarySerializer">
            <summary>
            The interface to implement to be serializable by the BinarySerializer class
            </summary>
        </member>
        <member name="M:XKTools.Data.IBinarySerializer.SerializeB">
            <summary>
            Return the class serialized in bytes
            </summary>
            <returns>the list of bytes</returns>
        </member>
        <member name="M:XKTools.Data.IBinarySerializer.UnSerializeB(System.Byte[],System.Int32@)">
            <summary>
            Unserialize the class from byte array
            </summary>
            <param name="buffer">the input buffer</param>
            <param name="idx">the current reading index on byte array</param>
        </member>
        <member name="T:XKTools.Data.BinarySerializer">
            <summary>
            Serialize / Unserialize some objects in binary format
            </summary>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Object)">
            <summary>
            Serialize an object
            </summary>
            <param name="value">The object you want to serialize</param>
            <returns>An array of byte</returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(UnityEngine.Vector4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.SerializeB(UnityEngine.Quaternion)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Object@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <param name="buffer">The list of byte  is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object</param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Object@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <param name="buffer">The array of byte  is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object</param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB``1(System.Collections.Generic.List{System.Byte},System.Int32@,``0@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <typeparam name="T">The wanted type of result (must be a value-type)</typeparam>
            <param name="buffer">The list of byte that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object</param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB``1(System.Byte[],System.Int32@,``0@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <typeparam name="T">The wanted type of result (must be a value-type)</typeparam>
            <param name="buffer">The array of byte that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object</param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Int16@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Int16@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.UInt16@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.UInt16@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.UInt32@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.UInt32@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Single@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Single@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.Double@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.Double@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,System.String@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <param name="buffer">The list of byte that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized string</param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,System.String@)">
            <summary>
            Unserialize the given buffer to a string
            </summary>
            <param name="buffer">The array of byte that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized string</param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,UnityEngine.Vector2@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,UnityEngine.Vector2@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,UnityEngine.Vector3@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,UnityEngine.Vector3@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,UnityEngine.Vector4@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,UnityEngine.Vector4@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,UnityEngine.Color@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,UnityEngine.Color@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Collections.Generic.List{System.Byte},System.Int32@,UnityEngine.Quaternion@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Data.BinarySerializer.UnSerializeB(System.Byte[],System.Int32@,UnityEngine.Quaternion@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="idx"></param>
            <param name="res"></param>
        </member>
        <member name="T:XKTools.Data.CollectionSerializer">
            <summary>
            extension class for serialization of ICollection and IDictionary
            </summary>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ToXML(System.Collections.Hashtable,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            save the hashtable in a XML children, in a node called "Hashtable"
            </summary>
            <param name="obj">this Hashtable</param>
            <param name="xmlDoc">the XmlDocument that contains the node</param>
            <param name="node">the parent node</param>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ToXML``1(System.Collections.Generic.ICollection{``0},System.Xml.XmlDocument,System.Xml.XmlNode,System.Boolean)">
            <summary>
            save the ICollection in a XML children, in a node called like obj.GetType().ToString()
            </summary>
            <typeparam name="T">the type of stored element</typeparam>
            <param name="obj">this ICollection</param>
            <param name="xmlDoc">the XmlDocument that contains the node</param>
            <param name="node">the parent node</param>
            <param name="inheritableStoredType">the type T is inheritabble Type</param>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ToXML``2(System.Collections.Generic.IDictionary{``0,``1},System.Xml.XmlDocument,System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            save the TValue in a XML children, in a node called like obj.GetType().ToString()
            </summary>
            <typeparam name="TKey">the type of stored key</typeparam>
            <typeparam name="TValue">the type of stored value</typeparam>
            <param name="obj">this TValue</param>
            <param name="xmlDoc">the XmlDocument that contains the node</param>
            <param name="node">the parent node</param>
            <param name="inheritableKeyType">the type TKey is inheritabble Type</param>
            <param name="inheritableValueType">the type TValue is inheritabble Type</param>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ToJson(System.Object,System.Boolean)">
            <summary>
            Save the hastable in a JSON string
            </summary>
            <param name="obj">this ArrayList</param>
            <param name="indent">Indentation</param>
            <returns>the JSON string</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ToJson(System.Object,System.Boolean,System.Int32)">
            <summary>
            Save the hastable in a JSON string
            </summary>
            <param name="obj">this ArrayList</param>
            <param name="indent">Indentation</param>
            <param name="decimalPrecision">Number of digits after the decimal point, -1 means no truncation</param>
            <returns>the JSON string</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.HashtableFromXML(System.Xml.XmlNode)">
            <summary>
            load a Hashtable from XML
            </summary>
            <param name="HashTableNode">the Hashtable Node, that has to be named "Hashtable"</param>
            <returns>the loaded Hashtable</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.FillICollectionFromXML``1(System.Xml.XmlNode,System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>
            Fill an ICollection from XML
            </summary>
            <typeparam name="T">the stored type</typeparam>
            <param name="listNode">the ICollection node </param>
            <param name="obj">the ICollection to Fill</param>
            <param name="inheritableStoredType">the type T is inheritabble Type</param>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.FillIDictionaryFromXML``2(System.Xml.XmlNode,System.Collections.Generic.IDictionary{``0,``1},System.Boolean,System.Boolean)">
            <summary>
            Fill an IDictionary from XML
            </summary>
            <typeparam name="TKey">the stored key type</typeparam>
            <typeparam name="TValue">the stored value type</typeparam>
            <param name="dictionnaryNode">the IDictionary node</param>
            <param name="obj">the IDictionary to Fill</param>
            <param name="inheritableKeyType">the type TKey is inheritabble Type</param>
            <param name="inheritableValueType">the type TValue is inheritabble Type</param>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.GetIDictionaryFromXML(System.Xml.XmlNode)">
            <summary>
            Get an IDictionary From XML
            </summary>
            <param name="dictionnaryNode">the IDictionary Node, which has to be named [Original_IDictionary].GetType().ToString()</param>
            <returns>the IDictionary</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.GetIDictionaryFromXML(System.Xml.XmlNode,System.Type@,System.Type@)">
            <summary>
            Get an IDictionary From XML
            </summary>
            <param name="dictionnaryNode">the IDictionary Node, which has to be named [Original_IDictionary].GetType().ToString()</param>
            <param name="keyType">the stored key type</param>
            <param name="valueType">the stored value type</param>
            <returns>the IDictionary</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.GetIDictionaryFromXML(System.Xml.XmlNode,System.Type@,System.Type@,System.Type@)">
            <summary>
            Get an IDictionary From XML
            </summary>
            <param name="dictionnaryNode">the IDictionary Node, which has to be named [Original_IDictionary].GetType().ToString()</param>
            <param name="keyType">the stored key type</param>
            <param name="valueType">the stored value type</param>
            <param name="dictionnaryType">the dictionnary type</param>
            <returns>the IDictionary</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.HashtableFromJson(System.String)">
            <summary>
            Get an Hashtable From Json
            </summary>
            <param name="json">the JSON string</param>
            <returns>the Hashtable</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.HashtableFromJson(System.String,System.Boolean)">
            <summary>
            Get an Hashtable From Json
            </summary>
            <param name="json">the JSON string</param>
            <param name="highPrecisionNumber">if true, numbers are parsed as double else as float. default is false</param>
            <returns>the Hashtable</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ArrayListFromJson(System.String)">
            <summary>
            Get an ArrayList From Json
            </summary>
            <param name="json">the JSON string</param>
            <returns>the ArrayList</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.ArrayListFromJson(System.String,System.Boolean)">
            <summary>
            Get an ArrayList From Json
            </summary>
            <param name="json">the JSON string</param>
            <param name="highPrecisionNumber">if true, numbers are parsed as double else as float. default is false</param>
            <returns>the ArrayList</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.HashtableFromBinary(System.Byte[],System.Int32@)">
            <summary>
            Get an Hashtable From Binary (Hashtable.ToBinary)
            </summary>
            <param name="bin">the binary buffer</param>
            <param name="idx">the index to start to unserialize the hashtable</param>
            <returns>the Hashtable</returns>
        </member>
        <member name="M:XKTools.Data.CollectionSerializer.HashtableFromBinary(System.Byte[],System.Boolean,System.Int32@)">
            <summary>
            Get an Hashtable From Binary (Hashtable.ToBinary)
            </summary>
            <param name="bin">the binary buffer</param>
            <param name="idx">the index to start to unserialize the hashtable</param>
            <param name="typed"> </param>
            <returns>the Hashtable</returns>
        </member>
        <member name="T:XKTools.Data.Crypto">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.Crypto.GetMd5(System.String)">
            <summary>
            Hash the given string as a 32 character hexadecimal string
            </summary>
            <param name="input">The string to hash</param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:XKTools.Data.Crypto.VerifyMd5(System.String,System.String)">
            <summary>
            Checks if the given string matches with the given md5
            </summary>
            <param name="input">The string to test</param>
            <param name="md5">The md5 to compare to the string</param>
            <returns>Returns true if the input matches with the md5</returns>
        </member>
        <member name="M:XKTools.Data.Crypto.EncodeVigenere(System.String,System.String)">
            <summary>
            Encode the given text using the key with Vigenere encryption
            </summary>
            <param name="text">The text to encode</param>
            <param name="key">The key</param>
            <returns>The encoded text</returns>
        </member>
        <member name="M:XKTools.Data.Crypto.EncodeVigenere(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Encode the given text using the key with Vigenere encryption
            </summary>
            <param name="text">The text to encode</param>
            <param name="key">The key</param>
            <param name="lastCharBitLength">The last char length in bit</param>
            <param name="charBitLength">Char length in bit</param>
            <returns>The encoded text</returns>
        </member>
        <member name="M:XKTools.Data.Crypto.DecodeVigenere(System.String,System.String)">
            <summary>
            Decode the given text using the key and the Vigenere encryption
            </summary>
            <param name="text">The text to decode</param>
            <param name="key">The key</param>
            <returns>The decoded text</returns>
        </member>
        <member name="M:XKTools.Data.Crypto.DecodeVigenere(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Decode the given text using the key and the Vigenere encryption
            </summary>
            <param name="text">The text to decode</param>
            <param name="key">The key</param>
            <param name="lastCharBitLength">The last char length in bit</param>
            <param name="charBitLength">Char length in bit</param>
            <returns>The decoded text</returns>
        </member>
        <member name="T:XKTools.Data.IO">
            <summary>
            Deals with Input and Ouput (files, folders)
            </summary>
        </member>
        <member name="M:XKTools.Data.IO.FileExists(System.String)">
            <summary>
            Checks whether a file exists or not
            </summary>
            <param name="path">the file you want to test</param>
            <returns>Returns true if the file exists</returns>
        </member>
        <member name="M:XKTools.Data.IO.CreateDirectory(System.String)">
            <summary>
            Create a new folder at the given path
            This will take as input a Directory path (ending with / or \) and create this directory or a file path (not ending with / or \) and create the directory containing the file.
            <example>
            path = ".../Assets/Graphics/Textures/Atlas/Game/" => Creates the directory Game/ at .../Assets/Graphics/Textures/Atlas
            path = ".../Assets/Graphics/Textures/Atlas/Game/Game.png" => Creates the directory Game/ at .../Assets/Graphics/Textures/Atlas
            </example>
            </summary>
            <param name="path">Where you want to create your directory</param>
        </member>
        <member name="M:XKTools.Data.IO.LoadAllFiles(System.String,System.String,System.String[]@)">
            <summary>
            Try to load all the files of a given folder
            </summary>
            <param name="path">Where to look for the files</param>
            <param name="searchPattern">The search pattern that will be used</param>
            <param name="content">The content that will be getted</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.LoadAllFiles(System.String,System.String,System.String[]@,System.String[]@)">
            <summary>
            Try to load all the files of a given folder
            </summary>
            <param name="path">Where to look for the files</param>
            <param name="searchPattern">The search pattern that will be used</param>
            <param name="content">The content that will be getted</param>
            <param name="filespaths">The files paths that will be getted</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.GetFilePathes(System.String,System.String,System.String[]@)">
            <summary>
            Try to load all the files of a given folder
            </summary>
            <param name="path">Where to look for the files</param>
            <param name="searchPattern">The search pattern that will be used</param>
            <param name="filespaths">The files paths that will be getted</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.LoadAllFiles(System.String,System.String,System.Collections.Generic.List{System.Byte[]}@)">
            <summary>
            Try to load all the files of a given folder
            </summary>
            <param name="path">Where to look for the files</param>
            <param name="searchPattern">The search pattern that will be used</param>
            <param name="contents">The content that will be getted</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.LoadFile(System.String,UnityEngine.Texture2D@)">
            <summary>
            try to load a file at the given path
            </summary>
            <param name="path">Where to look for the file</param>
            <param name="content">The texture you're trying to load</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.LoadFile(System.String,System.String@)">
            <summary>
            try to load a file at the given path
            </summary>
            <param name="path">Where to look for the file</param>
            <param name="content">The string in which you'll find the content of the file</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.LoadFile(System.String,System.Byte[]@)">
            <summary>
            try to load a file at the given path
            </summary>
            <param name="path">Where to look for the file</param>
            <param name="content">The array of bytes in which you'll find the content of the file</param>
            <returns>Returns true if the operation succeeds</returns>
        </member>
        <member name="M:XKTools.Data.IO.SaveFile(System.String,System.String,UnityEngine.Texture2D)">
            <summary>
            Save a file at the given path, with the given filename
            </summary>
            <param name="path">Where to save the file</param>
            <param name="fileName">The name of the file</param>
            <param name="texture">The texture you want to save</param>
        </member>
        <member name="M:XKTools.Data.IO.SaveFile(System.String,System.String,System.Byte[])">
            <summary>
            Save a file at the given path, with the given filename
            </summary>
            <param name="path">Where to save the file</param>
            <param name="fileName">The name of the file</param>
            <param name="content">The content of the file you want to save</param>
        </member>
        <member name="M:XKTools.Data.IO.SaveFile(System.String,System.String,System.String)">
            <summary>
            Save a file at the given path, with the given filename
            </summary>
            <param name="path">Where to save the file</param>
            <param name="fileName">The name of the file</param>
            <param name="content">The content of the file you want to save</param>
        </member>
        <member name="M:XKTools.Data.IO.SaveFile(System.String,System.String,System.String,System.IO.SeekOrigin)">
            <summary>
            Write into (and if needed create) a file at the given position some content
            </summary>
            <param name="path">Where to find or create the file</param>
            <param name="fileName">The name of the file</param>
            <param name="content">the content you want to write</param>
            <param name="seek">The position where you want to write in the file</param>
        </member>
        <member name="M:XKTools.Data.IO.SaveFile(System.String,System.String,System.Byte[],System.IO.SeekOrigin)">
            <summary>
            Write into (and if needed create) a file at the given position some content
            </summary>
            <param name="path">Where to find or create the file</param>
            <param name="fileName">The name of the file</param>
            <param name="content">the content you want to write</param>
            <param name="seek">The position where you want to write in the file</param>
        </member>
        <member name="M:XKTools.Data.IO.DeleteFile(System.String)">
            <summary>
            Delete a file at the given path
            </summary>
            <param name="path">The file you want to delete</param>
        </member>
        <member name="M:XKTools.Data.IO.RenameFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.IO.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceDirName"></param>
            <param name="destDirName"></param>
            <param name="copySubDirs"></param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:XKTools.Data.IO.CopyFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceFileName"></param>
            <param name="destDirName"></param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="P:XKTools.Data.IO.DataPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Data.MiniJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="F:XKTools.Data.MiniJson.s_LastErrorIndex">
            <summary>
            On decoding, this value holds the position at which the parse failed (-1 = no error).
            </summary>
        </member>
        <member name="M:XKTools.Data.MiniJson.JsonDecode(System.String,System.Boolean)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <param name="highPrecisionNumber">if true, numbers are parsed as double else as float. default is false</param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:XKTools.Data.MiniJson.JsonEncode(System.Object,System.Int32,System.Int32)">
            <summary>
            Converts a Hashtable / ArrayList / Dictionary(string,string) object into a JSON string
            </summary>
            <param name="json">A Hashtable / ArrayList</param>
            <param name="indentLevel">Indentation</param>
            <param name="decimalPrecision">number of authorized numbers after the decimal point, -1 means no limitation</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:XKTools.Data.MiniJson.LastDecodeSuccessful">
            <summary>
            On decoding, this function returns the position at which the parse failed (-1 = no error).
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.MiniJson.GetLastErrorIndex">
            <summary>
            On decoding, this function returns the position at which the parse failed (-1 = no error).
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.MiniJson.GetLastErrorSnippet">
            <summary>
            If a decoding error occurred, this function returns a piece of the JSON string 
            at which the error took place. To ease debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.MiniJson.SerializeValue(System.Object,System.Text.StringBuilder,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="builder"></param>
            <param name="indentLevel">Indentation</param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Data.Reader">
            <summary>
            Help to read a string
            </summary>
        </member>
        <member name="M:XKTools.Data.Reader.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:XKTools.Data.Reader.Seek(System.Int32)">
            <summary>
            Place a virtual cursor to the given position in the string
            </summary>
            <param name="idx">The wanted position in the string</param>
        </member>
        <member name="M:XKTools.Data.Reader.GetSeek">
            <summary>
            Get the current position of the virtual cursor
            </summary>
            <returns>The position of the virtual cursor</returns>
        </member>
        <member name="M:XKTools.Data.Reader.Peek">
            <summary>
            Look at the next char (relative to the current position of the virtual cursor)
            </summary>
            <returns>The next char represented by an integer</returns>
        </member>
        <member name="M:XKTools.Data.Reader.Read">
            <summary>
            Look at the next char and increment the virtual cursos's position
            </summary>
            <returns>The next char represented by an integer</returns>
        </member>
        <member name="M:XKTools.Data.Reader.ReadLine">
            <summary>
            Reads and returns the line from the virtual cursor and let the cursor at the end of this line
            </summary>
            <returns>The line from the virtual cursor to the end of the line</returns>
        </member>
        <member name="M:XKTools.Data.Reader.ReadSucceed">
            <summary>
            Returns the part of the string that has been read (that is before the virtual cursor)
            </summary>
            <returns>The string that has already been read</returns>
        </member>
        <member name="M:XKTools.Data.Reader.NotRead">
            <summary>
            Returns the part of the string that has not been read (that is after the virtual cursor)
            </summary>
            <returns>The string that has not been read yet</returns>
        </member>
        <member name="T:XKTools.Data.ResourcesCopier">
            <summary>
            Copy some data from Resources to PersistantDataPath
            ResourcesBaseDirectory must be filled with base directory in resources (common to dscriptor and files)
            SaveBaseDirectory must be filled with base directory in save
            </summary>
            <remarks>Files extensions are managed (they may not be the same in resources and save directory), also binary files must be renamed as ".bytes" in the resources directory(ies), they will then be renamed at save time according to the descriptoir</remarks>
        </member>
        <member name="M:XKTools.Data.ResourcesCopier.CopyFiles(System.String,System.Boolean)">
            <summary>
            Loads a bunch files from a descriptor located in the resources and copies the files paths provided in descriptor to the output save directory
            </summary>
            <param name="descPath">The file that constains the files to copy</param>
            <param name="overwrite">Overwrite the files that already exist</param>
        </member>
        <member name="M:XKTools.Data.ResourcesCopier.CopyFiles(System.String[],System.Boolean)">
            <summary>
            Loads files from resources and copies them to the output save directory
            </summary>
            <param name="sourceFiles">The files list to copy</param>
            <param name="overwrite">Overwrite the files that already exist</param>
        </member>
        <member name="M:XKTools.Data.ResourcesCopier.CopyFile(System.String,System.Boolean)">
            <summary>
            Loads a file from resources and copies it to the output save directory
            </summary>
            <param name="sourceFile">The file list to copy</param>
            <param name="overwrite">Overwrite the files that already exist</param>
        </member>
        <member name="P:XKTools.Data.ResourcesCopier.ResourcesBaseDirectory">
            <summary>
            The base directory for file research (will not be considered at save time)
            </summary>
        </member>
        <member name="P:XKTools.Data.ResourcesCopier.OutputBaseDirectory">
            <summary>
            The base directory for output saving (will not be considered at load time)
            </summary>
        </member>
        <member name="T:XKTools.Data.SmallXmlParser">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Data.SmallXmlParser.IContentHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnStartParsing(XKTools.Data.SmallXmlParser)">
            <summary>
            
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnEndParsing(XKTools.Data.SmallXmlParser)">
            <summary>
            
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnStartElement(System.String,XKTools.Data.SmallXmlParser.IAttrList)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="attrs"></param>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnEndElement(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnProcessingInstruction(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnChars(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IContentHandler.OnIgnorableWhitespace(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:XKTools.Data.SmallXmlParser.IAttrList">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Data.SmallXmlParser.IAttrList.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Data.SmallXmlParser.IAttrList.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IAttrList.GetName(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IAttrList.GetValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.IAttrList.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Data.SmallXmlParser.IAttrList.Names">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Data.SmallXmlParser.IAttrList.Values">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.SkipWhitespaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.SkipWhitespaces(System.Boolean)">
            <summary>
            
            </summary>
            <param name="expected"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.Expect(System.Int32)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.ReadName">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.Parse(XKTools.Data.Reader,XKTools.Data.SmallXmlParser.IContentHandler)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="handler"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:XKTools.Data.SmallXmlParser.ReadContent">
            <summary>
            
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:XKTools.Data.Str">
            <summary>
            Operations on strings
            </summary>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,UnityEngine.Vector2)">
            <summary>
            Convert a string to a Vector2
            </summary>
            <param name="str">The string you want to convert to a vector</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted Vector2</returns>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,UnityEngine.Vector3)">
            <summary>
            Convert a string to a Vector3
            </summary>
            <param name="str">The string you want to convert to a vector</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted Vector3</returns>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,UnityEngine.Quaternion)">
            <summary>
            Convert a string to a Quaternion
            </summary>
            <param name="str">The string you want to convert to a quaternion</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted Quaternion</returns>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,System.Int32)">
            <summary>
            Convert a string to an int
            </summary>
            <param name="str">The string you want to convert to an integer</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted int</returns>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,System.Int64)">
            <summary>
            Convert a string to a long
            </summary>
            <param name="str">The string you want to convert to a long</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted long</returns>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,System.Single)">
            <summary>
            Convert a string to a float
            </summary>
            <param name="str">The string you want to convert to a float</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted float</returns>
        </member>
        <member name="M:XKTools.Data.Str.FromString(System.String,System.Nullable{System.DateTime})">
            <summary>
            Convert a string to a nullable DateTime
            </summary>
            <param name="str">The string you want to convert to a date</param>
            <param name="defaultValue">The default value that will be returned if the string cannot be converted</param>
            <returns>The resulted DateTime</returns>
        </member>
        <member name="M:XKTools.Data.Str.ToString(System.Nullable{System.DateTime})">
            <summary>
            Convert a nullable DateTime to a string
            </summary>
            <param name="dateTime">The date you want to convert</param>
            <returns>The resulted string</returns>
        </member>
        <member name="M:XKTools.Data.Str.ToString(UnityEngine.Vector2)">
            <summary>
            Convert a Vector2 to a string
            </summary>
            <param name="v">The vector you want to convert</param>
            <returns>The resulted string</returns>
        </member>
        <member name="M:XKTools.Data.Str.ToString(UnityEngine.Vector3)">
            <summary>
            Convert a Vector3 to a string
            </summary>
            <param name="v">The vector you want to convert</param>
            <returns>The resulted string</returns>
        </member>
        <member name="M:XKTools.Data.Str.ToString(UnityEngine.Quaternion)">
            <summary>
            Convert a Quaternion to a string
            </summary>
            <param name="q">The quaternion you want to convert</param>
            <returns>The resulted string</returns>
        </member>
        <member name="M:XKTools.Data.Str.ToStringTimer(System.Int32)">
            <summary>
            Convert a number of seconds to a timer of type string with the format mm:ss
            </summary>
            <param name="seconds">The number of seconds</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:XKTools.Data.Str.ToStringTimer(System.Int32,System.String)">
            <summary>
            Convert a number of seconds to a timer of type string in the given format
            </summary>
            <param name="seconds">The number of seconds</param>
            <param name="format">The wanted format</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:XKTools.Data.Str.FormatXmlParameter``1(System.String,``0)">
            <summary>
            Create a XML parameter with the given name and the given value
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="name">The wanted name of the parameter</param>
            <param name="value">The value of the field</param>
            <returns>The complete XML parameter</returns>
        </member>
        <member name="M:XKTools.Data.Str.RetrieveFlags(System.String)">
            <summary>
            Retrieve the flags in a XML string
            </summary>
            <param name="str">The string you want to analyze</param>
            <returns>A list of the found flags</returns>
        </member>
        <member name="M:XKTools.Data.Str.FormatCharToNumeric(System.String)">
            <summary>
            Change each character of the given text to the ASCII three-numbers code
            </summary>
            <param name="text">The text to transform</param>
            <returns>The crypted text</returns>
        </member>
        <member name="M:XKTools.Data.Str.FormatNumericToChar(System.String)">
            <summary>
            Decrypt the given text - must be a serie of 3 numeric characters
            </summary>
            <param name="text">The text to transform</param>
            <returns>The decrypted text</returns>
        </member>
        <member name="M:XKTools.Data.Str.CheckEmailValidity(System.String)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.Str.DecodeUnicode(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.Str.AlphabeticalSort(System.String)">
            <summary>
            Create a new string sorted in alphabetical order from the given string
            </summary>
            <param name="str">The string to sort</param>
            <returns>A new string that is alphabetically sorted</returns>
        </member>
        <member name="T:XKTools.Data.StringUtf16">
            <summary>
            Class to handle string UTF16 encoded
            </summary>
        </member>
        <member name="F:XKTools.Data.StringUtf16.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.StringUtf16.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.StringUtf16.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:XKTools.Data.StringUtf16.op_Implicit(System.String)~XKTools.Data.StringUtf16">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.StringUtf16.op_Implicit(XKTools.Data.StringUtf16)~System.String">
            <summary>
            
            </summary>
            <param name="strUtf16"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.StringUtf16.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.StringUtf16.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.StringUtf16.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Data.StringUtf16.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Data.StringUtf16.Length">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Data.IStringSerializer">
            <summary>
            The interface to implement to be serializable by the StringSerializer class
            </summary>
        </member>
        <member name="M:XKTools.Data.IStringSerializer.SerializeS">
            <summary>
            Return the class serialized in string
            </summary>
            <returns>the output string</returns>
        </member>
        <member name="M:XKTools.Data.IStringSerializer.UnSerializeS(System.String,System.Int32@)">
            <summary>
            Unserialize the class from string
            </summary>
            <param name="buffer">the input buffer</param>
            <param name="idx">the current reading index on string</param>
        </member>
        <member name="T:XKTools.Data.StringSerializer">
            <summary>
            Serialize / Unserialize some objects in binary format
            </summary>
        </member>
        <member name="M:XKTools.Data.StringSerializer.SerializeS(System.Object)">
            <summary>
            Serialize an object
            </summary>
            <param name="value">The object you want to serialize</param>
            <returns>the serialized string</returns>
        </member>
        <member name="M:XKTools.Data.StringSerializer.SerializeS(System.Object,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Serialize an object
            </summary>
            <param name="value">The object you want to serialize</param>
            <param name="xmlDoc"></param>
            <param name="tableNode"></param>
            <returns>the serialized string</returns>
        </member>
        <member name="M:XKTools.Data.StringSerializer.UnSerializeS(System.String,System.Int32@,System.Object@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <param name="buffer">The string that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object</param>
        </member>
        <member name="M:XKTools.Data.StringSerializer.UnSerializeS``1(System.String,System.Int32@,``0@)">
            <summary>
            Unserialize the given buffer to the type T
            </summary>
            <typeparam name="T">The wanted type of result (must be a value-type)</typeparam>
            <param name="buffer">The string that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object</param>
        </member>
        <member name="M:XKTools.Data.StringSerializer.UnSerializeS(System.String,System.Int32@,System.String@)">
            <summary>
            Unserialize the given buffer to a string
            </summary>
            <param name="buffer">The string that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized string</param>
        </member>
        <member name="M:XKTools.Data.StringSerializer.UnSerialize(System.String,System.Int32@,XKTools.Data.IStringSerializer)">
            <summary>
            Unserialize the given buffer to an object that implements ISerializer
            </summary>
            <param name="buffer">The string that is the buffer</param>
            <param name="idx">The current index of the buffer</param>
            <param name="res">The unserialized object (must implement ISerializer)</param>
        </member>
        <member name="T:XKTools.Data.TypedBinarySerializer">
            <summary>
            Serialize / Unserialize some objects in binary format.
            For each ToBinary() extension and ParseBinaryX() method, you can add a boolean argument 'typed' (true by default).
            If true, then a byte the the type is added/parsed for each value taht is not in a container.
            Else, this byte will be skipped.
            
            For byte, float and int arrays, the type is only added once (not for every object instance).
            For int values, if 'typed' is false, then the method called are SerializeB/UnSerializeB() (BinarySerializer).
            Strings are encoded in/decoded from ASCII.
            </summary>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Object)">
            <summary>
            Fallback for unsupported types
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Object,System.Boolean)">
            <summary>
            Fallback for unsupported types
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Byte)">
            <summary>
            Stores a byte in a byte list composed of:
            - 1 byte for type
            - 1 byte for value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Byte,System.Boolean)">
            <summary>
            Stores a byte in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 1 byte for value
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Int16)">
            <summary>
            Stores a short in a byte list composed of:
            - 1 byte for type
            - 2 bytes for value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Int16,System.Boolean)">
            <summary>
            Stores a short in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 2 bytes for value
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Int32)">
            <summary>
            Stores an int in a byte list composed of:
            - 1 byte for type
            - 4 bytes for value (big-endian)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Int32,System.Boolean)">
            <summary>
            Stores an int in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for value (big-endian)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.UInt32)">
            <summary>
            Stores an uint in a byte list composed of:
            - 1 byte for type
            - 4 bytes for value (big-endian)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.UInt32,System.Boolean)">
            <summary>
            Stores an uint in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for value (big-endian)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Single)">
            <summary>
            Stores a float in a byte list composed of:
            - 1 byte for type
            - 4 bytes for value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Single,System.Boolean)">
            <summary>
            Stores a float in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for value
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Double)">
            <summary>
            Stores a double in a byte list composed of:
            - 1 byte for type
            - 8 bytes for value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Double,System.Boolean)">
            <summary>
            Stores a double in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 8 bytes for value
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.String)">
            <summary>
            Stores a string in a byte list composed of:
            - 1 byte for type
            - 5 bytes for length (see int.ToBinary())
            - n bytes for value (where n is the length of the string)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.String,System.Boolean)">
            <summary>
            Stores a string in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 or 5 bytes for length (see int.ToBinary())
            - n bytes for value (where n is the length of the string)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(XKTools.Data.StringUtf16)">
            <summary>
            Stores a string utf16 in a byte list composed of:
            - 1 byte for type
            - 5 bytes for length (see int.ToBinary())
            - n bytes for value (where n is the length of the string)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(XKTools.Data.StringUtf16,System.Boolean)">
            <summary>
            Stores a string utf16 in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 or 5 bytes for length (see int.ToBinary())
            - n bytes for value (where n is the length of the string)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(UnityEngine.Vector2)">
            <summary>
            Stores a Vector2 in a byte list composed of:
            - 1 byte for type
            - 4 bytes for the X and Y components
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Stores a Vector2 in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for the X and Y components
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(UnityEngine.Vector3)">
            <summary>
            Stores a Vector3 in a byte list composed of:
            - 1 byte for type
            - 4 bytes for each one of the X, Y and Z components
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Stores a Vector3 in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for each one of the X, Y and Z components
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Byte[])">
            <summary>
            Stores a byte[] in a byte list composed of:
            - 1 byte for type
            - 4 bytes for length (see int.ToBinary())
            - n bytes for value (where n is the length of the array)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Byte[],System.Boolean)">
            <summary>
            Stores a byte[] in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for length (see int.ToBinary())
            - n bytes for value (where n is the length of the array)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Int32[])">
            <summary>
            Stores an int[] in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for length (see int.ToBinary())
            - n * [1-5] bytes for value, where n is the length of the array (see int.SerializeB())
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Int32[],System.Boolean)">
            <summary>
            Stores an int[] in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for length (see int.ToBinary())
            - n * [1-5] bytes for value, where n is the length of the array (see int.SerializeB())
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Single[])">
            <summary>
            Stores a float[] in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for length (see int.ToBinary())
            - 4*n bytes for value, where n is the length of the array (see float.toBinary())
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Single[],System.Boolean)">
            <summary>
            Stores a float[] in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 bytes for length (see int.ToBinary())
            - 4*n bytes for value, where n is the length of the array (see float.toBinary())
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Collections.Hashtable)">
            <summary>
            Stores an Hashtable in a byte list composed of:
            - 1 byte for type
            - 5 bytes for size (see int.ToBinary())
            - for each key-value pair:
                - 1 byte for Key type
                - n bytes for key value (according to its type)
                - 1 byte for Value type
                - n bytes for value (according to its type)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Stores an Hashtable in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 or 5 bytes for size (see int.ToBinary())
            - for each key-value pair:
                - 1 byte for Key type
                - n bytes for key value (according to its type)
                - 1 byte for Value type
                - n bytes for value (according to its type)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Collections.ArrayList)">
            <summary>
            Stores an ArrayList in a byte list composed of:
            - 1 byte for type
            - 5 bytes for size (see int.ToBinary())
            - foreach element:
                 - n bytes (according to its type)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Stores an ArrayList in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 5 bytes for size (see int.ToBinary())
            - foreach element:
                 - n bytes (according to its type)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Collections.ICollection)">
            <summary>
            Stores an ICollection in a byte list composed of:
            - 1 byte for type
            - 5 bytes for size (see int.ToBinary())
            - foreach element:
                 - n bytes (according to its type)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinary(System.Collections.ICollection,System.Boolean)">
            <summary>
            Stores an ICollection in a byte list composed of:
            - 1 byte for type (if typed is true)
            - 4 or 5 bytes for size (see int.ToBinary())
            - foreach element:
                 - n bytes (according to its type)
            </summary>
            <param name="obj"></param>
            <param name="typed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinaryString(System.Collections.Generic.List{System.Byte})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ToBinaryString(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinary(System.Byte[])">
            <summary>
            PArse a binary Hashtable
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinary(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryTemplated``1(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a binary object of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinary(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a binary object.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryByte(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a byte value.
            See byte.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryByte(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a byte value.
            See byte.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryShort(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a short value.
            See short.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryShort(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a short value.
            See short.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryInt(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse an int value.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryInt(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse an int value.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryUInt(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse an uint value.
            See uint.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryUInt(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse an uint value.
            See uint.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryFloat(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a float value.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryFloat(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a float value.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryDouble(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a double value.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryDouble(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a double value.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryString(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a string.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryString(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a string.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryStringUtf16(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a string utf16.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryStringUtf16(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a string utf16.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryVector2(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a Vector2.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryVector2(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a Vector2.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryVector3(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a Vector3.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryVector3(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a Vector3.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryByteArray(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a byte array.
            See byte[].ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryByteArray(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a byte array.
            See byte[].ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryIntArray(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse an int array.
            See int[].ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryIntArray(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse an int array.
            See int[].ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryFloatArray(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse a float array.
            See float[].ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryFloatArray(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse a float array.
            See float[].ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryHashtable(System.Byte[])">
            <summary>
            Parse an Hashtable.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryHashtable(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse an Hashtable.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryHashtable(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse an Hashtable.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryArrayList(System.Byte[])">
            <summary>
            Parse an ArrayList.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryArrayList(System.Byte[],System.Int32@,System.Boolean@)">
            <summary>
            Parse an ArrayList.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.ParseBinaryArrayList(System.Byte[],System.Boolean,System.Int32@,System.Boolean@)">
            <summary>
            Parse an ArrayList.
            See int.ToBinary() for format.
            </summary>
            <param name="data">data buffer</param>
            <param name="typed">true if the type is given</param>
            <param name="index">index to start parsing</param>
            <param name="error">will be set at true if an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Data.TypedBinarySerializer.FromBinaryString(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.DebugComponent`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XKTools.DebugComponent`1.s_Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.DebugComponent`1.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.DebugComponent`1.Inst">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GameGeneric.Main">
            <summary>
            Generic Main that can be used or inherited as main of a game
            Contains managers
            </summary>
        </member>
        <member name="T:XKTools.GameGeneric.Main.OnApplicationQuitDlg">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GameGeneric.Main.OnApplicationPauseDlg">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.GameGeneric.Main.OnApplicationFocusDlg">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.GameGeneric.Main.ENetworkType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.ENetworkType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.ENetworkType.Unity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.ENetworkType.Nuggeta">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.ENetworkType.Steam">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.ENetworkType.PhotonBoltUDP">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.ENetworkType.PhotonBoltSteam">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GameGeneric.Main.EOrientationFakerBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.EOrientationFakerBase.Portrait">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.EOrientationFakerBase.Landscape">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.EOrientationFakerBase.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_UseObjectCounter">
            <summary>
            This might lose some performances but helps for Memory leak detection
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_UseUninput">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_FakeDeviceOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_UseUnityRemote">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ShowConnector">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_NetworkType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_DomainUrl">
            <summary>
            The domain url that will be used by the DownloadManager if specified
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ForceLanguage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_MissingText">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_PlaySounds">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_CheckSoundSpam">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_Demo">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_DevBuild">
            <summary>
            Dev builds should consider cheats and keyboard shortcuts (change camera, remove gui for screenshots, etc.)
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_UseOnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ScreenshotKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ToDeactiveAtStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_AssetManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_DownloadManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ConfigManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_SaveManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_SessionManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_CameraManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_Uninput">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_NetworkManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_PhysicManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_PauseManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_NotifierManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_SoundManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_MusicManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ContextManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_RequestManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_Managers">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_ManagersCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GameGeneric.Main.m_Application">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnDrawGizmos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnApplicationQuit">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnApplicationPause(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnApplicationFocus(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnAwake">
            <summary>
            Use this function to pre init your game (push atlas tables for instance)
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnReloadScene">
            <summary>
            The scene was reloaded and a new main attempted to load,
            your might want to restart fsm or whatever
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeAssetManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeConfigManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeSaveManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeSessionManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializePhysicManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializePauseManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeCoroutineManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeSoundManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeMusicManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeNotifierManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeCameraManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeContextManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeDownloadManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeRequestManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeUninput(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeNetworkManager(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.FireOnLoadMainSave">
            <summary>
            OnLoadMainSave must be delayed on PS4.
            In this case this method must be override to none method and
            the SaveManager.FireMainSaveLoaded() must be called after the SessionManager.Engage() and the SessionManager.UserSignIn async process
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.OnLoadMainSave">
            <summary>
            Called after main save creation
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.CreateApplicationFSM(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GameGeneric.Main.SetApplicationDefaultApplicationOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.StartApplication">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.CreateManagers(System.Collections.Generic.List{XKTools.IManager})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeAssetManagerFolders">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeSavePattern">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.RegisterConfigFiles">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.InitializeCameras">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.UpdateDevShortcuts">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.ApplicationFsm">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.Demo">
            <summary>
            Says whether or not the current app is a demo
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.DevBuild">
            <summary>
            Says whether or not the current app is a developement version
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.ForcedLanguage">
            <summary>
            Get the current forced language for the application
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.SafeZone">
            <summary>
            Get the system safe zone setting
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.Platform">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.BundleVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.ClearManagers">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.IsInternetReachable(System.Boolean)">
            <summary>
            
            </summary>
            <param name="limitToWifi"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.GameGeneric.Main.Fsm">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.NetworkType">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.OnApplicationQuitCB">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.OnApplicationPauseCB">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GameGeneric.Main.OnApplicationFocusCB">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GameGeneric.Main.CaptureScreenshot">
            <summary>
            
            </summary>
            <returns>Screenshot filename</returns>
        </member>
        <member name="T:XKTools.Graphics.AtlasMaker">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.AtlasMaker.STexture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.STexture.texture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.STexture.offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.STexture.atlas">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.AtlasMaker.SNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SNode.children">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SNode.rect">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SNode.texture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SNode.full">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.AtlasMaker.SIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SIndex.texInd">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SIndex.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SIndex.height">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.SIndex.name">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.SIndex.Compare(XKTools.Graphics.AtlasMaker.SIndex,XKTools.Graphics.AtlasMaker.SIndex)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.AtlasMaker.TextureSorter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.TextureSorter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.TextureSorter.#ctor(UnityEngine.Texture2D)">
            <summary>
            
            </summary>
            <param name="tex"></param>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.TextureSorter.Compare(XKTools.Graphics.AtlasMaker.TextureSorter,XKTools.Graphics.AtlasMaker.TextureSorter)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.TextureSorter.TextureSorterHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.AtlasMaker.TextureSorter.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_SizeMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_Padding">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_MarginNibbling">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_PaddingHalfSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_OverScale">
            <summary>
            Offset in pixel to determine overscale on a texture
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_Format">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_TexPathOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_ScriptPathOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_FileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_Class">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_UsePackTexture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_ExportAsCSharpScript">
            <summary>
            Exports the atlas UVs to a CS code file (has to be pushed to the ModifyUV)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.AtlasMaker.s_ExportAsJson">
            <summary>
            Exports the atlas UVs to a json file located near to the texture
            </summary>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.MakeAtlas(UnityEngine.Object[])">
            <summary>
            
            </summary>
            <param name="texs"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.MakeAtlas(UnityEngine.Object[],System.String)">
            <summary>
            
            </summary>
            <param name="texs"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.ComputePath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.MakeAtlasManual(UnityEngine.Texture2D[],System.String)">
            <summary>
            
            </summary>
            <param name="texs"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.MakeAtlasPackTexture(UnityEngine.Texture2D[],System.String)">
            <summary>
            
            </summary>
            <param name="texs"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.AtlasMaker.ExportTextureAsPNG(UnityEngine.Texture2D,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tex"></param>
            <param name="name">Is needed to extend textures names</param>
            <param name="filePath"></param>
        </member>
        <member name="T:XKTools.Graphics.ModifyUV">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_OverridenName">
            <summary>
            Overrides GameObject.name as sprite name
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_CleanNameFrom">
            <summary>
            Cleans the sprite name from the specified char/string til the end
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_OverridenSheetName">
            <summary>
            Overrides Material.name as sprite sheet name
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_CleanSheetNameFrom">
            <summary>
            Cleans the sprite sheet name from the specified char/string til the end
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_ReverseX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_ReverseY">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_SecondUVsChanel">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_OverScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyUV.m_ModifyUVAtStart">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.Name">
            <summary>
            This accessor will Modify UV coordinates and revert them in case of need
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.SheetName">
            <summary>
            This accessor will Modify UV coordinates and revert them in case of need
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.SetName(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="spriteName">Sprite name</param>
            <param name="reverseX"></param>
            <param name="reverseY"></param>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.SetName(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sheetName">Sheet name</param>
            <param name="spriteName">Sprite name</param>
            <param name="reverseX"></param>
            <param name="reverseY"></param>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.ModifyUVs">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.EnsureUVs">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.ForceInitialize">
            <summary>
            This may be useful to force initiliazation in case the object gets deactivated too early
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.RevertUVs">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.CreateColorBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.ApplyColors">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.PushClassToAtlasTable(System.Type,System.Boolean)">
            <summary>
            As the XKTools assembly does not contain your project types, you'll have to push them manually before trying to modify UVs.
            </summary>
            <param name="t"></param>
            <param name="log"></param>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.PushClassToAtlasTable(System.Type)">
            <summary>
            As the XKTools assembly does not contain your project types, you'll have to push them manually before trying to modify UVs.
            <remarks>does not log in case of existing atlas definition</remarks>
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.Graphics.ModifyUV.ContainsTexture(System.String)">
            <summary>
            
            </summary>
            <param name="texName"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.OverridenName">
            <summary>
            This Property will not change the MeshUVs, to do so, use Name or Set instead
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.CleanSheetNameFrom">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.ReverseX">
            <summary>
            This Property will not change the MeshUVs, to do so, use SetName instead
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.ReverseY">
            <summary>
            This Property will not change the MeshUVs, to do so, use SetName instead
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.SecondUVsChanel">
            <summary>
            This Property will not change the MeshUVs, to do so, use SetName instead
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.OverScale">
            <summary>
            This Property will not change the MeshUVs, to do so, use SetName instead
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.ModifyUVAtStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.Colors">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ModifyUV.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ModifyUVForTk2DAtlas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyUVForTk2DAtlas.ModifyUV(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.SpriteData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.SpriteData.m_UVPos">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.SpriteData.m_UVSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.SpriteData.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="xp"></param>
            <param name="yp"></param>
            <param name="xs"></param>
            <param name="ys"></param>
        </member>
        <member name="P:XKTools.Graphics.SpriteData.UVPos">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.SpriteData.UVSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.TextureBlender">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.TextureBlender.EBlendFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.Zero">
            <summary>
            (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.One">
            <summary>
            (1, 1, 1, 1)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.SrcColor">
            <summary>
            (Rs, Gs, Bs, As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.InvSrcColor">
            <summary>
            (1-Rs, 1-Gs, 1-Bs, 1-As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.SrcAlpha">
            <summary>
            (As, As, As, As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.InvSrcAlpha">
            <summary>
            (1-As, 1-As, 1-As, 1-As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.DestAlpha">
            <summary>
            (Ad, Ad, Ad, Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.InvDestAlpha">
            <summary>
            (1-Ad, 1-Ad, 1-Ad, 1-Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.DestColor">
            <summary>
            (Rd, Gd, Bd, Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.InvDestColor">
            <summary>
            (1-Rd, 1-Gd, 1-Bd, 1-Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.TextureBlender.EBlendFactor.SrcAlphaSat">
            <summary>
            (f, f, f, 1); f = min(As, 1-Ad)
            </summary>
        </member>
        <member name="M:XKTools.Graphics.TextureBlender.BlendAndSaveTextures(UnityEngine.Texture2D,UnityEngine.Texture2D,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="path"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:XKTools.Graphics.TextureBlender.BlendTextures(UnityEngine.Texture2D,UnityEngine.Texture2D)">
            <summary>
            
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.TextureBlender.SaveFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:XKTools.Graphics.TextureBlender.SrcFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.TextureBlender.DstFactor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.EMeshShape">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshShape.Quad">
            <summary>
            Classical quad and UV settings
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshShape.Trapezium">
            <summary>
            Makes use of false persepective trick on UVs
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshShape.Donut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshShape.CurvedTrapezium">
            <summary>
            Makes use of false persepective trick on UVs
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshShape.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.EMeshData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshData.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.EMeshData.Tangent">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.MeshCreator">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.CreateQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ModifyQuad(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ModifyQuadUV(UnityEngine.Mesh,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.CreateTrapezium(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ModifyTrapezium(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ModifyTrapeziumUV(UnityEngine.Mesh,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.CreateCurvedTrapezium(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32,System.Nullable{UnityEngine.Vector3})">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
            <param name="curveDir"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ModifyCurvedTrapezium(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32,System.Nullable{UnityEngine.Vector3})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="tesselation">Default value is Vector2.one</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
            <param name="curveDir">Direction of the curve, very specific to RaPerrier for now...</param>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ModifyCurvedTrapeziumUV(UnityEngine.Mesh,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector3})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="tesselation"></param>
            <param name="minUV"></param>
            <param name="maxUV"></param>
            <param name="curveDir"></param>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.CreateDonut(UnityEngine.Vector3,System.Single,System.Single,System.Int32,System.Nullable{UnityEngine.Vector2},System.Nullable{UnityEngine.Vector2},System.Int32)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="innerDistance"></param>
            <param name="outerDistance"></param>
            <param name="tesselation">Default value 3</param>
            <param name="minUV">Default value is Vector2.zero</param>
            <param name="maxUV">Default value is Vector2.one</param>
            <param name="meshDataMask"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.MeshCreator.ComputeDonutUV(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="pos">x and y are ranged [-1, 1]</param>
            <param name="minUV"></param>
            <param name="maxUV"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Graphics.MeshScaler">
            <summary>
            Usefull class to scale a Mesh instead of the transform
            </summary>
        </member>
        <member name="T:XKTools.Graphics.MeshScaler.EVertex">
            <summary>
            Vertex identifier enum
            </summary>
        </member>
        <member name="F:XKTools.Graphics.MeshScaler.EVertex.BottomLeft">
            <summary>
            Bottom Left vertex
            </summary>
        </member>
        <member name="F:XKTools.Graphics.MeshScaler.EVertex.BottomRight">
            <summary>
            Bottom Right vertex
            </summary>
        </member>
        <member name="F:XKTools.Graphics.MeshScaler.EVertex.TopLeft">
            <summary>
            Top Left vertex
            </summary>
        </member>
        <member name="F:XKTools.Graphics.MeshScaler.EVertex.TopRight">
            <summary>
            Top Right vertex
            </summary>
        </member>
        <member name="M:XKTools.Graphics.MeshScaler.AdaptTransformScaleToMesh(UnityEngine.Transform)">
            <summary>
            If the scale of the given transform is not uniform, reste it and apply this scale to the mesh instead
            </summary>
            <param name="transform">The transform you want to adapt the scale</param>
        </member>
        <member name="M:XKTools.Graphics.MeshScaler.ScaleMesh(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            Scale the mesh attached to the given transform
            </summary>
            <param name="transform">The transform you want to scale the mesh of</param>
            <param name="scale">The wanted scale to apply to the mesh</param>
        </member>
        <member name="M:XKTools.Graphics.MeshScaler.ScaleMesh(UnityEngine.Mesh,UnityEngine.Vector3)">
            <summary>
            Scale the given mesh with the given scale
            </summary>
            <param name="mesh">The mesh you want to scale</param>
            <param name="scale">The wanted scale to apply to the mesh</param>
        </member>
        <member name="T:XKTools.Graphics.NoSharedVertices">
            <summary>
            This script helps for flat rendering by unsharing normals among faces.
            Now, every triangle vertex has the same normal and a "shared" vertex will have as many normals as triangles it belongs to!
            </summary>
        </member>
        <member name="F:XKTools.Graphics.NoSharedVertices.m_PerFaceNormals">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.NoSharedVertices.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.NoSharedVertices.AdjustNormals(UnityEngine.Mesh,UnityEngine.Vector3[])">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="vertices"></param>
        </member>
        <member name="M:XKTools.Graphics.NoSharedVertices.AdjustUV(UnityEngine.Mesh,UnityEngine.Vector3[])">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="vertices"></param>
        </member>
        <member name="T:XKTools.Graphics.ObjExporter">
            <summary>
            Transforms a mesh filter to a string object so it can be serialized and stored as an OBJ file
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ObjExporter.MeshToString(UnityEngine.MeshFilter)">
            <summary>
            Serializes a MeshFilter as a string
            </summary>
            <param name="mf"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.ObjExporter.MeshToString(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            Serializes a MeshFilter as a string
            </summary>
            <param name="smr"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.ObjExporter.MeshToFile(UnityEngine.MeshFilter,System.String)">
            <summary>
            Export mesh to the specified file
            </summary>
            <param name="mf"></param>
            <param name="filename"></param>
        </member>
        <member name="M:XKTools.Graphics.ObjExporter.MeshToFile(UnityEngine.SkinnedMeshRenderer,System.String)">
            <summary>
            Export mesh to the specified file
            </summary>
            <param name="smr"></param>
            <param name="filename"></param>
        </member>
        <member name="T:XKTools.Graphics.UVCopier">
            <summary>
            
            </summary>
            Todo: consider source channel
        </member>
        <member name="M:XKTools.Graphics.UVCopier.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ModifyOffsetUV">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ModifyOffsetUV.EStyle">
            <summary>
            Update style for texture UV
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyOffsetUV.EStyle.Linear">
            <summary>
            Linear move in x and y
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyOffsetUV.EStyle.HorizontalSnake">
            <summary>
            Move on x, amplitude on y, sin speed on z
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyOffsetUV.EStyle.VerticalSnake">
            <summary>
            Move on x, amplitude on y, sin speed on z
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyOffsetUV.m_OffsetModifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyOffsetUV.m_Style">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ModifyOffsetUV.m_TextureName">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.Pause(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.Register(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.Resume(System.Object[],System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.Unregister">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ModifyOffsetUV.ResetScript">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.RTTHelper">
            <summary>
            The Main purpose of this class is to render all camera into one texture that we can use for many things
            </summary>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.Activate(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.Toggle">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.RTTHelper.Active">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.CreateRenderTexture">
            <summary>
            Create and configure render texture
            </summary>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.CreateMaterial">
            <summary>
            Creates material and applies render texture
            </summary>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.CreateMeshRenderer">
            <summary>
            Finds material and applies render texture
            </summary>
        </member>
        <member name="M:XKTools.Graphics.RTTHelper.AdjustQuadTransform">
            <summary>
            Changes the scale of the quad so it adjusts to the camera
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ShadowScript">
            <summary>
            Script to handle simple shadows for characters or general gameObjects
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ShadowScript.EDeformationType">
            <summary>
            Shadow's deformation type
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.EDeformationType.None">
            <summary>
            No deformation applied
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.EDeformationType.Ragdoll">
            <summary>
            Deformation based on some bones of a ragdoll
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.EDeformationType.Linear">
            <summary>
            Linear Deformation based on two transform with no rotation
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.EDeformationType.ReverseLinear">
            <summary>
            Linear Deformation based on two transform with no rotation and reversed axis (x / z) for the case the texture has a bad orientation
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.EDeformationType.BoudingBox">
            <summary>
            Deformation based on the bouding box of the tracked transform (it must have a collider or a renderer)
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ShadowScript.ELayerType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.ELayerType.Shift">
            <summary>
            Default value, used with shift operator )
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.ELayerType.Mask">
            <summary>
            Says the mak was precomputed
            </summary>
        </member>
        <member name="T:XKTools.Graphics.ShadowScript.ETrackingType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.ETrackingType.PosY">
            <summary>
            Sets alpha according to object height
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.ETrackingType.DistanceXZ">
            <summary>
            Sets alpha acccording to XZ distance
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.m_TrackedTrans">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.m_RaycastLayer">
            <summary>
            The layer we'll try to racyast with to place the shadow - let "-1" to avoid using layer mask
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.m_RaycastLayerType">
            <summary>
            The layer we'll try to racyast with to place the shadow - let "-1" to avoid using layer mask
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.m_UseFixedUpdate">
            <summary>
            Does the shadow use the fixed update or not
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.m_SyncWithRenderer">
            <summary>
            Does the shadow sync its position on renderer's bounds or on the tracked position
            </summary>
        </member>
        <member name="F:XKTools.Graphics.ShadowScript.m_RecordEventForReplay">
            <summary>
            Does the shadow record itself for the replay ? (Activation/Deactivation)
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.Start">
            <summary>
            The initialization method of ShadowScript
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.FixedUpdate">
            <summary>
            The update methode of Shadows based on physical elements
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.LateUpdate">
            <summary>
            The update methode of Shadows based on non-physical elements
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.TrackedTranform">
            <summary>
            The Transform that is tracked by the shadow
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.Bottom">
            <summary>
            The Transform bottom node that is used to deform the shadow (optional)
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.Top">
            <summary>
            The Transform top node that is used to deform the shadow (optional)
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.Middle">
            <summary>
            The Transform middle node that is used to deform the shadow (optional)
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.DeformationType">
            <summary>
            The type of the deformation applied to this shadow
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.GlobalAlpha">
            <summary>
            The global alpha of the shadow
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.FollowTrackedForward">
            <summary>
            Does the shadow sync its forward on the tracked one
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.UseFixedUpdate">
            <summary>
            Does the shadow use fixed update
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.InitialScale">
            <summary>
            Initial Scale of the Shadow (applied to the mesh)
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.RecordEventForReplay">
            <summary>
            Does the shadow record an event for the replay for activation/deactivation (do not set it to true while replaying)
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.IsActive">
            <summary>
            Is the shadow active?
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetParentScale(UnityEngine.Vector3)">
            <summary>
            Set the shadow's parent scale
            </summary>
            <param name="scale">The wanted scale</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetShadowOffsetPositionXZ(UnityEngine.Vector2)">
            <summary>
            Give to the shadow a position offset in XZ (for example to match with camera orientation)
            </summary>
            <param name="offset">The wanted offset (offset.x = X, offset.y = Z)</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetShadowOffsetPosition(UnityEngine.Vector3)">
            <summary>
            Give to the shadow a position offset (for example to match with camera orientation)
            </summary>
            <param name="offset">The wanted offset</param>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.RaycastLayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.RaycastLayerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.TrackingType">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.TrackingCenter">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Graphics.ShadowScript.TrackingDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.InitializeShadow(UnityEngine.Transform,UnityEngine.Vector3,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Set the Transform and the default members of the ShadowScript
            </summary>
            <param name="trackedTrans">The Transform the shadow will track</param>
            <param name="initialScale">The initial scale of the shadow</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="raycastLayer">The layer the Shadow will use for raycast (to place itself on y axis)</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.InitializeShadow(UnityEngine.Transform,UnityEngine.Vector3,System.Boolean,System.Int32,System.Boolean,System.String)">
            <summary>
            Set the Transform and the default members of the ShadowScript
            </summary>
            <param name="trackedTrans">The Transform the shadow will track</param>
            <param name="initialScale">The initial scale of the shadow</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="raycastLayer">The layer the Shadow will use for raycast (to place itself on y axis)</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
            <param name="shadowTexName">The name of the texture of the shadow</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.InitializeShadow(UnityEngine.Transform,UnityEngine.Vector3,System.Boolean,System.Int32,System.Boolean,System.Single)">
            <summary>
            Set the Transform and the default members of the ShadowScript
            </summary>
            <param name="trackedTrans">The Transform the shadow will track</param>
            <param name="initialScale">The initial scale of the shadow</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="raycastLayer">The layer the Shadow will use for raycast (to place itself on y axis)</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
            <param name="offsetY">An offset position on y axis</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.InitializeShadow(UnityEngine.Transform,UnityEngine.Vector3,System.Boolean,System.Int32,System.Boolean,System.Single,System.String)">
            <summary>
            Set the Transform and the default members of the ShadowScript
            </summary>
            <param name="trackedTrans">The Transform the shadow will track</param>
            <param name="initialScale">The initial scale of the shadow</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="raycastLayer">The layer the Shadow will use for raycast (to place itself on y axis)</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
            <param name="offsetY">An offset position on y axis</param>
            <param name="shadowTexName">The name of the texture of the shadow</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetDeformationTransforms(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform,XKTools.Graphics.ShadowScript.EDeformationType,System.Boolean,System.Boolean)">
            <summary>
            Define the Transform that will enable you to deform the shadow
            </summary>
            <param name="tracked">Reminds the tracked transform</param>
            <param name="top">(Mandatory) The top node used to deform the shadow</param>
            <param name="bottom">(Mandatory) The bottom node used to deform the shadow</param>
            <param name="deformation">The type of deformation you want to apply to the shadow</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetDeformationTransforms(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform,XKTools.Graphics.ShadowScript.EDeformationType,System.Boolean,System.Boolean)">
            <summary>
            Set the transform for the skeleton deformation of the shadow
            </summary>
            <param name="tracked">Remind the tracked transform</param>
            <param name="top">(Mandatory) The top node used to deform the shadow</param>
            <param name="bottom">(Mandatory) The bottom node used to deform the shadow</param>
            <param name="middle">(Optional) The middle node for the walking deformation</param>
            <param name="deformation">The type of deformation you want to apply to the shadow</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.DeactivateDeformation">
            <summary>
            Deactivate the deformations for this shadow (but the shadow keeps on following the tracked transform)
            </summary>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.ChangeTransformToTrack(UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Change the transform to track
            </summary>
            <param name="trackedTrans">The new tracked transform</param>
            <param name="followTrackedForward">If you want the shadow to follow the tracked forward or if it doesn't matter</param>
            <param name="useFixedUpdate">If you want to use FixedUpdate for the given tracked trans (else, LateUpdate will be used)</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.AdjustShadowPosition(System.Boolean,System.Single)">
            <summary>
            Adjust the position of the shadow
            </summary>
            <param name="useRaycastPos">Indicates whether the y-composant is set by raycast or not</param>
            <param name="offsetY">Offset position on y-axis</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetAlpha(System.Single)">
            <summary>
            Set the alpha of the shadow
            </summary>
            <param name="alpha">The new alpha</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.SetShadowTexName(System.String)">
            <summary>
            Modify the shadow's texture
            </summary>
            <param name="shadowTexName">The new shadow's texture's name (must be the right name of a texture in the same atlas)</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.DisplayShadow(System.Boolean)">
            <summary>
            Display or not the shadow
            </summary>
            <param name="b">State of the shadow's renderer</param>
        </member>
        <member name="M:XKTools.Graphics.ShadowScript.ForceShadowPositionUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Graphics.Tex">
            <summary>
            Operations on textures
            </summary>
        </member>
        <member name="T:XKTools.Graphics.Tex.EBlendFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.Zero">
            <summary>
            (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.One">
            <summary>
            (1, 1, 1, 1)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.SrcColor">
            <summary>
            (Rs, Gs, Bs, As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.InvSrcColor">
            <summary>
            (1-Rs, 1-Gs, 1-Bs, 1-As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.SrcAlpha">
            <summary>
            (As, As, As, As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.InvSrcAlpha">
            <summary>
            (1-As, 1-As, 1-As, 1-As)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.DestAlpha">
            <summary>
            (Ad, Ad, Ad, Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.InvDestAlpha">
            <summary>
            (1-Ad, 1-Ad, 1-Ad, 1-Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.DestColor">
            <summary>
            (Rd, Gd, Bd, Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.InvDestColor">
            <summary>
            (1-Rd, 1-Gd, 1-Bd, 1-Ad)
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EBlendFactor.SrcAlphaSat">
            <summary>
            (f, f, f, 1); f = min(As, 1-Ad)
            </summary>
        </member>
        <member name="T:XKTools.Graphics.Tex.EInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EInterpolation.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EInterpolation.Lineare">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Graphics.Tex.EInterpolation.Bilineare">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Graphics.Tex.Screenshot(UnityEngine.Camera,UnityEngine.DeviceOrientation)">
            <summary>
            Take a screenshot from a camera
            </summary>
            <param name="camera">The camera from which the screenshots is taken</param>
            <param name="deviceOrientation">The wanted orientation of the device</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Graphics.Tex.BlendTextures(UnityEngine.Texture2D,UnityEngine.Texture2D)">
            <summary>
            Blend two textures
            </summary>
            <param name="src">The first texture (source)</param>
            <param name="dst">The second texture (destination)</param>
            <returns>The texture that blends those given in parameter</returns>
        </member>
        <member name="M:XKTools.Graphics.Tex.BlendTextures(UnityEngine.Texture2D,UnityEngine.Texture2D,XKTools.Graphics.Tex.EBlendFactor,XKTools.Graphics.Tex.EBlendFactor)">
            <summary>
            /// Blend two textures
            </summary>
            <param name="src">The first texture (source)</param>
            <param name="dst">The second texture (destination)</param>
            <param name="srcFactor">The blend factor of the first texture</param>
            <param name="dstFactor">The blend factor of the second texture</param>
            <returns>The texture that blends those given in parameter</returns>
        </member>
        <member name="M:XKTools.Graphics.Tex.ConvertToGreyScale(UnityEngine.Texture2D)">
            <summary>
            Make the given texture grey
            </summary>
            <param name="texture">The texture you want to make grey</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.ConvertToGreyScale(UnityEngine.Color[]@)">
            <summary>
            Make the given pixels grey
            </summary>
            <param name="colors">The pixels you want to make grey</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.Resize(UnityEngine.Texture2D@,System.Int32,System.Int32,XKTools.Graphics.Tex.EInterpolation,UnityEngine.TextureFormat)">
            <summary>
            Resize the given texture to width and height
            </summary>
            <param name="texture">The texture you want to resize</param>
            <param name="width">The wanted width</param>
            <param name="height">The wanted height</param>
            <param name="mode">The interpolation mode</param>
            <param name="format">The texture format. Default is the same of the texture</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.Resize(UnityEngine.Texture2D@,System.Int32,System.Int32,XKTools.Graphics.Tex.EInterpolation)">
            <summary>
            Resize the given texture to width and height
            </summary>
            <param name="texture">The texture you want to resize</param>
            <param name="width">The wanted width</param>
            <param name="height">The wanted height</param>
            <param name="mode">The interpolation mode</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.Resize(UnityEngine.Texture2D@,System.Single,XKTools.Graphics.Tex.EInterpolation,UnityEngine.TextureFormat)">
            <summary>
            Resize the given texture depending on the factor
            </summary>
            <param name="texture">The texture you want to resize</param>
            <param name="fact">The scale you want to apply to the texture</param>
            <param name="mode">The interpolation mode</param>
            <param name="format">The texture format. Default is the same of the texture</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.Resize(UnityEngine.Texture2D@,System.Single,XKTools.Graphics.Tex.EInterpolation)">
            <summary>
            Resize the given texture depending on the factor
            </summary>
            <param name="texture">The texture you want to resize</param>
            <param name="fact">The scale you want to apply to the texture</param>
            <param name="mode">The interpolation mode</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.Resize(UnityEngine.Texture2D@,System.Single,System.Single,XKTools.Graphics.Tex.EInterpolation,UnityEngine.TextureFormat)">
            <summary>
            Resize the given texture depending on the factors in width and height
            </summary>
            <param name="texture">The texture you want to resize</param>
            <param name="widthFact">The scale you want to apply to the texture's width</param>
            <param name="heightFact">The scale you want to apply to the texture's height</param>
            <param name="mode">The interpolation mode</param>
            <param name="format">The texture format. Default is the same of the texture</param>
        </member>
        <member name="M:XKTools.Graphics.Tex.Resize(UnityEngine.Texture2D@,System.Single,System.Single,XKTools.Graphics.Tex.EInterpolation)">
            <summary>
            Resize the given texture depending on the factors in width and height
            </summary>
            <param name="texture">The texture you want to resize</param>
            <param name="widthFact">The scale you want to apply to the texture's width</param>
            <param name="heightFact">The scale you want to apply to the texture's height</param>
            <param name="mode">The interpolation mode</param>
        </member>
        <member name="T:XKTools.GizmosTools">
            <summary>
            Extensions for Gizmos
            </summary>
        </member>
        <member name="M:XKTools.GizmosTools.DrawArrow(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw an Arrow 
            </summary>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawWideArrow(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw an Wide Arrow 
            </summary>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawArrow(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Draw an Arrow 
            </summary>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
            <param name="arrowSize">size of the arrow</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawWideArrow(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Draw an Wide Arrow 
            </summary>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
            <param name="arrowSize">size of the arrow</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawArrow(System.Single,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw an Arrow with margin
            </summary>
            <param name="margin">arrow margin distance</param>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawWideArrow(System.Single,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw an Wide Arrow with margin
            </summary>
            <param name="margin">arrow margin distance</param>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawArrow(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Draw an Arrow with margin
            </summary>
            <param name="margin">arrow margin distance</param>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
            <param name="arrowSize">size of the arrow</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawWideArrow(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Draw an Wide Arrow with margin
            </summary>
            <param name="margin">arrow margin distance</param>
            <param name="origin">arrow origin</param>
            <param name="target">arrow target</param>
            <param name="arrowSize">size of the arrow</param>
        </member>
        <member name="M:XKTools.GizmosTools.DrawCross(UnityEngine.Vector3,System.Single,UnityEngine.Color)">
            <summary>
            Draw a cross
            </summary>
            <param name="center">The center of the cross</param>
            <param name="radius">The radius of the cross</param>
            <param name="color">The color of the gizmos</param>
        </member>
        <member name="T:XKTools.GUIHelper">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GUIHelper.EItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W03_H05">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W05_H24">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W06_H15">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W06_H24">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W07_H12">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W07_H24">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W15_H12">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GUIHelper.EItemCount.W15_H24">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GUIHelper.ItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GUIHelper.SetItemCount(XKTools.GUIHelper.EItemCount)">
            <summary>
            
            </summary>
            <param name="itemCount"></param>
        </member>
        <member name="M:XKTools.GUIHelper.RevertItemCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GUIHelper.TextField(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.TextField(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.FloatField(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.IntField(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Slider(System.Int32,System.Int32,System.Single@,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="value"></param>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Slider(System.Int32,System.Int32,System.Int32@,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="value"></param>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(System.Int32,System.String,System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
            <param name="id"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(System.Int32,System.Int32,System.String,System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
            <param name="id"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Button(UnityEngine.Rect,System.String)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.TranslatedButton(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="textId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.TranslatedButton(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="textId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.TranslatedButton(UnityEngine.Rect,System.String)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="textId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.TranslatedLabel(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="textId"></param>
        </member>
        <member name="M:XKTools.GUIHelper.Label(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.GUIHelper.Label(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.GUIHelper.Box(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.GUIHelper.Box(System.Int32,System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.GUIHelper.Box(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.GUIHelper.Box(System.Int32,System.Int32,System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.GUIHelper.PopupList(System.Int32,System.Int32,XKTools.UnityGUI.GUIPopupData)">
            <summary>
            Return true in case of change
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Toggle(System.Single,System.Single,System.String,System.Boolean@)">
            <summary>
            Return true in case of change
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.GUIHelper.Toggle(System.Single,System.Single,UnityEngine.Vector2,System.String,System.Boolean@)">
            <summary>
            Return true in case of change
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="btnScale"></param>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.GUILayoutTools">
            <summary>
            Extensions for GUILayout
            </summary>
        </member>
        <member name="M:XKTools.GUILayoutTools.DrawSlider(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a slider
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.DrawSlider(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a slider
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.DrawSlider(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Draw a slider
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.DrawSlider(System.String,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Draw a slider
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.Single)">
            <summary>
            Draw a float field
            </summary>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.Single,UnityEngine.GUILayoutOption[])">
            <summary>
            Draw a float field
            </summary>
            <param name="value">the input value</param>
            <param name="options">the options of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.String,System.Single)">
            <summary>
            Draw a float field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.String,System.Single,System.Single)">
            <summary>
            Draw a float field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>
            Draw a float field
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="options">the options of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Draw a float field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.FloatField(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a float field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.Int32)">
            <summary>
            Draw a int field
            </summary>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>
            Draw a int field
            </summary>
            <param name="value">the input value</param>
            <param name="options">the options of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.String,System.Int32)">
            <summary>
            Draw a int field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.String,System.Int32,System.Single)">
            <summary>
            Draw a int field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a int field
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>
            Draw a int field
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="options">the options of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a int field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.IntField(System.String,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Draw a int field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <param name="height">the height of GUI</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(UnityEngine.Vector2)">
            <summary>
            Draw a Vector2 field
            </summary>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(System.String,UnityEngine.Vector2)">
            <summary>
            Draw a Vector2 field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Draw a Vector2 field
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(System.String,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Draw a Vector2 field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(UnityEngine.Vector3)">
            <summary>
            Draw a Vector3 field
            </summary>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(System.String,UnityEngine.Vector3)">
            <summary>
            Draw a Vector3 field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw a Vector3 field
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw a Vector3 field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(UnityEngine.Vector4)">
            <summary>
            Draw a Vector4 field
            </summary>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(System.String,UnityEngine.Vector4)">
            <summary>
            Draw a Vector4 field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            Draw a Vector4 field
            </summary>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="M:XKTools.GUILayoutTools.VectorField(System.String,UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            Draw a Vector4 field
            </summary>
            <param name="text">the display text</param>
            <param name="value">the input value</param>
            <param name="min">the min value</param>
            <param name="max">the max value</param>
            <returns>the new value</returns>
        </member>
        <member name="T:XKTools.UnityGUI.GUIPopup">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.UnityGUI.GUIPopup.OnStateChangedDlg">
            <summary>
            
            </summary>
            <param name="openClose"></param>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopup.List(UnityEngine.Rect,XKTools.UnityGUI.GUIPopupData)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="data"></param>
            <returns>True when a choice is made</returns>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopup.OnStateChanged">
            <summary>
            Helps to lock a camera for instance when opening a popup
            </summary>
        </member>
        <member name="T:XKTools.UnityGUI.GUIPopupData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopupData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopupData.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopupData.#ctor(System.String[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopupData.#ctor(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopupData.UpdateSelectedContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.GUIPopupData.SetListContent(System.String[])">
            <summary>
            
            </summary>
            <param name="arrayContent"></param>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.ShowList">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.ListEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.SelectedContent">
            <summary>
            Matching string with ListEntry
            </summary>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.ListContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.ButtonStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.BoxStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UnityGUI.GUIPopupData.ListStyle">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.UnityGUI.ScreenDevice">
            <summary>
            Deals with the Screen
            </summary>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.CreateRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a rectangle that matches with the screen width and height
            </summary>
            <param name="left">Decal from left (between 0f and 1f)</param>
            <param name="top">Decal from top (between 0f and 1f)</param>
            <param name="width">Percentage of Screen.width (between 0f and 1f)</param>
            <param name="height">Percentage of Screen.height (between 0f and 1f)</param>
            <returns>The resulted rect</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.CreateRect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates a pattern of aligned and normalized buttons
            </summary>
            <param name="btnIdx">Current button index (x and y)</param>
            <param name="btnCount">Number of buttons per line and column</param>
            <param name="areaOffset">Area Offset on screen</param>
            <param name="areaSize">Area Size on screen</param>
            <param name="spaceBetweenButtons">Space between buttons, also margin</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.CreateRect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates a pattern of aligned and normalized buttons
            </summary>
            <param name="btnIdx">Current button index (x and y)</param>
            <param name="btnCount">Number of buttons per line and column</param>
            <param name="areaOffset">Area Offset on screen</param>
            <param name="areaSize">Area Size on screen</param>
            <param name="spaceBetweenButtons">Space between buttons, also margin</param>
            <param name="btnScale">final btn scaling</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.IsInRect(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            checks if a position lies in rectangle
            </summary>
            <param name="rect"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.MeterToPixel(UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Convert the meters (Unity units) to pixels units (depending on the resolution and the given camera)
            </summary>
            <param name="meter">The vector which represents a value in meters</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <returns>The meters' value converted to pixels</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.MeterToPixel(UnityEngine.Vector3,UnityEngine.Camera,System.Single)">
            <summary>
            Convert the meters (Unity units) to pixels units (depending on the resolution and the given camera)
            </summary>
            <param name="meter">The vector which represents a value in meters</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <param name="height">The target height (Screen.height by default)</param>
            <returns>The meters' value converted to pixels</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.MeterToPixel(System.Single,UnityEngine.Camera)">
            <summary>
            Convert the meters (Unity units) to pixels unit (depending on the resolution and the given camera)
            </summary>
            <param name="meter">The float which represents a value in meters</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <returns>The meters' value converted to pixels</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.MeterToPixel(System.Single,UnityEngine.Camera,System.Single)">
            <summary>
            Convert the meters (Unity units) to pixels units (depending on the resolution and the given camera)
            </summary>
            <param name="meter">The vector which represents a value in meters</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <param name="height">The target height (Screen.height by default)</param>
            <returns>The meters' value converted to pixels</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.PixelToMeter(UnityEngine.Vector3,UnityEngine.Camera)">
            <summary>
            Convert the pixel unit to the meters (Unity unit) (depending on the resolution and the given camera)
            </summary>
            <param name="pixel">The vector which represents the value in pixels</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <returns>The pixels' value converted to meters</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.PixelToMeter(UnityEngine.Vector3,UnityEngine.Camera,System.Single)">
            <summary>
            Convert the pixel unit to the meters (Unity unit) (depending on the resolution and the given camera)
            </summary>
            <param name="pixel">The vector which represents the value in pixels</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <param name="height">The target height (Screen.height by default)</param>
            <returns>The pixels' value converted to meters</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.PixelToMeter(System.Single,UnityEngine.Camera)">
            <summary>
            Convert the pixel unit to the meters (Unity unit) (depending on the resolution and the given camera)
            </summary>
            <param name="pixel">The float which represents the value in pixels</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <returns>The pixels' value converted to meters</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.PixelToMeter(System.Single,UnityEngine.Camera,System.Single)">
            <summary>
            Convert the pixel unit to the meters (Unity unit) (depending on the resolution and the given camera)
            </summary>
            <param name="pixel">The vector which represents the value in pixels</param>
            <param name="cam">The camera that renders the scene (must be orthographic)</param>
            <param name="height">The target height (Screen.height by default)</param>
            <returns>The pixels' value converted to meters</returns>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.CheckScreenPosition(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>
            Check if the given Transform is seen by the given camera
            </summary>
            <param name="t">The transform we want to check the position</param>
            <param name="cam">The camera that must render the transform</param>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.CheckScreenPosition(UnityEngine.Renderer,UnityEngine.Camera)">
            <summary>
            Check if the given renderer is entirely seen by the given camera
            </summary>
            <param name="r">The renderer we want to check the position</param>
            <param name="cam">The camera that must watch the renderer</param>
        </member>
        <member name="M:XKTools.UnityGUI.ScreenDevice.SetToCenter(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>
            Put the given Transform to the center of the area seen by the given camera
            </summary>
            <param name="t">The transform we want to place at the center of the screen</param>
            <param name="cam">The camera we put the transform in front of</param>
        </member>
        <member name="T:XKTools.Gui.HorizontalReversedScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.#ctor(XKTools.Gui.ScrollSettings)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.#ctor(XKTools.Gui.ScrollSettings,XKTools.Gui.ScrollModifier[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.ComputeScrollDirection(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.ComputeDirectionPos(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetPos(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.SetPos(UnityEngine.Vector3@,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetStartElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetEndElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetStartFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetEndFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetStartFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.GetEndFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalReversedScrollArea.CheckAfterHelperPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.HorizontalScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.#ctor(XKTools.Gui.ScrollSettings)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.#ctor(XKTools.Gui.ScrollSettings,XKTools.Gui.ScrollModifier[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.ComputeScrollDirection(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.ComputeDirectionPos(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetPos(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.SetPos(UnityEngine.Vector3@,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetStartElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetEndElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetStartFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetEndFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetStartFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.GetEndFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.HorizontalScrollArea.CheckAfterHelperPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollArea">
            <summary> 
            
            </summary> 
        </member>
        <member name="F:XKTools.Gui.ScrollArea.c_Epsilon">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollArea.m_Settings">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.#ctor(XKTools.Gui.ScrollSettings)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.#ctor(XKTools.Gui.ScrollSettings,XKTools.Gui.ScrollModifier[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollArea.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollArea.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollArea.Elements">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetCurrentPosAsRatio">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.SetCurrentPosAsRatio(System.Single)">
            <summary>
            
            </summary>
            <param name="posRatio"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.AddElement(XKTools.Gui.ScrollElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.InsertElement(System.Int32,XKTools.Gui.ScrollElement)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="element"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.RemoveElement(XKTools.Gui.ScrollElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.RemoveElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="reset"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.FindElement(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.Pack">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.SetStartPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.ComputeScrollDirection(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.ComputeDirectionPos(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetPos(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.SetPos(UnityEngine.Vector3@,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetStartElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetEndElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetStartFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetEndFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetStartFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.GetEndFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollArea.CheckAfterHelperPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.VerticalReversedScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.#ctor(XKTools.Gui.ScrollSettings)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.#ctor(XKTools.Gui.ScrollSettings,XKTools.Gui.ScrollModifier[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.ComputeScrollDirection(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.ComputeDirectionPos(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetPos(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.SetPos(UnityEngine.Vector3@,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetStartElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetEndElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetStartFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetEndFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetStartFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.GetEndFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalReversedScrollArea.CheckAfterHelperPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.VerticalScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.#ctor(XKTools.Gui.ScrollSettings)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.#ctor(XKTools.Gui.ScrollSettings,XKTools.Gui.ScrollModifier[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.ComputeScrollDirection(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.ComputeDirectionPos(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetPos(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.SetPos(UnityEngine.Vector3@,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetStartElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetEndElementPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetStartFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetEndFadeInPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetStartFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.GetEndFadeOutPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.VerticalScrollArea.CheckAfterHelperPos(System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollElement">
            <summary> 
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollElement.m_GameObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollElement.m_Transform">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollElement.m_Height">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.#ctor(UnityEngine.GameObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.Initialize">
            <summary>
            	
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.Trs">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.FadeStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.GameObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.Index">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.GetComponent``1">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElement.Loaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.SetParent(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.ApplyTarget">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.SetLoaded(System.Boolean)">
            <summary>
            
            </summary>
            <param name="loaded"></param>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnBecomeVisible">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnBecomeInvisible">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnVisibleToFade">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnFadeToVisible">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnLoadToMemory">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnUnloadFromMemory">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollElement.OnAlpha(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.EFadeStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.EFadeStatus.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.EFadeStatus.Fade">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.EFadeStatus.Opaque">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.AutoScrollModifier">
            <summary> 
            
            </summary> 
        </member>
        <member name="M:XKTools.Gui.AutoScrollModifier.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.AutoScrollModifier.Scroll(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.AutoScrollModifier.Fade">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.AutoScrollModifier.StartAutoScrolling">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.AutoScrollModifier.StopAutoScrolling">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.MouseWheelScrollModifier">
            <summary> 
            
            </summary> 
        </member>
        <member name="M:XKTools.Gui.MouseWheelScrollModifier.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.MouseWheelScrollModifier.HandleInput(System.Single@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollModifier">
            <summary> 
            
            </summary> 
        </member>
        <member name="F:XKTools.Gui.ScrollModifier.m_ScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollModifier.m_ScrollAreaSettings">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollModifier.m_OverrideElementsVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollModifier.m_AllElementsAreOpaque">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollModifier.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollModifier.HandleInput(System.Single@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollModifier.Scroll(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollModifier.Fade">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollModifier.OverrideElementVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollModifier.AllElementsAreOpaque">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.TouchScrollModifier">
            <summary> 
            
            </summary> 
        </member>
        <member name="T:XKTools.Gui.TouchScrollModifier.OverLimitDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.TouchScrollModifier.OverStartElementLimitEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.TouchScrollModifier.OverLastElementLimitEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.TouchScrollModifier.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.TouchScrollModifier.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.TouchScrollModifier.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.TouchScrollModifier.HandleInput(System.Single@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollElementSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElementSettings.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElementSettings.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElementSettings.PaddingBefore">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElementSettings.PaddingAfter">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollElementSettings.Templates">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.TouchSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.TouchSettings.AccumulatorDeceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.TouchSettings.OutOfRangeSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.TouchSettings.ScrollIfAllVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.TouchSettings.TouchArea">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.MouseWheelSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.MouseWheelSettings.MouseWheelCoef">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.AutoScrollSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.AutoScrollSettings.AutoScrollSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.AutoScrollSettings.AutoScrollWaitDuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.AutoScrollSettings.AutoScrollLoop">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.AutoScrollSettings.AutoScrollWaitLoopDuration">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollSettingsEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.HorizontalScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.ReversedScrollArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.TouchAreaColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.FadeAreaColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.ElementAreaColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.PaddingAreaColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.DrawElementIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettingsEditor.DrawElementAtLastPosition">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollSettings">
            <summary> 
            
            </summary>
        </member>
        <member name="T:XKTools.Gui.ScrollSettings.EAtStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollSettings.EAtStart.Filled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Gui.ScrollSettings.EAtStart.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollSettings.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollSettings.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollSettings.InstantiateTemplate(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Gui.ScrollSettings.GetTemplate(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.ElementSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.AtStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.ElementLoadedMin">
            <summary>
            How many elements (minimum) we'd like to get loaded in memory at all time
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.CameraHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.CameraCenterRelative">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.CameraRot">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.TouchArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.RelativeTouchArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.FadeSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.Padding">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.TouchSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.MouseWheelSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Gui.ScrollSettings.AutoScrollSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.BufferedRandom">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.BufferedRandom.RangeDlg">
            <summary>
            Replace Random.Range() with the function of you choice
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.BufferedRandom.Range">
            <summary>
            Replace Random.Range() with the function of you choice
            </summary>
        </member>
        <member name="M:XKTools.BufferedRandom.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.BufferedRandom.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.BufferedRandom`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.BufferedRandom`1.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.BufferedRandom`1.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.BufferedRandom`1.AddValue(`0,System.Int32)">
            <summary>
            Adds a value to the randomable values buffer
            </summary>
            <param name="value">The value to add to the buffer</param>
            <param name="occurrenceCount">Helps to grow probabilities on the given value</param>
        </member>
        <member name="M:XKTools.BufferedRandom`1.Clear">
            <summary>
            Clears the values so we can add new ones
            </summary>
        </member>
        <member name="M:XKTools.BufferedRandom`1.DrawValue">
            <summary>
            Draws a random value from given buffers, waits for that values buffer to be empty before the result value can be drawn again
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.IntBufferedRandom">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IntBufferedRandom.AddValueRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="min">Inclusive</param>
            <param name="max">Exclusive</param>
            <param name="occurenceCount"></param>
        </member>
        <member name="T:XKTools.EnumBufferedRandom`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.EnumBufferedRandom`1.DrawEnum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.EResolution">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EResolution.IPhone">
            <summary>
            3/2
            </summary>
        </member>
        <member name="F:XKTools.EResolution.IPad">
            <summary>
            4/3
            </summary>
        </member>
        <member name="F:XKTools.EResolution.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Device">
            <summary>
            Deals with the device itself (let you know on which device you are, find the data path...)
            </summary>
        </member>
        <member name="P:XKTools.Device.LastScreenOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Device.CloudDataPath">
            <summary>
            Get the persistent data path, depending on the device
            </summary>
            <returns>A path to the persistent data folder</returns>
        </member>
        <member name="M:XKTools.Device.GetResolution">
            <summary>
            Get the resolution of the device
            </summary>
            <returns>Returns the resolution of the device (iPhone or iPad)</returns>
        </member>
        <member name="P:XKTools.Device.LastDeviceOrientation">
            <summary>
            Get the last screen orientation
            </summary>
        </member>
        <member name="M:XKTools.Device.GenerateUniqueIdentifier">
            <summary>
            Get an unique identifier for the app based on time
            </summary>
            <returns>A string that is the unique identifier</returns>
        </member>
        <member name="P:XKTools.Device.ScreenRatio">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Device.ScreenRatioMaximized">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Device.ScreenRatioMinimized">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.DontDestroyOnLoad">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.DontDestroyOnLoad.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Finder">
            <summary>
            Finds objects under hierarchy
            Avoids GameObject.Find
            </summary>
        </member>
        <member name="M:XKTools.Finder.FindParents(UnityEngine.GameObject)">
            <summary>
            Return the parent hierarchy of gameObject
            </summary>
            <param name="rootParent"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindRootParent(UnityEngine.Transform)">
            <summary>
            Return the parent root of the given transform
            </summary>
            <param name="child">the child we want to know the root parent of</param>
            <returns>The given child if it has no parent, its highest parent else</returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardStraight(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find a game object in hierarchy searching upward straight from parent node to parent node
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardStraight(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find a game object in hierarchy searching upward straight from parent node to parent node
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformUpwardStraight(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            /// Find a game object in hierarchy searching upward straight from parent node to parent node
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObject(UnityEngine.GameObject,System.String)">
            <summary>
            This funciton calls FindTransform with considerRoot = false
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObject(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObject(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransform(UnityEngine.Transform,System.String)">
            <summary>
            This function calls FindTransform with considerRoot = false
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindBrother(UnityEngine.Transform,System.String)">
            <summary>
            Find the given tr's brother of given name
            </summary>
            <param name="tr"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransform(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindInChildren(UnityEngine.Transform,System.String)">
            <summary>
            Find a transform in the direct children of the given rootParent
            </summary>
            <param name="rootParent">The parent that should be root of the wanted object</param>
            <param name="objName">The object name</param>
            <returns>the transform of the wanted child</returns>
        </member>
        <member name="M:XKTools.Finder.FindAllGameObjectsIn(UnityEngine.Transform)">
            <summary>
            Find all gameObject that are child or subChild of the given root
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponent``1(UnityEngine.GameObject,System.String)">
            <summary>
            Find a Component T on an object with name objName
            </summary>
            <param name="root"></param>
            <param name="objName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponent``1(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find a Component T on an object with name objName
            </summary>
            <param name="root"></param>
            <param name="objName"></param>
            <param name="considerRoot"> </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponent``1(UnityEngine.Transform,System.String)">
            <summary>
            Find a Component T on an object with name objName
            </summary>
            <param name="root"></param>
            <param name="objName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponent``1(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find a Component T on an object with name objName
            </summary>
            <param name="root"></param>
            <param name="objName"></param>
            <param name="considerRoot"> </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponent``1(System.String)">
            <summary>
            Find a Component T on an object with name objName
            </summary>
            <typeparam name="T">The type of Component you want to get</typeparam>
            <param name="objName">The name of the object you want to get the component of</param>
            <returns>The wanted component, or null if no obj of objName is found or if the wanted object does not have the component you want</returns>
        </member>
        <member name="M:XKTools.Finder.FindComponents``1(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="root"></param>
            <param name="objName"></param>
            <param name="includeInactive">even hidden ones</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponents``1(UnityEngine.Transform,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="root"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpward(UnityEngine.GameObject,System.String)">
            <summary>
            Find a game object in hierarchy searching upward considering every nodes of each level
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>            
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardStraight(UnityEngine.Transform,System.String)">
            <summary>
            Find a game object in hierarchy searching upward considering every nodes of each level
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>            
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformUpwardStraight(UnityEngine.Transform,System.String)">
            <summary>
            Find a game object in hierarchy searching upward considering every nodes of each level
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>            
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponentInDirectParents``1(UnityEngine.Transform)">
            <summary>
            Find a component in the direct parents of the given child
            </summary>
            <typeparam name="T">The type of Component we want to retrieve</typeparam>
            <param name="child">The child we want to find the component of one parent</param>
            <returns>The found component</returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectC(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find an object that contains the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find an object that contains the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find an object that contains the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindBrotherC(UnityEngine.Transform,System.String)">
            <summary>
            Find the given tr's brother of name containing given objName
            </summary>
            <param name="tr"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponentC``1(UnityEngine.GameObject,System.String)">
            <summary>
            Find a Component T on an object that contains the objName
            </summary>
            <param name="root"></param>
            <param name="objName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindComponentC``1(UnityEngine.Transform,System.String)">
            <summary>
            Find a Component T on an object that contains the objName
            </summary>
            <param name="root"></param>
            <param name="objName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardStraightC(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find a game object, that constains the objName, in hierarchy searching upward straight from parent node to parent node
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardStraightC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find a game object, that constains the objName, in hierarchy searching upward straight from parent node to parent node
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformUpwardStraightC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find a game object, that constains the objName, in hierarchy searching upward straight from parent node to parent node
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardC(UnityEngine.GameObject,System.String)">
            <summary>
            Find a game object, that constains the objName, in hierarchy searching upward considering every nodes of each level
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>            
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectUpwardStraightC(UnityEngine.Transform,System.String)">
            <summary>
            Find a game object, that constains the objName, in hierarchy searching upward considering every nodes of each level
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>            
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformUpwardStraightC(UnityEngine.Transform,System.String)">
            <summary>
            Find a game object, that constains the objName, in hierarchy searching upward considering every nodes of each level
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>            
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjects(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjects(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransforms(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectsC(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectsC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformsC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformsCA(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the active objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectsUpward(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName above root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectsUpward(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformsUpward(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectsUpwardC(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName above root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindGameObjectsUpwardC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindTransformsUpwardC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find objects that contains the objName under root parent
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.AddRoot(System.Object,UnityEngine.Transform)">
            <summary>
            Adds root objects for GUI, Managers, ...
            </summary>
            <param name="rootRef"></param>
            <param name="root"></param>
        </member>
        <member name="M:XKTools.Finder.RemoveRoot(System.Object)">
            <summary>
            Removes root objects for GUI, Managers, ...
            </summary>
            <param name="rootRef"></param>
        </member>
        <member name="M:XKTools.Finder.FindRoot(System.Object)">
            <summary>
            Finds root objects for GUI, Managers, ...
            </summary>
            <param name="rootRef"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.ClearRoots">
            <summary>
            Clear roots objects (refs on GUI, Managers, ...)
            </summary>
        </member>
        <member name="M:XKTools.Finder.PushToRoot(System.Object,UnityEngine.Transform)">
            <summary>
            
            </summary>
            <param name="rootRef"></param>
            <param name="obj"></param>
            <returns>Found root transform</returns>
        </member>
        <member name="M:XKTools.Finder.CreateRoot(System.Object)">
            <summary>
            
            </summary>
            <param name="rootRef"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.DestroyRoot(System.Object)">
            <summary>
            Destroys root object and its childs
            </summary>
            <param name="rootRef"></param>
        </member>
        <member name="M:XKTools.Finder.DestroyRootImmediate(System.Object)">
            <summary>
            Destroys root object and its childs
            </summary>
            <param name="rootRef"></param>
        </member>
        <member name="M:XKTools.Finder.CountNodesRecursively(UnityEngine.Transform)">
            <summary>
            This counts the nodes under t. It also count the root object t.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObject(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find an object that has the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Finds an object that contains the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjects(UnityEngine.Transform,System.String,System.Boolean,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Find objects that has the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.FindObjectsC(UnityEngine.Transform,System.String,System.Boolean,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Finds objects that contains the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.FindObjectsCA(UnityEngine.Transform,System.String,System.Boolean,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Finds objects that contains the objName
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.FindObjectUpward(UnityEngine.Transform,System.String)">
            <summary>
            Find an object that has the objName searching upward
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectUpwardStraight(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find an object that has the objName searching upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectUpwardStraight(UnityEngine.Transform,System.String)">
            <summary>
            Find an object that has the objName searching upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectUpwardC(UnityEngine.Transform,System.String)">
            <summary>
            Find an object that has the objName searching upward
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectUpwardStraightC(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            Find an object that has the objName searching upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectUpwardStraightC(UnityEngine.Transform,System.String)">
            <summary>
            Find an object that has the objName searching upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Finder.FindObjectsUpwardStraight(UnityEngine.Transform,System.String,System.Boolean,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Find objects that has the objName upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.FindObjectsUpwardStraight(UnityEngine.Transform,System.String,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Find objects that has the objName upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.FindObjectsUpwardStraightC(UnityEngine.Transform,System.String,System.Boolean,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Finds objects that contains the objName upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="considerRoot"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.FindObjectsUpwardStraightC(UnityEngine.Transform,System.String,System.Collections.Generic.List{UnityEngine.Transform}@)">
            <summary>
            Find objects that contains the objName upward straight
            </summary>
            <param name="rootParent"></param>
            <param name="objName"></param>
            <param name="transforms"></param>
        </member>
        <member name="M:XKTools.Finder.TransformListToGameObjects(System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Transforms a Transform list to a GameObject array
            </summary>
            <param name="transforms"></param>
        </member>
        <member name="T:XKTools.XKLog">
            <summary>
            Allows you to write logs in Unity with formatted text and importance
            </summary>
        </member>
        <member name="T:XKTools.XKLog.EColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.XKLog.EColor.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.XKLog.EColor.Yellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.XKLog.EColor.Red">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKLog.IsLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKLog.SetProjectName(System.String)">
            <summary>
            Setup the project name that will be displayed in the logs
            </summary>
            <param name="projName">The name of the projet</param>
        </member>
        <member name="M:XKTools.XKLog.EnableLogType``1(``0,System.Boolean)">
            <summary>
            Enables or disables log of given type
            </summary>
            <typeparam name="T">The type of log concerned (must be a value-type)</typeparam>
            <param name="type">The type of log concerned</param>
            <param name="b">If true, enables the given type of log, else disables</param>
        </member>
        <member name="M:XKTools.XKLog.EnableLogType(System.String,System.Boolean)">
            <summary>
            Enables or disables log of given type
            </summary>
            <param name="type">The type of log concerned</param>
            <param name="b">Enables or disables the type of log concerned</param>
        </member>
        <member name="M:XKTools.XKLog.IsLogTypeEnabled(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKLog.IsLogTypeEnabled``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String)">
            <summary>
            Log a single debug message
            </summary>
            <param name="str">The message you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Boolean)">
            <summary>
            Log a single debug message
            </summary>
            <param name="str">The message you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.String)">
            <summary>
            Log a message of given type
            </summary>
            <param name="type">The type of debug you want</param>
            <param name="str">The message you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.String,System.Boolean)">
            <summary>
            Log a message of given type
            </summary>
            <param name="type">The type of debug you want</param>
            <param name="str">The message you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.Log``1(``0,System.String)">
            <summary>
            Log a message of given type
            </summary>
            <typeparam name="T">The enum that references the types of log you may want</typeparam>
            <param name="type">The type of log you want</param>
            <param name="str">The message to display</param>
        </member>
        <member name="M:XKTools.XKLog.Log``1(``0,System.String,System.Boolean)">
            <summary>
            Log a message of given type
            </summary>
            <typeparam name="T">The enum that references the types of log you may want</typeparam>
            <param name="type">The type of log you want</param>
            <param name="str">The message to display</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.Collections.IList)">
            <summary>
            Log all the content of the given list
            </summary>
            <param name="list">The list that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log``1(``0,System.Collections.IList)">
            <summary>
            Log all the content of the given list in a message of a given type
            </summary>
            <typeparam name="T">The enum you use to define the type of log</typeparam>
            <param name="type">The wanted type of log</param>
            <param name="list">the list that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Collections.IList)">
            <summary>
            Log all the content of the given list in a message of a given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="list">the list that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Collections.IList,System.Boolean)">
            <summary>
            Log all the content of the given list in a message of a given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="list">the list that contains all you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.Array)">
            <summary>
            Log all the content of the given list
            </summary>
            <param name="list">The list that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log``1(``0,System.Array)">
            <summary>
            Log all the content of the given list in a message of a given type
            </summary>
            <typeparam name="T">The enum you use to define the type of log</typeparam>
            <param name="type">The wanted type of log</param>
            <param name="list">the list that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Array)">
            <summary>
            Log all the content of the given list in a message of a given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="list">the list that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Array,System.Boolean)">
            <summary>
            Log all the content of the given list in a message of a given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="list">the list that contains all you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.Collections.IDictionary)">
            <summary>
            Log all the content of the given table in a message of a given type
            </summary>
            <param name="table">The table that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log``1(``0,System.Collections.IDictionary)">
            <summary>
            Log all the content of the given table in a message of a given type
            </summary>
            <typeparam name="T">The enum you use to define the type of log</typeparam>
            <param name="type">The wanted type of log</param>
            <param name="table">The table that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Collections.IDictionary)">
            <summary>
            Log all the content of the given table in a message of a given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="table">The table that contains all you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Log all the content of the given table in a message of a given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="table">The table that contains all you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.Object)">
            <summary>
            Log an object
            </summary>
            <param name="obj">The object you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log``1(``0,System.Object)">
            <summary>
            Log an object in a message of the given type
            </summary>
            <typeparam name="T">The enum you use to define the type of log</typeparam>
            <param name="type">The wanted type of log</param>
            <param name="obj">the object you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Object)">
            <summary>
            Log an object in a message of the given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="obj">the object you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.Log(System.String,System.Object,System.Boolean)">
            <summary>
            Log an object in a message of the given type
            </summary>
            <param name="type">The wanted type of log</param>
            <param name="obj">the object you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.LogYellow(System.String)">
            <summary>
            Log an error message in yellow (warning for Unity)
            </summary>
            <param name="str">The message you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.LogYellow``1(``0,System.String)">
            <summary>
            Log a message of given type in yellow (warning for Unity)
            </summary>
            <typeparam name="T">the enum you use to define the type of log</typeparam>
            <param name="type">The type of log you want to display</param>
            <param name="str">the message you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.LogYellow(System.String,System.String)">
            <summary>
            Log a message of given type in yellow (warning for Unity)
            </summary>
            <param name="type">The type of log you want to display</param>
            <param name="str">the message you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.LogYellow(System.String,System.String,System.Boolean)">
            <summary>
            Log a message of given type in yellow (warning for Unity)
            </summary>
            <param name="type">The type of log you want to display</param>
            <param name="str">the message you want to log</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.LogRed(System.String)">
            <summary>
            Log an error message in red
            </summary>
            <param name="str">The message you want to log</param>
        </member>
        <member name="M:XKTools.XKLog.LogRed``1(``0,System.String)">
            <summary>
            Log an error message of given type in red
            </summary>
            <typeparam name="T">The enum you use to define the type of log</typeparam>
            <param name="type">The type of error you want to log</param>
            <param name="str">The message you want to display</param>
        </member>
        <member name="M:XKTools.XKLog.LogRed(System.String,System.String)">
            <summary>
            Log an error message of given type in red
            </summary>
            <param name="type">The type of error you want to log</param>
            <param name="str">The message you want to display</param>
        </member>
        <member name="M:XKTools.XKLog.LogRed(System.String,System.String,System.Boolean)">
            <summary>
            Log an error message of given type in red
            </summary>
            <param name="type">The type of error you want to log</param>
            <param name="str">The message you want to display</param>
            <param name="showTime"> </param>
        </member>
        <member name="M:XKTools.XKLog.SaveLogs(System.String,System.String)">
            <summary>
            Save the logged messages into a file
            </summary>
            <param name="name">The name of the file that will be created</param>
            <param name="title">The title of the log</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKLog.LogWithContext(System.String,System.String,System.Boolean,UnityEngine.Object)">
            <summary>
            Log a message of given type with context
            </summary>
            <param name="type">The type of debug you want</param>
            <param name="str">The message you want to log</param>
            <param name="showTime"> </param>
            <param name="context">The context to select when selecting log message</param>
        </member>
        <member name="M:XKTools.XKLog.LogWithContext(System.String,System.String,UnityEngine.Object)">
            <summary>
            Log a message of given type with context
            </summary>
            <param name="type">The type of debug you want</param>
            <param name="str">The message you want to log</param>
            <param name="context">The context to select when selecting log message</param>
        </member>
        <member name="M:XKTools.XKLog.LogYellowWithContext(System.String,System.String,UnityEngine.Object)">
            <summary>
            Log a message of given type with context
            </summary>
            <param name="type">The type of debug you want</param>
            <param name="str">The message you want to log</param>
            <param name="context">The context to select when selecting log message</param>
        </member>
        <member name="M:XKTools.XKLog.LogRedWithContext(System.String,System.String,UnityEngine.Object)">
            <summary>
            Log a message of given type with context
            </summary>
            <param name="type">The type of debug you want</param>
            <param name="str">The message you want to log</param>
            <param name="context">The context to select when selecting log message</param>
        </member>
        <member name="M:XKTools.XKLog.LB(System.String,System.Object[])">
            <summary>
            Log - No Boxing
            </summary>
            <param name="type"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBS(System.String,System.String[])">
            <summary>
            Log - No Boxing at all
            </summary>
            <param name="type"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBC(System.String,UnityEngine.Object,System.Object[])">
            <summary>
            Log with Context - No Boxing
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBCS(System.String,UnityEngine.Object,System.String[])">
            <summary>
            Log with Context - No Boxing at all
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBError(System.String,System.Object[])">
            <summary>
            Log - No Boxing - Error
            </summary>
            <param name="type"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBSError(System.String,System.String[])">
            <summary>
            Log - No Boxing - Error at all
            </summary>
            <param name="type"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBCError(System.String,UnityEngine.Object,System.Object[])">
            <summary>
            Log with Context - No Boxing - Error
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.LBCSError(System.String,UnityEngine.Object,System.String[])">
            <summary>
            Log with Context - No Boxing at all - Error
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.InternalLB(System.String,XKTools.XKLog.EColor,System.Boolean,UnityEngine.Object,System.Object[])">
            <summary>
            Log without boxing
            </summary>
            <param name="type"></param>
            <param name="color"></param>
            <param name="showTime"></param>
            <param name="context"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.InternalLBS(System.String,XKTools.XKLog.EColor,System.Boolean,UnityEngine.Object,System.String[])">
            <summary>
            Log without boxing
            </summary>
            <param name="type"></param>
            <param name="color"></param>
            <param name="showTime"></param>
            <param name="context"></param>
            <param name="objs"></param>
        </member>
        <member name="M:XKTools.XKLog.AddToString(System.Collections.IList,System.Text.StringBuilder,System.Int32)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="builder"></param>
            <param name="depth"></param>
        </member>
        <member name="M:XKTools.XKLog.AddToString(System.Array,System.Text.StringBuilder,System.Int32)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="builder"></param>
            <param name="depth"></param>
        </member>
        <member name="M:XKTools.XKLog.AddToString``1(System.Collections.Generic.IList{``0},System.Text.StringBuilder,System.Int32)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="builder"></param>
            <param name="depth"></param>
        </member>
        <member name="M:XKTools.XKLog.AddString``1(``0,System.Text.StringBuilder,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="builder"></param>
            <param name="depth"></param>
        </member>
        <member name="P:XKTools.XKLog.ProjectName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKLog.Serparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKLog.SerparatorSkipper">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKLog.LogAsString">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Matht">
            <summary>
            Mathematics functions
            </summary>
        </member>
        <member name="T:XKTools.Matht.EResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EResult.DontIntersect">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EResult.Intersect">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EResult.Parallel">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Matht.EQuadraticPolynomialResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EQuadraticPolynomialResult.InvalidPolynomial">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EQuadraticPolynomialResult.NoRoot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EQuadraticPolynomialResult.OneRoot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EQuadraticPolynomialResult.TwoRoots">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EQuadraticPolynomialResult.InfiniteNumberOfRoots">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Matht.EEloGameResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EEloGameResult.Win">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EEloGameResult.Lose">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EEloGameResult.Loose">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.EEloGameResult.Tie">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Matht.Cos15">
            <summary>
            return the cosine of 15 degree angle
            </summary>
        </member>
        <member name="F:XKTools.Matht.Cos30">
            <summary>
            return the cosine of 30 degree angle
            </summary>
        </member>
        <member name="F:XKTools.Matht.Cos45">
            <summary>
            return the cosine of 45 degree angle
            </summary>
        </member>
        <member name="F:XKTools.Matht.Cos60">
            <summary>
            return the cosine of 60 degree angle
            </summary>
        </member>
        <member name="M:XKTools.Matht.SegmentsIntersect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Checks whether two segments intersects with each other or not
            </summary>
            <param name="seg1StartX">The x coordinate of the point that begins the first segment</param>
            <param name="seg1StartY">The y coordinate of the point that begins the first segment</param>
            <param name="seg1EndX">The x coordinate of the point that ends the first segment</param>
            <param name="seg1EndY">The y coordinate of the point that ends the first segment</param>
            <param name="seg2StartX">The x coordinate of the point that begins the second segment</param>
            <param name="seg2StartY">The y coordinate of the point that begins the second segment</param>
            <param name="seg2EndX">The x coordinate of the point that ends the second segment</param>
            <param name="seg2EndY">The y coordinate of the point that ends the second segment</param>
            <param name="p">The precision to find parallel as result</param>
            <param name="x">If the two segments intersect, the x coordinate of the intersection point</param>
            <param name="y">If the two segments intersect, the y coordinate of the intersection point</param>
        </member>
        <member name="M:XKTools.Matht.SegmentsIntersect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2@)">
            <summary>
            Checks whether two segments intersects with each other or not
            </summary>
            <param name="seg1Start">The point that begins the first segment</param>
            <param name="seg1End">The point that ends the first segment</param>
            <param name="seg2Start">The point that begins the second segment</param>
            <param name="seg2End">The point that ends the second segment</param>
            <param name="p">The precision to find parallel as result</param>
            <param name="intersect">If the two segments intersect, the intersection point</param>
        </member>
        <member name="M:XKTools.Matht.SegmentsIntersectXZ(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@)">
            <summary>
            Checks whether two segments intersects with each other or not
            </summary>
            <param name="seg1Start">The point that begins the first segment</param>
            <param name="seg1End">The point that ends the first segment</param>
            <param name="seg2Start">The point that begins the second segment</param>
            <param name="seg2End">The point that ends the second segment</param>
            <param name="p">The precision to find parallel as result</param>
            <param name="intersect">If the two segments intersect, the intersection point</param>
        </member>
        <member name="M:XKTools.Matht.SegmentsIntersectXY(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@)">
            <summary>
            Checks whether two segments intersects with each other or not
            </summary>
            <param name="seg1Start">The point that begins the first segment</param>
            <param name="seg1End">The point that ends the first segment</param>
            <param name="seg2Start">The point that begins the second segment</param>
            <param name="seg2End">The point that ends the second segment</param>
            <param name="p">The precision to find parallel as result</param>
            <param name="intersect">If the two segments intersect, the intersection point</param>
        </member>
        <member name="M:XKTools.Matht.SegmentsIntersectYZ(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@)">
            <summary>
            Checks whether two segments intersects with each other or not
            </summary>
            <param name="seg1Start">The point that begins the first segment</param>
            <param name="seg1End">The point that ends the first segment</param>
            <param name="seg2Start">The point that begins the second segment</param>
            <param name="seg2End">The point that ends the second segment</param>
            <param name="p">The precision to find parallel as result</param>
            <param name="intersect">If the two segments intersect, the intersection point</param>
        </member>
        <member name="M:XKTools.Matht.SegmentsIntersect(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@)">
            <summary>
            Checks whether two segments intersects with each other or not
            </summary>
            <param name="seg1Start">The point that begins the first segment</param>
            <param name="seg1End">The point that ends the first segment</param>
            <param name="seg2Start">The point that begins the second segment</param>
            <param name="seg2End">The point that ends the second segment</param>
            <param name="p">The precision to find parallel as result</param>
            <param name="intersect">If the two segments intersect, the intersection point</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="cx">The x coordinate of the center of the circle</param>
            <param name="cy">The y coordinate of the center of the circle</param>
            <param name="r">The radius of the circle</param>
            <param name="x1">The x coordinate of the point that begins the segment</param>
            <param name="y1">The y coordinate of the point that begins the segment</param>
            <param name="x2">The x coordinate of the point that ends the segment</param>
            <param name="y2">The y coordinate of the point that ends the segment</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="cx">The x coordinate of the center of the circle</param>
            <param name="cy">The y coordinate of the center of the circle</param>
            <param name="r">The radius of the circle</param>
            <param name="x1">The x coordinate of the point that begins the segment</param>
            <param name="y1">The y coordinate of the point that begins the segment</param>
            <param name="x2">The x coordinate of the point that ends the segment</param>
            <param name="y2">The y coordinate of the point that ends the segment</param>
            <param name="i1x">The x coordinate of the first intersection point</param>
            <param name="i1y">The y coordinate of the first intersection point</param>
            <param name="i2x">The x coordinate of the second intersection point</param>
            <param name="i2y">The y coordinate of the second intersection point</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersect(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="segStart">The point that begins the segment</param>
            <param name="segEnd">The point that ends the segment</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersect(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="segStart">The point that begins the segment</param>
            <param name="segEnd">The point that ends the segment</param>
            <param name="inter1">The first intersection point</param>
            <param name="inter2">The second intersection point</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersectXZ(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="segStart">The point that begins the segment</param>
            <param name="segEnd">The point that ends the segment</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersectXZ(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="segStart">The point that begins the segment</param>
            <param name="segEnd">The point that ends the segment</param>
            <param name="inter1">The first intersection point</param>
            <param name="inter2">The second intersection point</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersectXY(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="segStart">The point that begins the segment</param>
            <param name="segEnd">The point that ends the segment</param>
        </member>
        <member name="M:XKTools.Matht.CircleSegmentIntersectXY(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Checks whether a circle intersects with a segment or not
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="segStart">The point that begins the segment</param>
            <param name="segEnd">The point that ends the segment</param>
            <param name="inter1">The first intersection point</param>
            <param name="inter2">The second intersection point</param>
        </member>
        <member name="M:XKTools.Matht.ParallelogramContainsPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks whether a parallelogram contains a point or not. The parallelogram is defined by two vectors PQ and PR.
            </summary>
            <param name="Px">The x coordinate of the P point</param>
            <param name="Py">The y coordinate of the P point</param>
            <param name="Qx">The x coordinate of the Q point</param>
            <param name="Qy">The y coordinate of the Q point</param>
            <param name="Rx">The x coordinate of the R point</param>
            <param name="Ry">The y coordinate of the R point</param>
            <param name="x">The x coordinate of the point to check</param>
            <param name="y">The y coordinate of the point to check</param>
        </member>
        <member name="M:XKTools.Matht.ParallelogramContainsPoint(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks whether a parallelogram contains a point or not. The parallelogram is defined by two vectors PQ and PR.
            </summary>
            <param name="P">The P point</param>
            <param name="Q">The Q point</param>
            <param name="R">The R point</param>
            <param name="A">The point to check</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.ParallelogramContainsPointXZ(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Checks whether a parallelogram contains a point or not. The parallelogram is defined by two vectors PQ and PR.
            </summary>
            <param name="P">The P point</param>
            <param name="Q">The Q point</param>
            <param name="R">The R point</param>
            <param name="A">The point to check</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.ParallelogramContainsPointXY(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Checks whether a parallelogram contains a point or not. The parallelogram is defined by two vectors PQ and PR.
            </summary>
            <param name="P">The P point</param>
            <param name="Q">The Q point</param>
            <param name="R">The R point</param>
            <param name="A">The point to check</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.IsInTriangle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Check if a point is contained in a triangle
            </summary>
            <param name="point">the point to test</param>
            <param name="vertexA">the first vertex of triangle</param>
            <param name="vertexB">the second vertex of triangle</param>
            <param name="vertexC">the third vertex of triangle</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.Cerp(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Cubic interpolation between y1 and y2
            </summary>
            <param name="y0">The previous point</param>
            <param name="y1">The from point</param>
            <param name="y2">The to point</param>
            <param name="y3">The next point</param>
            <param name="mu">The value to interpolate</param>
            <returns>The cerp</returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation01(System.Single,System.Single,System.Single)">
            <summary>
            Compute the value between 0 and 1 that will be between outMin and outMax
            </summary>
            <param name="inValue">The current value</param>
            <param name="outMin">The min value</param>
            <param name="outMax">The max value</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetMu(System.Single,System.Single,System.Single)">
            <summary>
            Compute the value between min and max that will be between 0 and 1 according to f
            Used to get a value for an interpolation.
            </summary>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="f">The current value</param>
            <returns>Mu</returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(System.Single,System.Single,System.Single)">
            <summary>
            Compute the value between min and max that will be between 0 and 1
            </summary>
            <param name="inValue">The current value</param>
            <param name="inMin">The min value</param>
            <param name="inMax">The max value</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation01(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Compute the value between 0 and 1 that will be between outMin and outMax
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Compute the value between min and max that will be between 0 and 1
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation01(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the value between 0 and 1 that will be between outMin and outMax
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the value between min and max that will be between 0 and 1
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation01XY(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the value between 0 and 1 that will be between outMin and outMax
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolationXY(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the value between min and max that will be between 0 and 1
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolationXY(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation01XZ(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the value between 0 and 1 that will be between outMin and outMax
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolationXZ(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the value between min and max that will be between 0 and 1
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolationXZ(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="inMin"></param>
            <param name="inMax"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolationRGB(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolation(UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.LinearInterpolationRGB(UnityEngine.Color,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="outMin"></param>
            <param name="outMax"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.Lerp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.Lerp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetSqrDistance(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean@,System.Single@,UnityEngine.Vector3@)">
            <summary>
            Square distance point-segment
            </summary>
            <param name="segStart">segment start</param>
            <param name="segEnd">segment end</param>
            <param name="point"></param>
            <param name="inSeg"> </param>
            <param name="ratio"> </param>
            <param name="projection"> </param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetDistance(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean@,System.Single@,UnityEngine.Vector3@)">
            <summary>
            Distance point-segment
            </summary>
            <param name="segStart">segment start</param>
            <param name="segEnd">segment end</param>
            <param name="point"></param>
            <param name="inSeg"> </param>
            <param name="ratio"> </param>
            <param name="projection"> </param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.SquareDist(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Get the square distance of two point
            </summary>
            <param name="x1">The x coordinate of the first point</param>
            <param name="y1">The y coordinate of the first point</param>
            <param name="x2">The x coordinate of the second point</param>
            <param name="y2">The y coordinate of the second point</param>
            <returns>The square distance</returns>
        </member>
        <member name="M:XKTools.Matht.SquareDistXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Get the square distance of two Vector3, based only on their X and Z composants
            </summary>
            <param name="from">The first vector</param>
            <param name="to">The second vector</param>
            <returns>The square distance based only on X and Z axis</returns>
        </member>
        <member name="M:XKTools.Matht.SquareDistXY(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Get the square distance of two Vector3, based only on their X and Y composants
            </summary>
            <param name="from">The first vector</param>
            <param name="to">The second vector</param>
            <returns>The square distance based only on X and Y axis</returns>
        </member>
        <member name="M:XKTools.Matht.AngleBetweenSegments(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute an angle between two lines, each of them defined by two points
            </summary>
            <param name="seg1Start">The start point of the first line</param>
            <param name="seg1End">The end point of the first line</param>
            <param name="seg2Start">The start point of the second line</param>
            <param name="seg2End">The end point of the second line</param>
            <returns>The angle between your two lines</returns>
        </member>
        <member name="M:XKTools.Matht.SmoothValue(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="currentValue"></param>
            <param name="wantedValue"></param>
            <param name="smoothCoef"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.SmoothAngle(System.Single,System.Single,System.Single)">
            <summary>
            Calculates an angle between your start angle and the angle to reach depending on the given coef
            </summary>
            <param name="startAngle">The start angle</param>
            <param name="angleToReach">The angle you want to reach</param>
            <param name="smoothCoef">The coef that indicates if we are near the start angle (0f) or the angle to reach (1f)</param>
            <returns>The resulted angle</returns>
        </member>
        <member name="M:XKTools.Matht.LimitAngleRange360(System.Single@)">
            <summary>
            Limit the given angle in a range between 0 and 360
            </summary>
            <param name="angle">The angle we want to limit the range</param>
        </member>
        <member name="M:XKTools.Matht.ComputeOrientedAngle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the oriented angle between the two given vectors
            </summary>
            <param name="from">The from vector</param>
            <param name="to">The to vector</param>
            <param name="up">The up vector</param>
            <returns>The oriented angle</returns>
        </member>
        <member name="M:XKTools.Matht.ComputeOrientedAngle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Compute the oriented angle between the two given vectors
            </summary>
            <param name="from">The from vector</param>
            <param name="to">The to vector</param>
            <returns>The oriented angle</returns>
        </member>
        <member name="M:XKTools.Matht.RotateRad(UnityEngine.Vector2,System.Single)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RotateDeg(UnityEngine.Vector2,System.Single)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RotateRadXY(UnityEngine.Vector3,System.Single)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RotateDegXY(UnityEngine.Vector3,System.Single)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RotateRadXZ(UnityEngine.Vector3,System.Single)">
            <summary>
            Z is the forward direction
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RotateDegXZ(UnityEngine.Vector3,System.Single)">
            <summary>
            Z is the forward direction
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetRotationRad(UnityEngine.Vector2)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetRotationDeg(UnityEngine.Vector2)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetRotationRadXY(UnityEngine.Vector3)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetRotationDegXY(UnityEngine.Vector3)">
            <summary>
            X is the forward direction
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetRotationRadXZ(UnityEngine.Vector3)">
            <summary>
            Z is the forward direction
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetRotationDegXZ(UnityEngine.Vector3)">
            <summary>
            Z is the forward direction
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RotateVector(UnityEngine.Vector3@,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotate a vector around an axe 
            </summary>
            <param name="v">The base vector</param>
            <param name="axe">The normal axe around which the vector will rotate</param>
            <param name="angle">The angle in degree</param>
            <returns>No return</returns>
        </member>
        <member name="M:XKTools.Matht.RotateVector(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotate a vector around an axe 
            </summary>
            <param name="v">The base vector</param>
            <param name="axe">The normal axe around which the vector will rotate</param>
            <param name="angle">The angle in degree</param>
            <returns>Return a new rotated Vector</returns>
        </member>
        <member name="M:XKTools.Matht.Perp(UnityEngine.Vector2)">
            <summary>
            Return a perpendicular vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.ScaleXY(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Matht.ScaleXY(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="f"></param>
        </member>
        <member name="M:XKTools.Matht.ScaleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Matht.ScaleXZ(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="f"></param>
        </member>
        <member name="M:XKTools.Matht.AddXY(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Matht.AddXY(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="f"></param>
        </member>
        <member name="M:XKTools.Matht.AddXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Matht.AddXZ(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="f"></param>
        </member>
        <member name="M:XKTools.Matht.SubstractXY(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Matht.SubstractXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Matht.ScaleRGB(UnityEngine.Color,System.Single)">
            <summary>
            Color multiplication without alpha channel
            </summary>
            <param name="c">Source color</param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.ScaleRGB(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Color multiplication without alpha channel
            </summary>
            <param name="a">Source color</param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.AddRGB(UnityEngine.Color,System.Single)">
            <summary>
            Color addition without alpha channel
            </summary>
            <param name="a">Source color</param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.AddRGB(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Color addition without alpha channel
            </summary>
            <param name="a">Source color</param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.SubstractRGB(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Color substraction without alpha channel
            </summary>
            <param name="a">Source color</param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.ConvertToGreyScale(UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="col">Source color</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.ClipToRect(UnityEngine.Vector2,UnityEngine.Rect)">
            <summary>
            Clip the segment defined by 'point' and the center of 'area' to 'area'.
            </summary>
            <param name="point">One extremity of the clipped segment</param>
            <param name="area">The area to clip the segment to</param>
            <returns>The furthest point from the center of 'area' that is on the segment described by the center of 'area' and 'point', but still in 'area'</returns>
        </member>
        <member name="M:XKTools.Matht.EloValuation(System.Int32,System.Int32)">
            <summary>
            Win probability
            </summary>
            <param name="elo"></param>
            <param name="eloAgainst"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.EloRateAddition(System.Int32,System.Int32,XKTools.Matht.EEloGameResult,System.Single)">
            <summary>
            Compute elo rate addition
            </summary>
            <param name="elo"> </param>
            <param name="eloAgainst"> </param>
            <param name="gameResult"></param>
            <param name="k">Speed coeficient. It can depend of player's elo (30 if player doesn't play 30 games, 15 if elo &#60; 2400 or 10 else)</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.EloRateAddition(System.Int32,System.Int32,XKTools.Matht.EEloGameResult,System.Single,System.Single@)">
            <summary>
            Compute elo rate addition
            </summary>
            <param name="elo"> </param>
            <param name="eloAgainst"> </param>
            <param name="gameResult"></param>
            <param name="k">Speed coeficient. It can depend of player's elo (30 if player doesn't play 30 games, 15 if elo &#60; 2400 or 10 else)</param>
            <param name="eloValuation">win probability</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.IsSameSign(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.Determinant(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Matht.Determinant(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Matht.LimitValue(System.Single,System.Single,System.Single)">
            <summary>
            Set limit to the given value
            </summary>
            <param name="value">The value you want to limit</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <returns>The result of the limit</returns>
        </member>
        <member name="M:XKTools.Matht.SupOrEgalPow2(System.Int32)">
            <summary>
            Get the smallest power of 2 superior or equals to the given parameter
            </summary>
            <param name="n">The value you want the smallest power of 2 superior or equals to</param>
            <returns>Return the smallest power of 2 superior or equals to n</returns>
        </member>
        <member name="M:XKTools.Matht.IsBetween(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Check if a point is between two others
            </summary>
            <param name="v">The point to test</param>
            <param name="c1">The first reference point</param>
            <param name="c2">The second reference point</param>
            <param name="p">The precision</param>
        </member>
        <member name="M:XKTools.Matht.MoreOrLessEquals(System.Single,System.Single)">
            <summary>
            Check if the two given values ar more or less equals with 0.001f of difference allowed
            </summary>
            <param name="a">The first value you want to test</param>
            <param name="b">The second value you want to test</param>
            <returns>Returns true if the two values ar more or less equals</returns>
        </member>
        <member name="M:XKTools.Matht.MoreOrLessEquals(System.Single,System.Single,System.Single)">
            <summary>
            Check if the two given values ar more or less equals depending on the given delta
            </summary>
            <param name="a">The first value you want to test</param>
            <param name="b">The second value you want to test</param>
            <param name="delta">The max allowed difference between the two values</param>
            <returns>Returns true if the two values ar more or less equals</returns>
        </member>
        <member name="M:XKTools.Matht.MoreOrLessEquals(System.Double,System.Double)">
            <summary>
            Check if the two given values ar more or less equals with 0.001f of difference allowed
            </summary>
            <param name="a">The first value you want to test</param>
            <param name="b">The second value you want to test</param>
            <returns>Returns true if the two values ar more or less equals</returns>
        </member>
        <member name="M:XKTools.Matht.MoreOrLessEquals(System.Double,System.Double,System.Double)">
            <summary>
            Check if the two given values ar more or less equals depending on the given delta
            </summary>
            <param name="a">The first value you want to test</param>
            <param name="b">The second value you want to test</param>
            <param name="delta">The max allowed difference between the two values</param>
            <returns>Returns true if the two values ar more or less equals</returns>
        </member>
        <member name="M:XKTools.Matht.MoreOrLessEquals(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Check if the two given vectors ar more or less equals with 0.001f of distance allowed
            </summary>
            <param name="u">The first vector you want to test</param>
            <param name="v">The second vector you want to test</param>
            <returns>Returns true if the two vectors ar more or less equals</returns>
        </member>
        <member name="M:XKTools.Matht.MoreOrLessEquals(UnityEngine.Vector3,UnityEngine.Vector3,System.Double)">
            <summary>
            Check if the two given vectors ar more or less equals depending on the given delta
            </summary>
            <param name="u">The first vector you want to test</param>
            <param name="v">The second vector you want to test</param>
            <param name="delta">The max allowed distance between the two vectors</param>
            <returns>Returns true if the two vectors ar more or less equals</returns>
        </member>
        <member name="M:XKTools.Matht.AreNearXY(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Check if the given positions are near depending on the given minimum square distance on X and Y axis
            </summary>
            <param name="v1">The first Vector3 to test</param>
            <param name="v2">The second Vector3 to test</param>
            <param name="minSqrDist">The minimum square distance</param>
            <returns>True if the two given positions are near</returns>
        </member>
        <member name="M:XKTools.Matht.AreNearXZ(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Check if the given positions are near depending on the given minimum square distance on X and Z axis
            </summary>
            <param name="v1">The first Vector3 to test</param>
            <param name="v2">The second Vector3 to test</param>
            <param name="minSqrDist">The minimum square distance</param>
            <returns>True if the two given positions are near</returns>
        </member>
        <member name="M:XKTools.Matht.IsInLeftSide(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Check if the point is in left half space slice by a line
            </summary>
            <param name="a">First point that define the line</param>
            <param name="b">Second point that define the line</param>
            <param name="p">The point to test</param>
            <returns>positive if the point is in left side, null if the point is on the line and negative if the point is in right side</returns>
        </member>
        <member name="M:XKTools.Matht.Factorial(System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.GetLineEquationCoef(UnityEngine.Vector2,UnityEngine.Vector2,System.Single@,System.Single@)">
            <summary>
            Get the coefficients of a line equation :
            y = a*x + b
            </summary>
            <param name="pointA">first point of a line</param>
            <param name="pointB">second point of a line</param>
            <param name="a">Computed coefficient a</param>
            <param name="b">Computed coefficient b</param>
        </member>
        <member name="M:XKTools.Matht.Abs(System.Double)">
            <summary>
            Get the absolute value from a double
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.Slerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates Slerp between a and b by t. t is clamped between 0 and 1.
            </summary>
            <param name="from">the start value</param>
            <param name="to">the end value</param>
            <param name="t">the time param</param>
            <returns>the slerped value</returns>
        </member>
        <member name="M:XKTools.Matht.RoundToInt(System.Single)">
            <summary>
            Round the float f to the nearest integer. If the number ends in 0.5f, rounds to the next greatest integer.
            I.E. 1.5f will be rounded to 2
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.RoundDownToInt(System.Single)">
            <summary>
            Round the float f to the nearest integer. If the number ends in 0.5f, rounds to the next smallest integer.
            I.E. 1.5f will be rounded to 1
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Matht.SolveQuadraticPolynomialRoots(System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Compute the real roots of a quadratic polynomial whose formula is 'a'*x*x + 'b'*x + 'c'.
            If delta is strictly negative, both 'x1' and 'x2' are NaN. 
            If delta = 0, 'x1' and 'x2' both have the value of the unique root.
            Else, delta is strictly negative and it is ensured that 'x1' is smaller than 'x2'.
            </summary>
            <param name="a">First coefficient of the polynomial</param>
            <param name="b">Second coefficient of the polynomial</param>
            <param name="c">Third coefficient of the polynomial</param>
            <param name="x1">The first root. Always valid except when returned value is EQuadraticPolynomialResult.InvalidPolynomial.</param>
            <param name="x2">The second root. Always valid except when returned value is EQuadraticPolynomialResult.InvalidPolynomial.</param>
            <returns>Either:
            - EQuadraticPolynomialResult.InfiniteNumberOfRoots when equation is 0 = 0,
            - EQuadraticPolynomialResult.InvalidPolynomial when equation is c = 0 with c != 0,
            - EQuadraticPolynomialResult.NoRoot when delta is strictly negative,
            - EQuadraticPolynomialResult.OneRoot when 'a' or delta is nul, or
            - EQuadraticPolynomialResult.TwoRoots when delta is strictly positive.</returns>
        </member>
        <member name="M:XKTools.Matht.AdjustIdx(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="step"></param>
            <param name="currentIdx"></param>
            <param name="maxIdx"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Lehmer">
            <summary>
            Generates pseudo random numbers based on the Lehmer standard minimal algrithm, sometimes also referred to as the Park–Miller random number generator
            https://en.wikipedia.org/wiki/Lehmer_random_number_generator
            </summary>
        </member>
        <member name="F:XKTools.Lehmer.c_MultipliantTerm">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Lehmer.c_Mod">
            <summary>n = 2^31 − 1 = 2 147 483 647 </summary>
        </member>
        <member name="P:XKTools.Lehmer.IntValue">
            <summary>
            Generates a new pseudo random integer value
            </summary>
        </member>
        <member name="P:XKTools.Lehmer.FloatValue">
            <summary>
            Generates a new pseudo random floating value between 0 and 1 (both included)
            </summary>
        </member>
        <member name="M:XKTools.Lehmer.Range(System.Int32,System.Int32)">
            <summary>
            Generates a new pseudo random integer value between min and max (min included, max excluded)
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Lehmer.Range(System.Single,System.Single)">
            <summary>
            Generates a new pseudo random floating value between min and max (both included)
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Lehmer.PushSeed">
            <summary>
            Stacks current seed value, can be restored by calling PopStack()
            </summary>
        </member>
        <member name="M:XKTools.Lehmer.PopStack">
            <summary>
            Reverts the seed to the state at the last PushSeed() call
            </summary>
        </member>
        <member name="P:XKTools.Lehmer.Seed">
            <summary>
            Provides the current seed
            </summary>
        </member>
        <member name="T:XKTools.Rand">
            <summary>
            Random stuff
            </summary>
            <remarks>
            Uses Georg Marsaglia's MWC algorithm to produce an unsigned integer.
            See http://www.bobwheeler.com/statistics/Password/MarsagliaPost.txte
            </remarks>
        </member>
        <member name="M:XKTools.Rand.SetSeed(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="seedA"></param>
            <param name="seedB"></param>
        </member>
        <member name="M:XKTools.Rand.GetSeed(System.UInt32@,System.UInt32@)">
            <summary>
            
            </summary>
            <param name="seedA"></param>
            <param name="seedB"></param>
        </member>
        <member name="M:XKTools.Rand.GetRandomNumber">
            <summary>
            Compute a random float number between 0 and 1
            </summary>
            <returns>The random number</returns>
        </member>
        <member name="M:XKTools.Rand.GetRandomNumber(System.Single,System.Single)">
            <summary>
            Compute a random float number between bounds
            </summary>
            <param name="lowerBound">The lower bound</param>
            <param name="upperBound">The upper bound</param>
            <returns>The random number</returns>
        </member>
        <member name="M:XKTools.Rand.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Compute a random integer between bounds
            </summary>
            <param name="lowerBound">The lower bound</param>
            <param name="upperBound">The upper bound</param>
            <returns>The random number</returns>
        </member>
        <member name="T:XKTools.Recycler">
            <summary>
            Recycles objects, such as lists intpair or anything that would feed the garbage collector
            <remarks>no automatic reset is made on recycled objects default values so lists must be cleared etc.</remarks>
            </summary>
        </member>
        <member name="F:XKTools.Recycler.s_RecycledObjects">
            <summary>
            Recycled objects container
            </summary>
        </member>
        <member name="M:XKTools.Recycler.Log">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Recycler.Create``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Recycler.Return``1(``0)">
            <summary>
            Lists must be cleared before getting returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:XKTools.Recycler.ReturnList``1(System.Collections.Generic.List{``0},System.Boolean,System.Boolean)">
            <summary>
            Clears the list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objLst"></param>
            <param name="recycleContent"></param>
            <param name="recycleList"></param>
        </member>
        <member name="M:XKTools.Recycler.ReturnXK``1(``0)">
            <summary>
            Lists must be cleared before getting returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:XKTools.Recycler.ReturnListXK``1(System.Collections.Generic.List{``0},System.Boolean,System.Boolean)">
            <summary>
            Clears the list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objLst"></param>
            <param name="recycleContent"></param>
            <param name="recycleList"></param>
        </member>
        <member name="M:XKTools.Recycler.GetRecyclementStack``1">
            <summary>
            Creates the list if it does not exists yet
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XKTools.ThreadedJob">
            <summary>
            Base class for threaded operations.
            Found at http://answers.unity3d.com/questions/357033/unity3d-and-c-coroutines-vs-threading.html
            </summary>
        </member>
        <member name="P:XKTools.ThreadedJob.IsDone">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ThreadedJob.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ThreadedJob.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ThreadedJob.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ThreadedJob.ThreadFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ThreadedJob.OnFinished">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ThreadedJob.Update">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Web">
            <summary>
            Deals with network and web
            </summary>
        </member>
        <member name="T:XKTools.Web.EError">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Web.EError.ErrorURL">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Web.EError.ErrorTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Web.EError.ErrorNetwork">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Web.SUrl">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Web.SUrl.Url">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Web.SUrl.Params">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Web.WWWData">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.TimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.NbCall">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.Succeed">
            <summary>
            Succeed callback
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.Failed">
            <summary>
            Failed callback
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.Loading">
            <summary>
            Loading callback - called each frame to notify about the progress of the loading
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWData.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWData.#ctor(System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="succeed"></param>
            <param name="failed"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:XKTools.Web.WWWData.#ctor(System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[],System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="succeed"></param>
            <param name="failed"></param>
            <param name="parameters"></param>
            <param name="nbCall"> </param>
            <param name="timeOut"> </param>
        </member>
        <member name="M:XKTools.Web.WWWData.#ctor(System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[],System.Int32,System.Single,System.Action{System.Single})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="succeed"></param>
            <param name="failed"></param>
            <param name="parameters"></param>
            <param name="nbCall"> </param>
            <param name="timeOut"> </param>
            <param name="loading"> </param>
        </member>
        <member name="T:XKTools.Web.WWWDataUrl">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataUrl.#ctor(System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataUrl.#ctor(System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[],System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataUrl.#ctor(System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[],System.Int32,System.Single,System.Action{System.Single})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="succeed"></param>
            <param name="failed"></param>
            <param name="parameters"></param>
            <param name="nbCall"></param>
            <param name="timeOut"></param>
            <param name="loading"></param>
        </member>
        <member name="T:XKTools.Web.WWWDataForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWDataForm.Form">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataForm.#ctor(System.String,UnityEngine.WWWForm,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataForm.#ctor(System.String,UnityEngine.WWWForm,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[],System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Web.WWWDataHeader">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWDataHeader.Header">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Web.WWWDataHeader.Datas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataHeader.#ctor(System.String,System.Collections.Hashtable,System.Byte[],XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.WWWDataHeader.#ctor(System.String,System.Collections.Hashtable,System.Byte[],XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[],System.Int32,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Web.CallBackWWWHandler">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:XKTools.Web.CallBackWWWSucceed">
            <summary>
            
            </summary>
            <param name="www"></param>
            <param name="list"></param>
        </member>
        <member name="T:XKTools.Web.CallBackWWWFailed">
            <summary>
            
            </summary>
            <param name="error"> </param>
            <param name="list"></param>
        </member>
        <member name="F:XKTools.Web.OnWWWSucceed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Web.OnWWWFailed">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Web.CallWWW(UnityEngine.MonoBehaviour,System.String,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            Try to contact the given url from a script with two callbacks: a succeed and a failed callback
            </summary>
            <param name="script">The script which wants to call the url</param>
            <param name="url">The wanted url</param>
            <param name="endDownload">The CallBackSuccess</param>
            <param name="error">The CallBackFailed</param>
            <param name="list">The parameters to send to the url</param>
        </member>
        <member name="M:XKTools.Web.CallWWW(UnityEngine.MonoBehaviour,System.String,UnityEngine.WWWForm,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            Try to contact the given url from a script with two callbacks: a succeed and a failed callback
            </summary>
            <param name="script">The script which wants to call the url</param>
            <param name="url">The wanted url</param>
            <param name="form">The form to add to the call</param>
            <param name="endDownload">The CallBackSuccess</param>
            <param name="error">The CallBackFailed</param>
            <param name="list">The parameters to send to the url</param>
        </member>
        <member name="M:XKTools.Web.CallWWW(UnityEngine.MonoBehaviour,System.String,System.Byte[],System.Collections.Hashtable,XKTools.Web.CallBackWWWSucceed,XKTools.Web.CallBackWWWFailed,System.Object[])">
            <summary>
            Try to contact the given url from a script with two callbacks: a succeed and a failed callback
            </summary>
            <param name="script">The script which wants to call the url</param>
            <param name="url">The wanted url</param>
            <param name="data">Some additional datas</param>
            <param name="header">The header of the request</param>
            <param name="endDownload">The CallBackSuccess</param>
            <param name="error">The CallBackFailed</param>
            <param name="list">The parameters to send to the url</param>
        </member>
        <member name="M:XKTools.Web.CallWWW(UnityEngine.MonoBehaviour,XKTools.Web.WWWData)">
            <summary>
            Try to contact a network thanks to the WWWData given in parameter
            </summary>
            <param name="script">The script which wants to call the url</param>
            <param name="wwwData">The built WWWDate</param>
        </member>
        <member name="M:XKTools.Web.CallWWW(UnityEngine.MonoBehaviour,XKTools.Web.WWWData,System.Boolean)">
            <summary>
            Try to contact a network thanks to the WWWData given in parameter
            </summary>
            <param name="script">The script which wants to call the url</param>
            <param name="wwwData">The built WWWDate</param>
            <param name="noWait">Indicates whether we want to wait for the response or not</param>
        </member>
        <member name="M:XKTools.Web.WWWCoroutine(UnityEngine.MonoBehaviour,XKTools.Web.WWWData)">
            <summary>
            Try to contact a network thanks to the WWWData given in parameter
            </summary>
            <param name="script">The script which wants to call the url</param>
            <param name="wwwData">The built WWWDate</param>
        </member>
        <member name="M:XKTools.Web.ToNumericIp(System.String)">
            <summary>
            Converts a string ipaddress to an unsigned integer
            </summary>
            <param name="ipAddress">The string to convert to an ip address uint</param>
            <returns>Returns an unsigned integer that is the resulted ipAddress</returns>
        </member>
        <member name="M:XKTools.Web.ComputeUrl(System.String)">
            <summary>
            Compute URL and parameters according to the given string
            </summary>
            <param name="url">The url you want to compute</param>
            <returns>A SUrl struct that contains the url and the parameters</returns>
        </member>
        <member name="M:XKTools.Web.FindUrlParam(System.String,System.String)">
            <summary>
            Find the wanted parameter in the given url
            </summary>
            <param name="url">The url you want to analyze</param>
            <param name="param">The parameter you want to find</param>
            <returns>The value of the parameter if found</returns>
        </member>
        <member name="M:XKTools.Web.EncodeHtml(System.String)">
            <summary>
            Encodes a text to an HTML text (especially encoding html special chars)
            </summary>
            <param name="text">The text to encode</param>
            <returns>The encoded text</returns>
        </member>
        <member name="M:XKTools.Web.DecodeHtml(System.String)">
            <summary>
            Decodes the given HTML text (especially decoding html special chars
            </summary>
            <param name="text">The text to decode</param>
            <returns>The decoded text</returns>
        </member>
        <member name="T:XKTools.XKScene">
            <summary>
            Deals with the scene, operations on layers, game objects...
            </summary>
        </member>
        <member name="M:XKTools.XKScene.SetPhysicLayer(System.String,System.Int32)">
            <summary>
            Register a physic's layer with its name and its ID
            </summary>
            <param name="name">The name of the layer that will allow to retrieve it easily</param>
            <param name="layer">The ID of the layer</param>
        </member>
        <member name="M:XKTools.XKScene.SetLayerRecursively(UnityEngine.Transform,System.String)">
            <summary>
            Set the given Transform and all its children to the given layer
            </summary>
            <param name="t">The parent transform you want to change the layer</param>
            <param name="lyr">The name of the layer you want to apply to the transform</param>
        </member>
        <member name="M:XKTools.XKScene.SetLayerRecursively(UnityEngine.Transform,System.Int32)">
            <summary>
            Set the given Transform and all its children to the given layer
            </summary>
            <param name="t">The parent transform you want to change the layer</param>
            <param name="lyr">The layer you want to apply to the transform</param>
        </member>
        <member name="M:XKTools.XKScene.SetLayerRecursively(UnityEngine.Transform,System.Int32,System.String)">
            <summary>
            Set the given Transform and all its children to the given layer
            </summary>
            <param name="t">The parent transform you want to change the layer</param>
            <param name="lyr">The layer you want to apply to the transform</param>
            <param name="contains">changes the layer of objects who's name containing "contains" only</param>
        </member>
        <member name="M:XKTools.XKScene.SetStaticRecursively(UnityEngine.Transform,System.Boolean)">
            <summary>
            Set the given Transform and all its children to static
            </summary>
            <param name="t">The parent transform you want to change the layer</param>
            <param name="s">the static property to be set</param>
        </member>
        <member name="M:XKTools.XKScene.ShowRecursively(UnityEngine.Transform,System.Boolean)">
            <summary>
            Activate or deactivate the renderers of the given transform and its children
            </summary>
            <param name="t">The transform you want to display or hide</param>
            <param name="shown">Indicates whether you want to display or to hide the given transform</param>
        </member>
        <member name="M:XKTools.XKScene.SetAlphaRecursively(UnityEngine.Transform,System.Single)">
            <summary>
            Make a transform and its children transparent or opaque according to the alpha parameter
            </summary>
            <param name="t">The root transform you want to affect</param>
            <param name="alpha">The alpha coefficient (between 0f and 1f)</param>
        </member>
        <member name="M:XKTools.XKScene.SetRenderQueueRecursively(UnityEngine.Transform,System.Int32)">
            <summary>
            Set the RenderQueue of the material of the given root and its children, increasing the queue at each level
            </summary>
            <param name="root">The root you want to change the renderQueue</param>
            <param name="queue">The wanted render queue</param>
        </member>
        <member name="M:XKTools.XKScene.ActivateRendererRecursively(UnityEngine.Transform,System.Boolean)">
            <summary>
            Activate the renderer of the root and all its children
            </summary>
            <param name="root">The root we want to activate the renderers of</param>
            <param name="b">Activate or deactivate the renderer</param>
        </member>
        <member name="M:XKTools.XKScene.AdaptBoxColliderToRenderer(UnityEngine.BoxCollider,UnityEngine.Renderer)">
            <summary>
            Adapt the collider to fit to the given renderer - the renderer must be direct child of the collider
            </summary>
            <param name="collider">The collider to set up</param>
            <param name="renderer">The renderer that will be the reference to setup the collider</param>
        </member>
        <member name="M:XKTools.XKScene.DontDestroyOnLoadRecursivelyDownTop(UnityEngine.Transform)">
            <summary>
            Avoid the given transform and its parents to be destroyed when going to a new scene
            </summary>
            <param name="t">The transform you want to keep between the scenes</param>
        </member>
        <member name="M:XKTools.XKScene.Destroy(UnityEngine.GameObject)">
            <summary>
            Destroy the given object and release memory
            </summary>
            <param name="obj">The gameObject to detroy</param>
        </member>
        <member name="M:XKTools.XKScene.DuplicateGameObject(UnityEngine.GameObject)">
            <summary>
            Duplicate the given GameObject, and set the duplicata to the same localPosition, localRotation, localScale and under the same parent
            </summary>
            <param name="originalGO">The GameObject to duplicate</param>
            <returns>The duplicata</returns>
        </member>
        <member name="M:XKTools.XKScene.CopyTransformProperties(UnityEngine.Transform,UnityEngine.Transform,System.Boolean)">
            <summary>
            Copy the transform properties of the from to the to
            </summary>
            <param name="from">The transform we want to copy the properties from</param>
            <param name="to">The transform we want to apply the properties to</param>
            <param name="copyParent"></param>
        </member>
        <member name="M:XKTools.XKScene.SetParent(UnityEngine.Transform,UnityEngine.Transform,System.Boolean)">
            <summary>
            Set the parent of a transform
            </summary>
            <param name="t">The transform we want to set the parent</param>
            <param name="parent">The wanted parent of the given transform</param>
            <param name="keepLocalTransformations">Should we keep the local transformations</param>
        </member>
        <member name="M:XKTools.XKScene.GiveChildrenToTransform(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Change parent for the children of the first given Transform
            </summary>
            <param name="parentOrigin">The parent of the transforms we want to change the parent</param>
            <param name="targetParent">The new parent of the transforms</param>
        </member>
        <member name="M:XKTools.XKScene.FindGameObjectComponent``1(System.String)">
            <summary>
            Get a component of type T on the GameObject retrieved thanks to its name
            </summary>
            <typeparam name="T">The type of component you want to retrieve (must be a Component)</typeparam>
            <param name="name">The name of the GameObject you want to find the component on</param>
            <returns>The component</returns>
        </member>
        <member name="M:XKTools.XKScene.FindGameObject(System.String)">
            <summary>
            Find in the scene the GameObject of name given in parameter
            </summary>
            <param name="name">The name of the wanted GameObject</param>
            <returns>The wanted GameObject</returns>
        </member>
        <member name="M:XKTools.XKScene.CheckAssertion(UnityEngine.Object,System.String)">
            <summary>
            This very fuctions checks object validity and logs an error if it's not
            </summary>
            <param name="obj"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKScene.CheckAssertion(UnityEngine.Object,System.String,System.Boolean)">
            <summary>
            This very fuctions checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="obj"></param>
            <param name="msg"></param>
            <param name="debugBreak"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKScene.CheckAssertion(System.Object,System.String)">
            <summary>
            This very fuctions checks object validity and logs an error if it's not
            </summary>
            <param name="obj"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKScene.CheckAssertion(System.Object,System.String,System.Boolean)">
            <summary>
            This very fuctions checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="obj"></param>
            <param name="msg"></param>
            <param name="debugBreak"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKScene.CheckAssertion(System.Boolean,System.String)">
            <summary>
            This very fuctions checks object validity and logs an error if it's not
            </summary>
            <param name="b"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKScene.CheckAssertion(System.Boolean,System.String,System.Boolean)">
            <summary>
            This very fuctions checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="b"></param>
            <param name="msg"></param>
            <param name="debugBreak"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.XKTimeCounter">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.XKTimeCounter.TimeCounterDlg">
            <summary>
            
            </summary>
            <param name="value">Evolves from 0 to infinite</param>
        </member>
        <member name="M:XKTools.XKTimeCounter.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKTimeCounter.StartCounter(System.Single)">
            <summary>
            Updates a timer and sends event through SetValue(float value), value evolves between startTime and infinite
            </summary>
            <param name="startTime">Time to start from</param>
        </member>
        <member name="M:XKTools.XKTimeCounter.StopCounter">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKTimeCounter.CurrentTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKTimeCounter.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKTimeCounter.SetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKTimeCounter.OnEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ETimerStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ETimerStyle.Linear">
            <summary></summary>
        </member>
        <member name="F:XKTools.ETimerStyle.Square">
            <summary></summary>
        </member>
        <member name="F:XKTools.ETimerStyle.SquareRoot">
            <summary></summary>
        </member>
        <member name="T:XKTools.XKTimer">
            <summary>
            Note that this XKTimer starts inactive
            </summary>
        </member>
        <member name="T:XKTools.XKTimer.SetValueDlg">
            <summary>
            
            </summary>
            <param name="value">Evolves from 1 to 0</param>
        </member>
        <member name="T:XKTools.XKTimer.OnEndDlg">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKTimer.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKTimer.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKTimer.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKTimer.StartTimer(System.Single,XKTools.ETimerStyle,System.Boolean)">
            <summary>
            Updates a timer and sends event through SetValue(float value), value evolves between 0 and 1 depending on growValue parameter
            </summary>
            <param name="time">Time to end timer (OnEnd() will be called)</param>
            <param name="style">Linear, Sqrt, etc.</param>
            <param name="growValue">The T value will go from 0 to 1 if true, from 1 to 0 otherwise</param>
        </member>
        <member name="M:XKTools.XKTimer.StopTimer(System.Boolean)">
            <summary>
            
            </summary>
            <param name="callOnEnd"></param>
        </member>
        <member name="P:XKTools.XKTimer.SetValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKTimer.OnEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ConfigureInteractiveCloth">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ConfigureInteractiveCloth.m_Tearable">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ConfigureInteractiveCloth.m_TwoWayInteraction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ConfigureInteractiveCloth.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ObjectProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ObjectProps.ObjectPropModifier">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:XKTools.ObjectProps.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ObjectProps.#ctor(System.String,System.String,XKTools.ObjectProps.ObjectPropModifier)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="modifier"></param>
        </member>
        <member name="P:XKTools.ObjectProps.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ObjectProps.Prefix">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ObjectProps.Modifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ObjectProps.Node">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ObjectProps.Suffix">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ObjectProps.IsBreaker">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ObjectProps.CompareTo(XKTools.ObjectProps)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Localization">
            <summary>
            Load the current language according to Application.systemLanguage.
            If the current language does not exist, default english will be loaded.
            If you want to test some specific language, use LoadLanguage() function.
            </summary>
        </member>
        <member name="T:XKTools.Localization.ECharSituation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.ECharSituation.eIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.ECharSituation.eInitial">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.ECharSituation.eMedial">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.ECharSituation.eFinal">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Localization.EMissingTextBehaviour">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.EMissingTextBehaviour.KeepEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.EMissingTextBehaviour.DisplayKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.EMissingTextBehaviour.DefaultString">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Localization.OnLoadLanguageDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Localization.OnLoadLanguage">
            <summary>
            Called when a new language is loaded
            </summary>
        </member>
        <member name="M:XKTools.Localization.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.ReverseLatinCharsInArabicString(System.String)">
            <summary>
            
            </summary>
            <param name="str">source text</param>
        </member>
        <member name="M:XKTools.Localization.TransformArabicString(System.String,System.Boolean)">
            <summary>
            returns an array of 3 strings
            string[0] is the text
            string[1] and string[2] are the diacritics
            </summary>
            <param name="str">source text</param>
            <param name="addToCharset"></param>
            <returns>An array of 3 strings</returns>
        </member>
        <member name="M:XKTools.Localization.FormatArabicString(System.String,UnityEngine.GUIStyle,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="txt">source text</param>
            <param name="style">rendering style</param>
            <param name="rectWidth">max display rectangle width</param>
            <param name="maxChar">max char per line</param>
            <returns>A list of formatted string</returns>
        </member>
        <member name="M:XKTools.Localization.FormatArabicStringAsOneString(System.String,UnityEngine.GUIStyle,System.Single,System.Int32)">
            <summary>
            FormatArabicString
            ReverseLines
            ReverseLatinCharsInArabicString
            </summary>
            <param name="txt">source text</param>
            <param name="style">rendering style</param>
            <param name="rectWidth">max display rectangle width</param>
            <param name="maxChar">max char per line</param>
            <returns>A formatted string</returns>
        </member>
        <member name="M:XKTools.Localization.UpdateBMFCFiles">
            <summary>
            Read bmfc file and add chars we need to use in the localization
            </summary>
        </member>
        <member name="M:XKTools.Localization.GetLanguageAsSystemLanguage">
            <summary>
            
            </summary>
            <returns>Current application language</returns>
        </member>
        <member name="M:XKTools.Localization.GetLanguage">
            <summary>
            
            </summary>
            <returns>Current application language</returns>
        </member>
        <member name="M:XKTools.Localization.GetLocalizedText(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="textId">TextID set in Language.xml</param>
            <param name="localizedText">Localized text according to textID</param>
            <returns>True if the text is known in the table</returns>
        </member>
        <member name="M:XKTools.Localization.GetLocalizedText(System.String)">
            <summary>
            
            </summary>
            <param name="textId">TextID set in Language.xml</param>
            <returns>Localized text according to textID</returns>
        </member>
        <member name="M:XKTools.Localization.GetLocalizedText(System.Object)">
            <summary>
            
            </summary>
            <param name="textId">TextID set in Language.xml</param>
            <returns>Localized text according to textID</returns>
        </member>
        <member name="M:XKTools.Localization.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="textId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Localization.Contains(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="textId"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Localization.CheckValidity(System.String)">
            <summary>
            
            </summary>
            <param name="textId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Localization.CheckValidity(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="textId"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Localization.IsArabic(System.Char)">
            <summary>
            Checks if a char is in the arabic range
            </summary>
            <param name="c">Char to check</param>
            <returns>True if c is an arabic char</returns>
        </member>
        <member name="M:XKTools.Localization.IsArabic(System.String)">
            <summary>
            Checks if a string contains arabic char(s)
            </summary>
            <param name="str">Source string</param>
            <returns>True if str contains arabic</returns>
        </member>
        <member name="P:XKTools.Localization.CalcSizeMargin">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Localization.Charset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.UpdateCharset">
            <summary>
            <para>Recreates the charset based on all languages</para>
            <para>Updates the BMFC files located at Documents/Font/</para>
            </summary>
        </member>
        <member name="P:XKTools.Localization.GenerateCustomCharset">
            <summary>
            This regenerates (in editor) the localization charset. This helps for font creation...
            </summary>
        </member>
        <member name="P:XKTools.Localization.CleanMultiWhiteSpace">
            <summary>
            Says wether or not we want to replace multiple white space by only one ("    " -> " ")
            </summary>
        </member>
        <member name="P:XKTools.Localization.MissingCase">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Localization.LogCheckValidity">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.LoadLanguage(UnityEngine.SystemLanguage)">
            <summary>
            Loads a specific language, no matter to the system language
            </summary>
            <param name="language">Language to load</param>
            <returns>True if language was correctly loaded</returns>
        </member>
        <member name="M:XKTools.Localization.LoadLanguage(System.String)">
            <summary>
            Loads a specific language, no matter to the system language
            </summary>
            <param name="language">Language to load</param>
            <returns>True if language was correctly loaded</returns>
        </member>
        <member name="M:XKTools.Localization.PushToCharset(System.String[])">
            <summary>
            
            </summary>
            <param name="strs"></param>
        </member>
        <member name="M:XKTools.Localization.PushToCharset(System.Char[])">
            <summary>
            
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:XKTools.Localization.OnStartParsing(XKTools.Data.SmallXmlParser)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.OnEndParsing(XKTools.Data.SmallXmlParser)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.OnStartElement(System.String,XKTools.Data.SmallXmlParser.IAttrList)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.OnEndElement(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.OnProcessingInstruction(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.OnChars(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.OnIgnorableWhitespace(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Localization.CleanSpecialChars(System.Collections.Generic.List{System.Char})">
            <summary>
            Changes some special characters with other
            '…' -> "..."
            '’' -> "'"
            </summary>
            <param name="str">Source string</param>
        </member>
        <member name="M:XKTools.Localization.ForceEndLine(System.Collections.Generic.List{System.Char})">
            <summary>
            Replaces a few symbols { '§' } with end line character
            </summary>
            <param name="str">Source string</param>
        </member>
        <member name="M:XKTools.Localization.ReplaceNonBreakableSpaces(System.Collections.Generic.List{System.Char})">
            <summary>
            Removes non breakable spaces (alt+0160)
            </summary>
            <param name="str">Source string</param>
        </member>
        <member name="M:XKTools.Localization.Trim(System.String)">
            <summary>
            Performs string.Trim with these arguments: { '\n', '\t', ' ' }
            </summary>
            <param name="str">Source string</param>
            <returns>Trimed string</returns>
        </member>
        <member name="T:XKTools.LocalizationNet">
            <summary>
            Allow you to load localization files from a remote server.
            Will allow you to update the localized texts without building another version of your project.
            Use it instead of Localization if you want to use net features - use direclty Localization class as usual if you don't want it
            </summary>
        </member>
        <member name="P:XKTools.LocalizationNet.IsLoading">
            <summary>
            Indicates if LocalizationNet is getting some infos from the server
            </summary>
        </member>
        <member name="P:XKTools.LocalizationNet.LocalizationBundle">
            <summary>
            The localization Bundle with files loaded from server
            </summary>
        </member>
        <member name="M:XKTools.LocalizationNet.StartLocalizationNet(System.String)">
            <summary>
            Start Localization Net to check for localization updates on the server
            </summary>
            <param name="url">The address of the remote server</param>
            <returns>Return true if the request is properly sent</returns>
        </member>
        <member name="M:XKTools.LocalizationNet.StartLocalizationNet(System.String,UnityEngine.SystemLanguage)">
            <summary>
            Start Localization Net to check for localization updates on the server
            </summary>
            <param name="url">The address of the remote server</param>
            <param name="language">The language to load by default at the end of the loading</param>
            <returns>Return true if the request is properly sent</returns>
        </member>
        <member name="T:XKTools.CameraManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.RegisterCamera2D(System.Object,UnityEngine.Camera)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <param name="cam"></param>
        </member>
        <member name="M:XKTools.CameraManager.RegisterCamera2D(System.Object,UnityEngine.Camera,System.Boolean)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <param name="cam"></param>
            <param name="setAsCurrent"></param>
        </member>
        <member name="M:XKTools.CameraManager.UnregisterCamera2D(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
        </member>
        <member name="M:XKTools.CameraManager.RegisterCamera3D(System.Object,UnityEngine.Camera)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <param name="cam"></param>
        </member>
        <member name="M:XKTools.CameraManager.RegisterCamera3D(System.Object,UnityEngine.Camera,System.Boolean)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <param name="cam"></param>
            <param name="setAsCurrent"></param>
        </member>
        <member name="M:XKTools.CameraManager.UnregisterCamera3D(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
        </member>
        <member name="M:XKTools.CameraManager.WorldToScreen2D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.WorldToScreen3D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.ShouldRevertCullingMask2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.ChangeCullingMask2D(System.Int32)">
            <summary>
            
            </summary>
            <param name="cullingMask"></param>
        </member>
        <member name="M:XKTools.CameraManager.RevertCullingMask2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.ShouldRevertCullingMask3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.ChangeCullingMask3D(System.Int32)">
            <summary>
            
            </summary>
            <param name="cullingMask"></param>
        </member>
        <member name="M:XKTools.CameraManager.RevertCullingMask3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.ChangeRenderingPath2D(UnityEngine.RenderingPath)">
            <summary>
            
            </summary>
            <param name="renderingPath"></param>
        </member>
        <member name="M:XKTools.CameraManager.RevertRenderingPath2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.ChangeRenderingPath3D(UnityEngine.RenderingPath)">
            <summary>
            
            </summary>
            <param name="renderingPath"></param>
        </member>
        <member name="M:XKTools.CameraManager.RevertRenderingPath3D">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.IsCamera2DRegistered(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.IsCamera3DRegistered(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.GetCamera2D(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.GetCamera3D(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.SetCamera2D(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetCamera3D(System.Object)">
            <summary>
            
            </summary>
            <param name="referenceObj"></param>
        </member>
        <member name="M:XKTools.CameraManager.GetCamera2DReference(UnityEngine.Camera)">
            <summary>
            
            </summary>
            <param name="cam"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.GetCamera3DReference(UnityEngine.Camera)">
            <summary>
            
            </summary>
            <param name="cam"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.IsOnScreen2D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.IsOnScreen2D(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <param name="screenLimit"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.IsOnScreen3D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.IsOnScreen3D(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <param name="screenLimit"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.CameraManager.Camera2D">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraManager.Camera3D">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.CameraManager.SmoothCoef">
            <summary>
            Default smooth coeficient (0.07f)
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.AllCameras">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.CameraManager.SetImmediatePosition2D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedPosition2D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedPosition2D(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="smoothCoef"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetImmediateOrientation2D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation2D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation2D(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="smoothCoef"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetImmediateOrientation2D(UnityEngine.Quaternion)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation2D(UnityEngine.Quaternion)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation2D(UnityEngine.Quaternion,System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="smoothCoef"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetImmediatePosition3D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedPosition3D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedPosition3D(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="smoothCoef"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetImmediateOrientation3D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation3D(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation3D(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="smoothCoef"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetImmediateOrientation3D(UnityEngine.Quaternion)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation3D(UnityEngine.Quaternion)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XKTools.CameraManager.SetSmoothedOrientation3D(UnityEngine.Quaternion,System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="smoothCoef"></param>
        </member>
        <member name="M:XKTools.CameraManager.Clear">
            <summary>
            Clears rendering pathes and culling maskes
            </summary>
        </member>
        <member name="M:XKTools.CameraManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.CoroutineManager">
            <summary>
            This class helps managing corountines and avoids having several times the same coroutine playing.
            </summary>
        </member>
        <member name="M:XKTools.CoroutineManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.CoroutineManager.GetBehaviour(System.Collections.IEnumerator,System.Object)">
            <summary>
            Obtains the behaviour for starting corutines this should probably be sent as a parameter between coroutines
            </summary>
            <param name="coroutine"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CoroutineManager.GetBehaviour(System.Object)">
            <summary>
            Obtains the behaviour for starting corutines this should probably be sent as a parameter between coroutines
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CoroutineManager.StartCoroutine(System.Collections.IEnumerator,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="coroutine"></param>
            <param name="reference">Unique reference object</param>
            <param name="clearCoroutines">Specifies whether or not the coroutines of the behaviour will be stoped before starting the new one</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CoroutineManager.StartCoroutine(System.Collections.IEnumerator,System.Object)">
            <summary>
            
            </summary>
            <param name="coroutine"></param>
            <param name="reference">Unique reference object</param>
        </member>
        <member name="M:XKTools.CoroutineManager.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Please avoid having several coroutines of the same name if you want to keep using that function.
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="M:XKTools.CoroutineManager.StartCoroutine(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Please avoid having several coroutines of the same name if you want to keep using that function.
            </summary>
            <param name="coroutine"></param>
            <param name="clearCoroutines">Specifies whether or not the coroutines of the behaviour will be stoped before starting the new one</param>
        </member>
        <member name="M:XKTools.CoroutineManager.StopCoroutine(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CoroutineManager.StopCoroutine(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.CoroutineManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.CoroutineManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.IManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.OnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IManager.OnDrawGizmos">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Pause.IPausable">
            <summary>
            Interface to create a pausable object. This object is managed by the PauseManager
            </summary>
        </member>
        <member name="M:XKTools.Pause.IPausable.Register(System.Object)">
            <summary>
            Register the object into the PauseManager
            </summary>
        </member>
        <member name="M:XKTools.Pause.IPausable.Unregister">
            <summary>
            Unregister the object from the PauseManager
            </summary>
        </member>
        <member name="M:XKTools.Pause.IPausable.Pause(System.Object)">
            <summary>
            Pause the object
            </summary>
        </member>
        <member name="M:XKTools.Pause.IPausable.Resume(System.Object[],System.Object)">
            <summary>
            Unpause the object
            </summary>
        </member>
        <member name="T:XKTools.Pause.PauseManager">
            <summary>
            Manage all pausable objects. With it you wan pause/resume a group of objects or all objectsS
            </summary>
        </member>
        <member name="T:XKTools.Pause.PauseManager.ELayer">
            <summary>
            Default enum for the layers
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.Default">
            <summary>
            Default layer, used if not layer is set at object registration
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.Physic">
            <summary>
            Layer used by the physic manager
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.Cutscenes">
            <summary>
            Default Layer for cutscenes
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.Game">
            <summary>
            Default Layer for gameplay objects
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.Music">
            <summary>
            Default Layer for Music
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.GUI">
            <summary>
            Default Layer for GUI objects
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.ELayer.Count">
            <summary>
            Useful if you want to add your layers after default layers
            </summary>
        </member>
        <member name="T:XKTools.Pause.PauseManager.EPauseController">
            <summary>
            Enum to define some default ids to know who paused the application
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.EPauseController.AnyController">
            <summary>
            All controllers can resume the application
            </summary>
        </member>
        <member name="F:XKTools.Pause.PauseManager.EPauseController.NoController">
            <summary>
            No specific controller asked the pause
            </summary>
        </member>
        <member name="M:XKTools.Pause.PauseManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.Initialize">
            <summary>
            Initialize the PauseManager creating the defaults layers (like Physic, default, or others)
            </summary>
        </member>
        <member name="M:XKTools.Pause.PauseManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pause.PauseManager.IsPaused(XKTools.Pause.IPausable)">
            <summary>
            Return whether or not the selected object is paused
            </summary>
            <param name="obj">object we want to know if it's paused</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.IsLayerPaused(System.Object)">
            <summary>
            Return true if the selected layer is paused
            </summary>
            <param name="obj">Layer we want to know if it's paused</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.GetActiveController">
            <summary>
            Get the id of the last controller who paused the application
            </summary>
            <returns>Return id who corresponding to a controller. return -1 if no Controller has paused the application.</returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.CanResume(System.Int32)">
            <summary>
            Return true if the controller can resume the application and false if it's not it which paused the application
            </summary>
            <param name="controllerID">Controller which want to resume the application</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.GetLayerObject(System.Object)">
            <summary>
            Return the layer object kept in the LayerList from a layer object.
            </summary>
            <param name="layer">layer object</param>
            <returns>Return an object corresponding to the wanted layer</returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.PauseAll">
            <summary>
            Pause all registred objects into the PauseManager
            </summary>
        </member>
        <member name="M:XKTools.Pause.PauseManager.PauseAll(System.Int32)">
            <summary>
            Pause all registred objects into the PauseManager
            </summary>
            <param name="controllerID">id of the controller which paused the application</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.ResumeAll(System.Int32)">
            <summary>
            Resume all paused objects into the PauseManager
            </summary>
            <param name="controllerID">id of the controller which want to resume the application</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.Pause(System.Object)">
            <summary>
            Pause all registred objects into the selected layer
            </summary>
            <param name="layer">layer to pause</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.Pause(System.Object,System.Int32)">
            <summary>
            Pause all registred objects into the selected layer
            </summary>
            <param name="layer">layer to pause</param>
            <param name="controllerID">id of the controller which paused the application</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.Resume(System.Object)">
            <summary>
            Resume all registred objects into the selected layer
            </summary>
            <param name="layer">layer to resume</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.Resume(System.Object,System.Int32)">
            <summary>
            Resume all registred objects into the selected layer
            </summary>
            <param name="layer">layer to resume</param>
            <param name="controllerID">id of the controller which want to resume the application</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.RegisterObject(XKTools.Pause.IPausable)">
            <summary>
            Register an IPausable item into the HashTable in the according layer.
            If the list doesn't exist in the HashTable the Register func create it.
            </summary>
            <param name="obj">Item to register in the HashTable (will be put in a default layer)</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.RegisterObject(XKTools.Pause.IPausable,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.RegisterObject(XKTools.Pause.IPausable,System.Object,System.Boolean)">
            <summary>
            Register an IPausable item into the HashTable in the according layer.
            If the list doesn't exist in the HashTable the Register func create it.
            </summary>
            <param name="obj">item we want to register in the HashTable</param>
            <param name="layer">generic item which is the layer where we want to put the item</param>
            <param name="persistent"></param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.UnregisterObject(XKTools.Pause.IPausable)">
            <summary>
            Unregister an item from the HashTable. The item will be removes from the HashTable
            </summary>
            <param name="obj">item to remove</param>
        </member>
        <member name="M:XKTools.Pause.PauseManager.IsRegistered(XKTools.Pause.IPausable,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="layer">if null, all layers will be tested</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.CountRegistration(XKTools.Pause.IPausable,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="layer">if null, all layers will be tested</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pause.PauseManager.ClearTableAndLayers">
            <summary>
            Clear Layers and LayerHierarchy, clear table which contain layers and objects, all without removing persistent objects and corresponding layer
            </summary>
        </member>
        <member name="T:XKTools.IWindable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IWindable.UpdateWind(System.Single)">
            <summary>
            
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:XKTools.IWindable.ComputeValueVector(UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="windDirectionVector"></param>
        </member>
        <member name="T:XKTools.ManagerBase`1">
             <summary>
            
             </summary>
        </member>
        <member name="F:XKTools.ManagerBase`1.m_GameObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ManagerBase`1.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ManagerBase`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ManagerBase`1.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ManagerBase`1.GameObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.MonoBehaviourManagerBase`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.MonoBehaviourManagerBase`1.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.MonoBehaviourManagerBase`1.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.NotifierManager">
            <summary>
            This manager helps to send events to registers systems.
            
            Sometimes, you might want to limit the send events to specifics events.
            In those cases, you'll have to add some restrictions on the events you wants to authorize.
            As soon as a restriction is added, then all other events that are not in list won't be send.
            </summary>
        </member>
        <member name="T:XKTools.NotifierManager.EventReceiver">
            <summary>
            Deprecated
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="F:XKTools.NotifierManager.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.NotifierManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.NotifierManager.ForceSendEvent(System.Object,System.Object[])">
            <summary>
            Try to Call the event of specified name
            </summary>
            <param name="eventRef">The name of the event</param>
            <param name="parameters">The parameters of the event</param>
            <returns>true if the event has been called</returns>
        </member>
        <member name="M:XKTools.NotifierManager.SendEvent(System.Object,System.Object[])">
            <summary>
            Try to Call the event of specified name
            </summary>
            <param name="eventRef">The name of the event</param>
            <param name="parameters">The parameters of the event</param>
            <returns>true if the event has been called</returns>
        </member>
        <member name="M:XKTools.NotifierManager.RegisterDelegate(XKTools.NotifierManager.EventReceiver,System.Object)">
            <summary>
            Allow you to register a delegate to a given event
            </summary>
            <param name="e">The delegate</param>
            <param name="eventRef">The name of the wanted event</param>
        </member>
        <member name="M:XKTools.NotifierManager.UnregisterDelegate(XKTools.NotifierManager.EventReceiver,System.Object)">
            <summary>
            Allow you to unregister yourself to an event
            </summary>
            <param name="e">The eventReceiver</param>
            <param name="eventRef">The name of the event</param>
        </member>
        <member name="M:XKTools.NotifierManager.AddEventToAuthorizedList(System.Object)">
            <summary>
            Limits the send events to the authorzied list
            </summary>
            <param name="eventRef">The name of the event</param>
        </member>
        <member name="M:XKTools.NotifierManager.RemoveEventFromAuthorizedList(System.Object)">
            <summary>
            Removes the event ref from authorized events.
            If the list is empty again, then all events are authorized
            </summary>
            <param name="eventRef">The name of the event</param>
        </member>
        <member name="M:XKTools.NotifierManager.ClearAuthorizedList">
            <summary>
            Reauthorize all events
            </summary>
        </member>
        <member name="M:XKTools.NotifierManager.IsEventAuthorized(System.Object)">
            <summary>
            
            </summary>
            <param name="eventRef"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.NotifierManager.IsLimited">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.NotifierManager.Clear">
            <summary>
            Drop all event listeners
            </summary>
        </member>
        <member name="T:XKTools.PhysicManager">
            <summary>
            This class helps managing pause with physic objects and allow you to check on the physic state of specific objects
            </summary>
        </member>
        <member name="T:XKTools.PhysicManager.PhysicProps">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Name">
            <summary>
            ObjectName
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.GameObject">
            <summary>
            ObjectName
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Rigidbody">
            <summary>
            associated rigidbody
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.AngularDrag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.AngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.CenterOfMass">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.CollisionDetectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Constraints">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.DetectCollisions">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Drag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.FreezeRotation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.InertiaTensor">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.InertiaTensorRotation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Interpolation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.IsKinematic">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Mass">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.MaxAngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Position">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Rotation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.SleepAngularVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.SleepVelocity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.SolverIterations">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.UseConeFriction">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.UseGravity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicProps.Velocity">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.PhysicManager.PhysicActivated">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicActivatedHandler">
            <summary>
            PhysicActivated is sent when an object on the check list is not kinematic anymore.
            </summary>      
        </member>
        <member name="T:XKTools.PhysicManager.PhysicDeactivated">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.PhysicDeactivatedHandler">
            <summary>
            PhysicDeactivated is sent when every object on the check list are deactivated.
            </summary>      
        </member>
        <member name="F:XKTools.PhysicManager.m_RigidbodiesToCheck">
            <summary>
            The boolean is used to know if, when the object goes to sleep,
            we must add it to the sleeping objects list.
            </summary>
        </member>
        <member name="F:XKTools.PhysicManager.m_AsleepObjects">
            <summary>
            List of objects that went in sleep mode.
            It's the user task to remove objects from this list once
            he aknwnoledged their new state.
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.PhysicManager.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Pause(System.Object)">
            <summary>
            Pauses Physics by changing Dynamic object to Kinematics
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Resume(System.Object[],System.Object)">
            <summary>
            Resumes Physics by changing Kinematics object to Dynamic
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Register(System.Object)">
            <summary>
            Register Physic manager in the PauseManager
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Unregister">
            <summary>
            Unregister Physic Manager in the PauseManager
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.CreateDefaultMaterials">
            <summary>
            Creates a few materials, like the "NoFrictionMaterial"
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.RegisterToPhysicActivationEvents(XKTools.PhysicManager.PhysicActivated,XKTools.PhysicManager.PhysicDeactivated)">
            <summary>
            Regiter to the events sent when there's no physic activated or when physic activates
            </summary>
            <param name="physAct"></param>
            <param name="physDeact"></param>
        </member>
        <member name="M:XKTools.PhysicManager.UnregisterFromPhysicActivationEvents(XKTools.PhysicManager.PhysicActivated,XKTools.PhysicManager.PhysicDeactivated)">
            <summary>
            Unregiter from the events sent when there's no physic activated or when physic activates
            </summary>
            <param name="physAct"></param>
            <param name="physDeact"></param>
        </member>
        <member name="M:XKTools.PhysicManager.AddObjectToCheckList(UnityEngine.GameObject)">
            <summary>
            Add object to check on to the list
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XKTools.PhysicManager.AddObjectToCheckList(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Add object to check on to the list
            </summary>
            <param name="obj"></param>
            <param name="storeOnSleep">True if you want this object to be added to the AsleepObjects list</param>
        </member>
        <member name="M:XKTools.PhysicManager.RemoveObjectFromCheckList(UnityEngine.GameObject)">
            <summary>
            Remove object from the list
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XKTools.PhysicManager.CleanOutdatedInCheckList">
            <summary>
            Remove outdated references from the check list
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.CleanOutdatedInAsleepList">
            <summary>
            Remove outdated references from the asleep bodies list
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.CheckOnRigibodies">
            <summary>
            Function that check rigidbodies that have been added to the check list
            If one of them gets physical (or fucking physical cf Jack Black)
            the manager calls on its "PhysicActivatedHandler" delegate
            if it was in the some bodies are non kinematic 
            and they suddenly become kinematic, then it calls on its
            "PhysicDeactivatedHandler" delegate.
            "m_AllKinematic" indicates the "state" of the physic manager :
            if true, then there is no rigidbody currently active, else
            at least one of them is active
            I.E. Used in Kill The Bad Guy in order to force the timescale to 1.0f
            and lock it to avoid screwed physic behaviour
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.ClearCheckList">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.IsGameObjectInCheckList(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.PhysicManager.GetGameObjectFromCheckList(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.PhysicManager.GetStoreOnSleepFromCheckList(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.PhysicManager.PushMaterial(System.Object,UnityEngine.PhysicMaterial)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="mat"></param>
        </member>
        <member name="M:XKTools.PhysicManager.GetMaterial(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.PhysicManager.DurationBeforeReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.PhysicManager.RigidBodiesToCheckCount">
            <summary>
            To loop over the GameObjects, use this accessor 
            and GetGameObjectFromCheckList
            </summary>
        </member>
        <member name="P:XKTools.PhysicManager.AsleepObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.PhysicManager.CreateNoFrictionMaterial">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.PhysicManager.IgnoreCollision(UnityEngine.Collider,UnityEngine.Collider)">
            <summary>
            Call IgnoreCollision(collider1, collider2, true),
            as stated at http://docs.unity3d.com/ScriptReference/Physics.IgnoreCollision.html
            </summary>
            <param name="collider1"></param>
            <param name="collider2"></param>
        </member>
        <member name="M:XKTools.PhysicManager.IgnoreCollision(UnityEngine.Collider,UnityEngine.Collider,System.Boolean)">
            <summary>
            
            </summary>
            <param name="collider1"></param>
            <param name="collider2"></param>
            <param name="ignore"></param>
        </member>
        <member name="T:XKTools.WWWRequest">
            <summary>
            This manager helps posting message somewhere on the internet
            </summary>
        </member>
        <member name="M:XKTools.WWWRequest.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="url"></param>
            <param name="data"></param>
        </member>
        <member name="M:XKTools.WWWRequest.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="wwwRequest"></param>
        </member>
        <member name="P:XKTools.WWWRequest.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.WWWRequest.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.WWWRequest.Data">
            <summary>
            Data will be Json serialized, please use natural types only (int, float, string)
            </summary>
        </member>
        <member name="P:XKTools.WWWRequest.Attempt">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.RequestManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.RequestManager.OnProgressDlg">
            <summary>
            
            </summary>
            <param name="requestRef"></param>
            <param name="progress"></param>
        </member>
        <member name="T:XKTools.RequestManager.OnSuccessDlg">
            <summary>
            
            </summary>
            <param name="requestRef"></param>
            <param name="resText"></param>
        </member>
        <member name="T:XKTools.RequestManager.OnFailureDlg">
            <summary>
            
            </summary>
            <param name="requestRef"></param>
            <param name="error"></param>
        </member>
        <member name="F:XKTools.RequestManager.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.RequestManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.RequestManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.RequestManager.IsPostPending(System.String)">
            <summary>
            
            </summary>
            <param name="requestRef"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.RequestManager.Post(XKTools.WWWRequest,System.Boolean)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="immediate"></param>
        </member>
        <member name="M:XKTools.RequestManager.Post">
            <summary>
            Sends all the remaining requests from the pending zone
            </summary>
        </member>
        <member name="P:XKTools.RequestManager.OnProgress">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.RequestManager.OnSuccess">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.RequestManager.OnFailure">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.RequestManager.PostOnStart">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.SaveFile">
             <summary>
             SaveFile Usage:
             
            	    void AtInitTime()
            	    {
            	        m_SaveFile = new SaveFile("SaveName", EOutputMode.Xml, 0);
             
            	    	// init game settings through a default save pattern
            	    	m_SaveFile.AddPatternEntry("MasterVolume", 1.0f, 0);
            	    	m_SaveFile.AddPatternEntry("MusicVolume", 0.5f, 1); // previous MusicVolume walue is not compatible with current value
            	    	m_SaveFile.AddPatternEntry("FxVolume", 0.5f, 0);
            
            	    	// init output mode (XML, Json)
            	    	m_SaveFile.OutputMode = XKTools.SaveManager.ESaveOutputMode.XML;
            	    	
            	        // base init
            	    	m_SaveFile.Initialize();
            	    	
            			// get value from save file
                     float masterVolume = (float)m_SaveFile.GetValue("MasterVolume");
            	    }
            
            	    void AtRunTime()
            	    {
            	    	// runtime
            	    	m_SaveFile.SetValue("MasterVolume", 0.9f);
            	    	m_SaveFile.WriteSave();
            	    }
            	    
             </summary>
        </member>
        <member name="T:XKTools.SaveFile.EOutputMode">
            <summary>
            Enum of Output saving types
            </summary>
        </member>
        <member name="F:XKTools.SaveFile.EOutputMode.Json">
            <summary>
            Save as JSON File
            <remarks>For now, Json is disadviced, it does not consider other types than string and Hsahtable reading is not yet recursive</remarks>
            </summary>
        </member>
        <member name="F:XKTools.SaveFile.EOutputMode.Xml">
            <summary>
            Save as XML File
            </summary>
        </member>
        <member name="F:XKTools.SaveFile.EOutputMode.Binary">
            <summary>
            Save as Binarized JSON File
            <remarks>As it's based on Json, this value is very disadviced too</remarks>
            </summary>
        </member>
        <member name="T:XKTools.SaveFile.UpgradeKeyDlg">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="saveRevision"></param>
            <param name="saveValue"></param>
            <param name="patternRevision"></param>
            <param name="patternValue"></param>
            <returns>The new value to be set in save</returns>
        </member>
        <member name="M:XKTools.SaveFile.#ctor(System.String,XKTools.SaveFile.EOutputMode,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="saveName"></param>
            <param name="outputMode"></param>
            <param name="saveOnCloud"></param>
            <param name="saveRevision">if save revision is different of the one set in saved file, then the file will be deleted and recreated</param>
            <param name="highPrecisionNumber"> </param>
            <param name="allowModifyExtension"> </param>
        </member>
        <member name="M:XKTools.SaveFile.#ctor(System.String,XKTools.SaveFile.EOutputMode,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="saveName"></param>
            <param name="outputMode"></param>
            <param name="saveOnCloud"></param>
            <param name="saveRevision">if save revision is different of the one set in saved file, then the file will be deleted and recreated</param>
            <param name="allowModifyExtension"> </param>
        </member>
        <member name="M:XKTools.SaveFile.#ctor(System.String,XKTools.SaveFile.EOutputMode,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="saveName"></param>
            <param name="outputMode"></param>
            <param name="saveOnCloud"></param>
            <param name="saveRevision">if save revision is different of the one set in saved file, then the file will be deleted and recreated</param>
        </member>
        <member name="M:XKTools.SaveFile.#ctor(System.String,XKTools.SaveFile.EOutputMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            This constructor does not save files on cloud
            </summary>
            <param name="saveName"></param>
            <param name="outputMode"></param>
            <param name="saveRevision">if save revision is different of the one set in saved file, then the file will be deleted and recreated</param>
            <param name="highPrecisionNumber"> </param>
            <param name="allowModifyExtension"> </param>
        </member>
        <member name="M:XKTools.SaveFile.#ctor(System.String,XKTools.SaveFile.EOutputMode,System.Int32,System.Boolean)">
            <summary>
            This constructor does not save files on cloud
            </summary>
            <param name="saveName"></param>
            <param name="outputMode"></param>
            <param name="saveRevision">if save revision is different of the one set in saved file, then the file will be deleted and recreated</param>
            <param name="highPrecisionNumber"> </param>
        </member>
        <member name="M:XKTools.SaveFile.#ctor(System.String,XKTools.SaveFile.EOutputMode,System.Int32)">
            <summary>
            This constructor does not save files on cloud
            </summary>
            <param name="saveName"></param>
            <param name="outputMode"></param>
            <param name="saveRevision">if save revision is different of the one set in saved file, then the file will be deleted and recreated</param>
        </member>
        <member name="M:XKTools.SaveFile.Initialize">
            <summary>
            This function must be called after adding patterns to save
            </summary>
        </member>
        <member name="M:XKTools.SaveFile.AddPatternEntry(System.String,System.Object)">
            <summary>
            Add a new entry in save structure
            </summary>
            <param name="key">the name of the entry</param>
            <param name="defaultValue">the default value to set</param>
        </member>
        <member name="M:XKTools.SaveFile.AddPatternEntry(System.String,System.Object,System.Int32)">
            <summary>
            Add a new entry in save structure
            </summary>
            <param name="key">the name of the entry</param>
            <param name="defaultValue">the default value to set</param>
            <param name="revision">helps to reset possible obsolete values</param>
        </member>
        <member name="M:XKTools.SaveFile.SetValue(System.String,System.Object)">
            <summary>
            Set the value associated with the the key
            </summary>
            <param name="key">the key of the entry</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:XKTools.SaveFile.GetValue``1(System.String)">
            <summary>
            Get typed value associated with the the key
            </summary>
            <typeparam name="V"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.SaveFile.GetValue(System.String)">
            <summary>
            Get the value associated with the the key
            </summary>
            <param name="key">the key of the entry</param>
            <returns>the value to get</returns>
        </member>
        <member name="M:XKTools.SaveFile.ResetSave">
            <summary>
            Removes the save from persistant data path, will recreate it if needed
            </summary>
        </member>
        <member name="M:XKTools.SaveFile.DeleteSave">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveFile.LoadSave">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveFile.WriteSave">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveFile.CustomSavePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveFile.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveFile.SaveName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveFile.IsDirty">
            <summary>
            Says if we need to write save soon or later
            </summary>
        </member>
        <member name="P:XKTools.SaveFile.UpgradeKey">
            <summary>
            Called when pattern revision and save revision are different
            </summary>
        </member>
        <member name="T:XKTools.SaveManager">
             <summary>
             Basic Save Manager
             
             Usage:
             
            	    void AtInitTime()
            	    {
            	        SaveFile sf = new SaveFile("SaveName", EOutputMode.Xml, 0);
             
            	    	// init game settings through a default save pattern
            	    	sf.AddPatternEntry("MasterVolume", 1.0f);
            	    	sf.AddPatternEntry("MusicVolume", 0.5f);
            	    	sf.AddPatternEntry("FxVolume", 0.5f);
            	    	
            	    	// init output mode (XML, Json, PlayerPrefs)
            	    	m_SaveFile.OutputMode = XKTools.SaveManager.ESaveOutputMode.XML;
            	    	
            	        // base init
            	    	RegisterSaveFile("MySaveFile", sf); // calls sf.init
            	    	
                     SetCurrentSave("MySaveFile");
            	    }
            
            	    void AtRunTime()
            	    {
            	    	// runtime
            	    	m_SaveFile.SetValue("MasterVolume", 0.9f);
            	    	m_SaveFile.WriteSave();
            	    }
            	    
             </summary>
        </member>
        <member name="T:XKTools.SaveManager.ESaveOutputMode">
            <summary>
            Enum of Output saving types
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.ESaveOutputMode.PlayerPrefs">
            <summary>
            In unity PlayerPrefs
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.ESaveOutputMode.JSON">
            <summary>
            In a JSON File
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.ESaveOutputMode.XML">
            <summary>
            In a XML File
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.ESaveOutputMode.Binary">
            <summary>
            In a Binarized JSON File
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.ESaveOutputMode.None">
            <summary>
            No Output Set
            </summary>
        </member>
        <member name="T:XKTools.SaveManager.OnMainSaveLoadedDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.SAVE_REVISION">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.m_SaveReady">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SaveManager.OnMainSaveLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SaveManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.AddPatternEntry(System.String,System.Object)">
            <summary>
            Add a new entry in savegame structure,
            if no current save is set, it will create a default one
            </summary>
            <param name="key">the name of the entry</param>
            <param name="defaultValue">the default value to set</param>
        </member>
        <member name="M:XKTools.SaveManager.AddPatternEntry(System.String,System.Object,System.Int32)">
            <summary>
            Add a new entry in save structure
            </summary>
            <param name="key">the name of the entry</param>
            <param name="defaultValue">the default value to set</param>
            <param name="revision">helps to reset possible obsolete values</param>
        </member>
        <member name="M:XKTools.SaveManager.RegisterSave(System.Object,XKTools.SaveFile)">
            <summary>
            Save file must not have been initiliazed and patterns added already
            </summary>
            <param name="reference"></param>
            <param name="file"></param>
        </member>
        <member name="M:XKTools.SaveManager.SetCurrentSave(System.Object)">
            <summary>
            
            </summary>
            <param name="reference">if null, DefaultSaveName will be chosen</param>
        </member>
        <member name="M:XKTools.SaveManager.CreateMainSave">
            <summary>
            Create a save, following the given pattern
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.SetValue(System.String,System.Object)">
            <summary>
            Set the value associated with the the key, in current save
            </summary>
            <param name="key">the key of the entry</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:XKTools.SaveManager.GetValue(System.String)">
            <summary>
            Get the value associated with the the key, in current save
            </summary>
            <param name="key">the key of the entry</param>
            <returns>the value to get</returns>
        </member>
        <member name="M:XKTools.SaveManager.GetSaveFile(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.SaveManager.WriteSaves">
            <summary>
            Write saves to HDD, except if m_DoNotSave is set at true
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.Load">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.ReadSaves">
            <summary>
            Write saves to HDD, except if m_DoNotSave is set at true
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.DeleteSave(System.Object,System.Boolean)">
            <summary>
            Remove
            </summary>
            <param name="reference">the reference of the save to delete</param>
            <param name="removeFromSaveList"></param>
        </member>
        <member name="M:XKTools.SaveManager.ResetSave(System.Object)">
            <summary>
            Reset
            </summary>
            <param name="reference">the reference of the save to delete</param>
        </member>
        <member name="M:XKTools.SaveManager.ResetAllSaves">
            <summary>
            Reset all registered
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.ContainsSave(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.SaveManager.MainSaveName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveManager.CurrentSaveFileReference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveManager.DoNotSave">
            <summary>
            <remarks>The save files will not be written through WriteSaves</remarks>
            <remarks>The save mermory keeps beeing updated</remarks>
            </summary>
        </member>
        <member name="P:XKTools.SaveManager.OutputMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SaveManager.AllowModifyExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.ClearSaveData">
            <summary>
            Clear save dictionnary
            </summary>
        </member>
        <member name="M:XKTools.SaveManager.HasKey(System.String)">
            <summary>
            Check if save data value exists, using playerprefs or local dictionnary
            </summary>
            <param name="key"></param>
            <returns>Returns the save content for this key</returns>
        </member>
        <member name="M:XKTools.SaveManager.GetSaveDataValue(System.String)">
            <summary>
            Returns save data value, using playerprefs or local dictionnary
            </summary>
            <param name="key"></param>
            <returns>Returns the save content for this key</returns>
        </member>
        <member name="M:XKTools.SaveManager.SetSaveDataValue(System.String,System.String)">
            <summary>
            Sets save data value, using playerprefs or local dictionnary
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.SaveManager.FireMainSaveLoaded">
            <summary>
            Calls registered OnMainSaveLoaded callback
            </summary>
        </member>
        <member name="T:XKTools.TextureVisualiser">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.TextureVisualiser.m_Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.TextureVisualiser.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ScreenshotManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.ScreenshotManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.TakeScreenshot(System.Int32,System.Object[])">
            <summary>
            Take a screenshot of the entire screen.
            </summary>
            <param name="antiAliasing"></param>
            <param name="availableCameraRef">Available cameras reference given to CameraManager. If array is null or empty all cameras are available</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ScreenshotManager.TakeScreenshot(System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Take a screenshot of the entire screen.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="antiAliasing"></param>
            <param name="availableCameraRef">Available cameras reference given to CameraManager. If array is null or empty all cameras are available</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.ScreenshotManager.ClearTextures">
            <summary>
            Call that function to clear memory
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.CreateVisualiser">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ScreenshotManager.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ScreenshotManager.GetPNG">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.SessionManager">
             <summary>
             Basic Session Manager
             
            		Manages engagement of users for each platform
             
             Usage:
             
            	    void AtInitTime()
            	    {
            	    }
            
            	    void AtRunTime()
            	    {
            			bool abort = false;
            			if (!SessionManager.Instance.IsUserSignedIn())
            			{
            				SessionManager.Instance.RequestSignIn();
            				while (!SessionManager.Instance.IsUserSignedIn() &amp;&amp; !abort)
            				{
            					abort = SessionManager.Instance.WasRequestSignInAborted();
            					yield return new WaitForSeconds(1.0f);
            				}
            			}
            			
            			int userID = SessionManager.Instance.UserId; 
            			
            			if(SessionManager.Instance.IsUserSignedIn())
            			{
            			}
            	    }
            	    
             </summary>
        </member>
        <member name="T:XKTools.SessionManager.SessionDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.SessionId">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnUserLoggedOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnUserLoggedIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnUserChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnHardwareMenuOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnHardwareMenuClosed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnControllerDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnControllerReconnected">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnGameSuspended">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.OnGameResumed">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SessionManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SessionManager.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.Engage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SessionManager.IsUserSignedIn">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SessionManager.RequestSignIn">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.IsSomeoneSigningIn">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SessionManager.WasRequestSignInAborted">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SessionManager.DisengageUser">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SessionManager.lastStatus">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.SendPlayerStatus(System.String)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <returns>true if the Player status is sent</returns>
        </member>
        <member name="M:XKTools.SessionManager.SendLastPlayerStatus">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.SendGameSessionStarted">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.SendGameSessionEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.SendGameSessionPaused">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.SendGameSessionResumed">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SessionManager.HandleHomeButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SessionManager.UserUniqId">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.WindManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.WindManager.EPatternName">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.WindRise">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.WindFallQuickly">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.WindStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.WindFallSlowly">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.WindNonStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.ChangeWindDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.ChangeWindDirectionX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.ChangeWindDirectionY">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.EPatternName.ChangeWindDirectionZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.WindManager.m_Patterns">
            <summary>
            Patterns that will be set in editors
            </summary>
        </member>
        <member name="M:XKTools.WindManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.WindManager.Register(XKTools.IWindable)">
            <summary>
            
            </summary>
            <param name="windable"></param>
        </member>
        <member name="M:XKTools.WindManager.UnRegister(XKTools.IWindable)">
            <summary>
            
            </summary>
            <param name="windable"></param>
        </member>
        <member name="M:XKTools.WindManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.WindManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.IntPair">
            <summary>
            This class is a Pair(int, int) that can be serialized
            </summary>
        </member>
        <member name="M:XKTools.IntPair.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="M:XKTools.IntPair.#ctor(XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:XKTools.IntPair.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.IntPair.Equals(XKTools.Pair{System.Int32,System.Int32})">
            <summary>
            Method overriden to avoid boxing and GC Allocations
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.IntPair.op_Addition(XKTools.IntPair,XKTools.IntPair)">
            <summary>
            Helps to add two pairs
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.IntPairExtensions">
            <summary>
            Extensions for Pair objects
            </summary>
        </member>
        <member name="M:XKTools.IntPairExtensions.ToVector2(XKTools.IntPair)">
            <summary>
            Transform a int Pair to a Vector2
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.IntPairExtensions.ToIntPair(UnityEngine.Vector2)">
            <summary>
            Transform a int Vector2 to a Pair
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Misc">
            <summary>
            Class with helpful functions about hashtable, cheat, definition and memory
            </summary>
        </member>
        <member name="T:XKTools.Misc.GetTypeDlg">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Misc.IsUniversal">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Misc.TypeGetter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Misc.SetHd(System.Boolean)">
            <summary>
            Define if the instance of the game must use HD assets or not
            </summary>
            <param name="b">Indicates whether the game should be in HD version or not</param>
        </member>
        <member name="M:XKTools.Misc.IsHd">
            <summary>
            Indicates whether the Game is HD or not
            </summary>
            <returns>A boolean than indicates whether the game is HD or not</returns>
        </member>
        <member name="M:XKTools.Misc.GetTexPath">
            <summary>
            Get the path to the resources, which changes according to the definition
            </summary>
            <returns>The path to the correct assets</returns>
        </member>
        <member name="P:XKTools.Misc.IsCheater">
            <summary>
            Allows you to determine whether you can use Cheat or not (if in editor, always active)
            </summary>
        </member>
        <member name="P:XKTools.Misc.IsSmartPhone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Misc.UseUnityRemote">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Misc.IsConsole">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Misc.IsEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Misc.IsWeb">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Misc.FreeMem(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Try to free memory and choose to collect or not the Garbage Collector immediately
            </summary>
            <param name="gcCollect">Should the GC be collected now?</param>
            <param name="waitPending">Should pending finalizers be waited before continue?</param>
            <param name="skipCount">Amount of attempts before actually cleaning memory (useful in case of frequent mem allocation like scroll area with frequent refreshment)</param>
        </member>
        <member name="M:XKTools.Misc.Swap``1(``0@,``0@)">
            <summary>
            Swaps two objects with the same type
            </summary>
            <param name="a">The first object</param>
            <param name="b">The second object</param>
            <typeparam name="T">Type of both objects</typeparam>
        </member>
        <member name="M:XKTools.Misc.IsTypeInHierarchy(System.Type,System.Type)">
            <summary>
            Return true if the type to test is or inherit at any moment from the type requested
            </summary>
            <param name="typeToTest">type to test</param>
            <param name="type">type requested</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.GetType(System.String,UnityEngine.Object)">
            <summary>
            Gets a type from a name...
            Fill the TypeGetter to add the game assembly
            </summary>
            <param name="typeName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.GetType(System.String)">
            <summary>
            Gets a type from a name...
            Fill the TypeGetter to add the game assembly
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.Equals``1(``0,``0)">
            <summary>
            Safe comparison of two generic elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.ColorFromIntArray(System.Int32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.Color32FromIntArray(System.Int32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.ColorFromInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.Misc.Color32FromInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.Misc.GetPostfix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.ManhattanDistance(XKTools.IntPair,XKTools.IntPair)">
            <summary>
            Compute the Manhattan distance between two int pairs
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.ManhattanDistance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Compute the Manhattan distance between two 2D vectors
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.GetHashtableValue``2(System.Collections.Hashtable,``0,``1)">
            <summary>
            Get the value associated to the given key in the given Hashtable
            </summary>
            <typeparam name="K">The type of the Key (must implement IConvertible)</typeparam>
            <typeparam name="V">The type of the Value (must implement IConvertible)</typeparam>
            <param name="table">The hashtable in which you want to find your key</param>
            <param name="key">The key you want to find</param>
            <param name="defaultValue">The default value that will be returned if your key isn't found</param>
            <returns>Your value</returns>
        </member>
        <member name="M:XKTools.Misc.GetHashtableKey``2(System.Collections.Hashtable,``1,``0)">
            <summary>
            Get the key associated to the given value in the given Hashtable
            </summary>
            <typeparam name="K">The type of the Key (must implement IConvertible)</typeparam>
            <typeparam name="V">The type of the Value (must implement IComparable)</typeparam>
            <param name="table">The hashtable in which you want to find your key</param>
            <param name="value">The value you want to find</param>
            <param name="defaultKey">The default key that will be returned if your value isn't found</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Misc.ParseEnum``1(System.String,``0)">
            <summary>
            Convert a string to a value of a given Enum
            </summary>
            <typeparam name="T">The enum you want to retrieve your value in (must be an enum)</typeparam>
            <param name="value">The string you're trying to convert to an enum value</param>
            <param name="defaultValue">The default enum value that will be returned if the conversion cannot be done</param>
            <returns>The value converted to your enum's value</returns>
        </member>
        <member name="M:XKTools.Misc.ParseEnum``1(System.String,``0,System.Boolean)">
            <summary>
            Convert a string to a value of a given Enum
            </summary>
            <typeparam name="T">The enum you want to retrieve your value in (must be an enum)</typeparam>
            <param name="value">The string you're trying to convert to an enum value</param>
            <param name="defaultValue">The default enum value that will be returned if the conversion cannot be done</param>
            <param name="log"> </param>
            <returns>The value converted to your enum's value</returns>
        </member>
        <member name="M:XKTools.Misc.GetEnumValues``1">
            <summary>
            Get an array of all the values of a given enum
            </summary>
            <typeparam name="T">The enum you want to get the values of (must be an enum)</typeparam>
            <returns>An array of enum</returns>
        </member>
        <member name="M:XKTools.Misc.IsEnumDefined``1(``0)">
            <summary>
            Check whether a value of given type is defined in the given enum or not
            </summary>
            <typeparam name="T">The tested enum (must be an enum)</typeparam>
            <param name="value">The value you want to check</param>
            <returns>Return true if your value exists in your enum</returns>
        </member>
        <member name="M:XKTools.Misc.ConvertToLongMask``1(``0[])">
            <summary>
            Build a binary's mask of type long from an array
            </summary>
            <typeparam name="T">The type of the array (must implement IConvertible)</typeparam>
            <param name="list">The list of values from which you want to build your mask</param>
            <returns>Your long mask</returns>
        </member>
        <member name="M:XKTools.Misc.ConvertToIntMask``1(``0[])">
            <summary>
            Build a binary's mask of type integer from an array
            </summary>
            <typeparam name="T">The type of the array (must implement IConvertible)</typeparam>
            <param name="list">The list of values from which you want to build your mask</param>
            <returns>Your int mask</returns>
        </member>
        <member name="M:XKTools.Misc.DelayAction(UnityEngine.MonoBehaviour,System.Action,System.Int32)">
            <summary>
            Allows you to execute a method few frames later
            </summary>
            <param name="script">The script you want to delay an action from</param>
            <param name="action">The method you want to invoke</param>
            <param name="frame">The number of frames you want to wait</param>
        </member>
        <member name="T:XKTools.MovingValue`1">
            <summary>
            Prevent memory hack (locate and freeze like http://artmoney.ru/)
            Warning: new allocation with each use
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XKTools.MovingValue`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:XKTools.MovingValue`1.CurrentValue">
            <summary>
            With allocation
            </summary>
        </member>
        <member name="P:XKTools.MovingValue`1.UnsafeCurrentValue">
            <summary>
            Without allocation
            </summary>
        </member>
        <member name="M:XKTools.MovingValue`1.Reallocate">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Pair`2">
            <summary>
            User-friendly class to make a structure with two chosen types
            <remarks>Given the object is a class, you should use the Copy Cst to duplicate pair instance</remarks>
            </summary>
            <typeparam name="T1">The first type</typeparam>
            <typeparam name="T2">The second type</typeparam>
        </member>
        <member name="M:XKTools.Pair`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="M:XKTools.Pair`2.#ctor(XKTools.Pair{`0,`1})">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:XKTools.Pair`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pair`2.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pair`2.op_Implicit(XKTools.Pair{`0,`1})~System.Boolean">
            <summary>
            Allows to do boolean test to know if the class is null or not
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pair`2.op_Equality(XKTools.Pair{`0,`1},XKTools.Pair{`0,`1})">
            <summary>
            Helps to compare two pairs
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pair`2.op_Inequality(XKTools.Pair{`0,`1},XKTools.Pair{`0,`1})">
            <summary>
            Helps to compare two pairs
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Pair`2.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Pair`2.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Pair`2.HashWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pair`2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pair`2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pair`2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pair`2.Equals(XKTools.Pair{`0,`1})">
            <summary>
            This method may use boxing and generate GC Allocations (around 40B)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.PairExtensions">
            <summary>
            Extensions for Pair objects
            </summary>
        </member>
        <member name="M:XKTools.PairExtensions.ToVector2(XKTools.Pair{System.Int32,System.Int32})">
            <summary>
            Transform a int Pair to a Vector2
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.PairExtensions.ToVector2(XKTools.Pair{System.Single,System.Single})">
            <summary>
            Transform a float Pair to a Vector2
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.PairExtensions.ToPairIntInt(UnityEngine.Vector2)">
            <summary>
            Transform a int Vector2 to a Pair
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.PairExtensions.ToPairFloatFloat(UnityEngine.Vector2)">
            <summary>
            Transform a float Vector2 to a Pair
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.SuperStruct">
            <summary>
            User-friendly class to make a structure with any chosen types
            </summary>
        </member>
        <member name="M:XKTools.SuperStruct.op_True(XKTools.SuperStruct)">
            <summary>
            Operator to make SuperStruct nullable
            </summary>            
        </member>
        <member name="M:XKTools.SuperStruct.op_False(XKTools.SuperStruct)">
            <summary>
            Operator to make SuperStruct nullable
            </summary>
        </member>
        <member name="M:XKTools.SuperStruct.op_LogicalNot(XKTools.SuperStruct)">
            <summary>
            Operator to make SuperStruct nullable
            </summary>
        </member>
        <member name="M:XKTools.SuperStruct.#ctor(System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SuperStruct.GetItem``1(System.Int32)">
            <summary>
            
            </summary>
            <returns>The object you want casted as T</returns>
        </member>
        <member name="M:XKTools.SuperStruct.GetItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns>The object you want as an 'oject'</returns>
        </member>
        <member name="P:XKTools.SuperStruct.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns>The object you want as an 'oject'</returns>
        </member>
        <member name="M:XKTools.SuperStruct.GetTypes">
            <summary>
            To be used in debug mode only...
            Very useful to display type information among SuperStruct.
            </summary>
            <returns>The RTTI of each object in SuperStruct</returns>
        </member>
        <member name="M:XKTools.SuperStruct.GetTypeOf(System.Int32)">
            <summary>
            To be used in debug mode only...
            Very useful to display type information among super structure.
            </summary>
            <param name="itemId"></param>
            <returns>The RTTI of each object in SuperStruct</returns>
        </member>
        <member name="T:XKTools.Triple`3">
            <summary>
            User-friendly class to make a structure with three chosen types
            </summary>
            <typeparam name="T1">The first type</typeparam>
            <typeparam name="T2">The second type</typeparam>
            <typeparam name="T3">The third type</typeparam>
        </member>
        <member name="M:XKTools.Triple`3.op_Implicit(XKTools.Triple{`0,`1,`2})~System.Boolean">
            <summary>
            Operator to make Triple nullable
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Triple`3.op_Equality(XKTools.Triple{`0,`1,`2},XKTools.Triple{`0,`1,`2})">
            <summary>
            Helps to compare two triples
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Triple`3.op_Inequality(XKTools.Triple{`0,`1,`2},XKTools.Triple{`0,`1,`2})">
            <summary>
            Helps to compare two triples
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Triple`3.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Triple`3.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Triple`3.C">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="M:XKTools.Triple`3.#ctor(XKTools.Triple{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.Triple`3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Triple`3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Triple`3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Triple`3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.TripleExtensions">
            <summary>
            Extensions for Triple objects
            </summary>
        </member>
        <member name="M:XKTools.TripleExtensions.ToVector3(XKTools.Triple{System.Int32,System.Int32,System.Int32})">
            <summary>
            Transform a int Triple to a Vector3
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.TripleExtensions.ToVector3(XKTools.Triple{System.Single,System.Single,System.Single})">
            <summary>
            Transform a float Triple to a Vector3
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.TripleExtensions.ToIntTriple(UnityEngine.Vector3)">
            <summary>
            Transform a int Vector3 to a Triple
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.TripleExtensions.ToFloatTriple(UnityEngine.Vector3)">
            <summary>
            Transform a float Vector3 to a Triple
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.AsyncGameData">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.AsyncGameData.EAsyncGameData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.PlayerGuids">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.StoredMessages">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.GameEndedGuids">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.RoundPlayerInfos">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.SeenGuids">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncGameData.EAsyncGameData.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.CheckEntry(System.Collections.DictionaryEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.AsyncGameData.PlayerGuids">
            <summary>
            DO NOT USE THE RESULT OF THIS ACCESSOR TO ADD SOME PLAYER GUIDS ! Use AddPlayerGuid instead
            </summary>
        </member>
        <member name="P:XKTools.Net.AsyncGameData.PlayerDatas">
            <summary>
            DO NOT USE THE RESULT OF THIS ACCESSOR TO ADD SOME PLAYER DATAS ! Use UpdatePlayerDatas instead
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetPlayerDatas(System.Object)">
            <summary>
            Get the player infos of given guid
            </summary>
            <param name="guid">The guid of the wanted player datas</param>
            <returns>The wanted player datas</returns>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetPlayerDatas(System.Object,System.Boolean)">
            <summary>
            Get the player infos of given guid
            </summary>
            <param name="guid">The guid of the wanted player datas</param>
            <param name="log"> </param>
            <returns>The wanted player datas</returns>
        </member>
        <member name="P:XKTools.Net.AsyncGameData.StoredMessages">
            <summary>
            DO NOT USE THE RESULT OF THIS ACCESSOR TO ADD SOME STORED MESSAGES ! Use AddStoredMessages instead
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetStoredMessages(System.Object)">
            <summary>
            Get the stored messages of given guid
            </summary>
            <param name="guid">The guid of the wanted stored datas</param>
            <returns>The wanted stored messages</returns>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetStoredMessageReadedCount(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.SetStoredMessagesReadedCount(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.AsyncGameData.GameEndedGuids">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.IsFinished">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.AsyncGameData.RoundPlayerInfos">
            <summary>
            DO NOT USE THE RESULT OF THIS ACCESSOR TO ADD SOME ROUND PLAYER INFOS ! Use UpdateRoundPlayerInfos instead
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetRoundPlayerInfos(System.Int32,System.Object)">
            <summary>
            Get the player infos of given guid and the given roundIndex
            </summary>
            <param name="roundIndex"> The round index</param>
            <param name="guid">The guid of the wanted player infos</param>
            <returns>The wanted player infos</returns>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetRoundPlayerInfos(System.Int32,System.Object,System.Boolean)">
            <summary>
            Get the player infos of given guid and the given roundIndex
            </summary>
            <param name="roundIndex"> The round index</param>
            <param name="guid">The guid of the wanted player infos</param>
            <param name="log"> </param>
            <returns>The wanted player infos</returns>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetRoundPlayerInfos``1(System.Int32,System.Object,System.Object,``0)">
            <summary>
            Get an info of the player of given guid and given round index
            </summary>
            <typeparam name="T">The type of information we want to get</typeparam>
            <param name="roundIdx">The round index</param>
            <param name="playerGuid">The guid of the player we want the information of</param>
            <param name="key">The key of the information</param>
            <param name="defaultValue">The default value</param>
            <returns>The wanted information, or the default value</returns>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.GetRoundPlayerInfos``1(System.Int32,System.Object,System.Object,``0,System.Boolean)">
            <summary>
            Get an info of the player of given guid and given round index
            </summary>
            <typeparam name="T">The type of information we want to get</typeparam>
            <param name="roundIdx">The round index</param>
            <param name="playerGuid">The guid of the player we want the information of</param>
            <param name="key">The key of the information</param>
            <param name="defaultValue">The default value</param>
            <param name="log"> </param>
            <returns>The wanted information, or the default value</returns>
        </member>
        <member name="P:XKTools.Net.AsyncGameData.SeenGuids">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.AddPlayerGuid(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.UpdatePlayerDatas(System.Object,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.AddStoredMessages(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.AddStoredMessages(System.Object,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.AddGameEndedGuid(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.UpdateRoundPlayerInfos(System.Object,XKTools.XKHashtable)">
            <summary>
            
            </summary>
            <param name="guid"></param>
            <param name="pi"></param>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.AddSeenGuid(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncGameData.ClearSeenGuid">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.AsyncNetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.AsyncNetworkController.NetworkEventDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncNetworkController.m_PreviousGame">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncNetworkController.ServerCreated">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncNetworkController.ServerJoined">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncNetworkController.EnterInGameEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.AsyncNetworkController.GameUpdatedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.ClearPlayersData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.SendNetData(XKTools.Net.NetData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.CheckPlayerCanJoin``1(``0,``0,System.Int32,System.Int32,XKTools.Net.GameData,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.AsyncNetworkController.IsAsync">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.AsyncNetworkController.CurrentRoundIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.UpdateGame">
            <summary>
            call OnGameUpdated when receive result
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.EndGame">
            <summary>
            End the current game
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.RemoveRound">
            <summary>
            Remove the current round of the current game
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.LeaveGame">
            <summary>
            Leave the current game
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.CompleteLeaveGame">
            <summary>
            Complete leave the current game
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnConnectionFailed(XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnEnterInGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnServerCreated``1(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnServerJoined``1(``0,XKTools.Net.AsyncGameData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnNextRound(XKTools.Net.AsyncGameData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnGameUpdated(XKTools.Net.AsyncGameData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnEndGame``1(XKTools.Net.AsyncGameData,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnRemoveRound``1(XKTools.Net.AsyncGameData,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnLeaveGame``1(``0,XKTools.Net.AsyncGameData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.OnCompleteLeaveGame``1(``0,XKTools.Net.AsyncGameData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkController.SendPlayerInfos(XKTools.Context.Const.ENetDirection,XKTools.XKHashtable,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.AsyncNetworkControllerUnity">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.AsyncNetworkControllerUnity.UpdateGame">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.Chat.Channel">
            <summary>
            Class used to handle differents channels of the ChatRoom
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.#ctor(System.Int32,System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.Channel.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.Channel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.Channel.Col">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.GetAllMessages">
            <summary>
            Get all the messages in the current chat
            </summary>
            <returns>
            Return all the chat messages as an new array
            to avoid unwanted manipulations from users
            </returns>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.GetLastMessages(System.Int32)">
            <summary>
            
            </summary>
            <param name="messagesCount"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.AddChatMessage(XKTools.Net.Chat.ChatMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XKTools.Net.Chat.Channel.InsertChatMessage(XKTools.Net.Chat.ChatMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:XKTools.Net.Chat.ChatMessage">
            <summary>
            Messages that are sent via the GameChat
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatMessage.#ctor(XKTools.Net.INetworkable,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <param name="channel"></param>
        </member>
        <member name="M:XKTools.Net.Chat.ChatMessage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="senderName"></param>
            <param name="message"></param>
            <param name="channel"></param>
        </member>
        <member name="M:XKTools.Net.Chat.ChatMessage.ToString">
            <summary>
            Format the chat message as specified in Format str
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.Chat.ChatMessage.Channel">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatMessage.Sender">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatMessage.SenderName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatMessage.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatMessage.Format">
            <summary>
            The format of the message when using ToString method
            Must have {0} for sender name and {1} for message
            </summary>
        </member>
        <member name="T:XKTools.Net.Chat.ChatRoom">
            <summary>
            Class used to handle the Chat in the games (lobby, in-game...)
            </summary>
        </member>
        <member name="F:XKTools.Net.Chat.ChatRoom.c_GeneralChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.GetAllGeneralMessages">
            <summary>
            Get all the messages in the current chat, in the general channel
            </summary>
            <returns>
            Return all the chat messages as an new array
            to avoid unwanted manipulations from users
            </returns>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.GetAllMessages(System.Int32)">
            <summary>
            Get all the messages in the current chat
            </summary>
            <param name="channelId">The channel we want the messages of</param>
            <returns>
            Return all the chat messages as an new array
            to avoid unwanted manipulations from users
            </returns>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.GetPreviousMessages(System.Int32)">
            <summary>
            
            </summary>
            <param name="messagesCount"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.GetChannelName(System.Int32)">
            <summary>
            
            </summary>
            <param name="channelId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.GetChannelColor(System.Int32)">
            <summary>
            
            </summary>
            <param name="channelId"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.SetChannelColor(System.Int32,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="channelId"></param>
            <param name="col"></param>
        </member>
        <member name="P:XKTools.Net.Chat.ChatRoom.ChannelsIds">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatRoom.UnreadMessagesCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatRoom.Dirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.SetReady">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Chat.ChatRoom.Ready">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.AddChatMessage(XKTools.Net.Chat.ChatMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="read"></param>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.InsertChatMessage(XKTools.Net.Chat.ChatMessage)">
            <summary>
            Add a previous message on connexion on client side
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.ReadLastMessages">
            <summary>
            Read the last messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.CreateChannel(System.Int32,System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.Net.Chat.ChatRoom.RemoveChannel(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:XKTools.Net.ClientController">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.ClientController.CreateGameDataDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ClientController.m_Received">
            <summary>
            Used to communicate between threads. Received data are pushed into it in the network thread
            and are parsed and added to m_Games in the main thread.
            </summary>
        </member>
        <member name="F:XKTools.Net.ClientController.CreateGameData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ClientController.#ctor(XKTools.Net.NetworkControllerUDP)">
            <summary>
            
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:XKTools.Net.ClientController.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ClientController.ListenServer">
            <summary>
            TODO: Maybe enlarge client port range when there are no free ports 
            </summary>
        </member>
        <member name="M:XKTools.Net.ClientController.FindServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ClientController.StopBroadcastListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ClientController.GetDataToSend">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.ClientController.PushGameData(System.IAsyncResult,XKTools.Net.UdpState)">
            <summary>
            
            </summary>
            <param name="res"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.ClientController.Games">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.GameData">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.GameData.EGameData">
            <summary>
            
            </summary>
            <remarks>In case you'd change this enum values, please upgrade the NetworkManager.c_InternalVersion</remarks>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.UniqueGameName">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.InternalNetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.ExternalNetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.Ping">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.Region">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.SkillPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.MaxPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.ConnectedPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.PrivateSlots">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.ReservedGuids">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.Locked">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.AutoStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.BannedGuids">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.RemainingGameTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.DevGame">
            <summary>
            This property helps to skip the update popup for people when we're developping for steam for instance
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.PlayersInfos">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.AdditionalSettings">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameData.EGameData.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.Net.GameData.ApplyGameDatas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.UniqueGameName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.InternalNetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.ExternalNetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.Ping">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.Region">
            <summary>
            Default value is ERegion.WholeWorld (no limitation)
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.SkillPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.MaxPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.ConnectedPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.PrivateSlots">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.ReservedGuids">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.EmptySlots">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.IsAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.Locked">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.AutoStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.BannedGuids">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.RemainingGameTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.DevGame">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.PlayersInfos">
            <summary>
            Some project-specific players infos (skins, team...)
            Not initialized by default because not all the projects will use this property
            DO NOT USE THE RESULT OF THIS ACCESSOR TO ADD SOME PLAYER INFOS ! Use UpdatePlayerInfos instead
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.GetPlayerInfos(System.Object)">
            <summary>
            Get the player infos of given guid
            </summary>
            <param name="guid">The guid of the wanted player infos</param>
            <returns>The wanted player infos</returns>
        </member>
        <member name="M:XKTools.Net.GameData.GetPlayerInfo``1(System.Object,System.Object,``0)">
            <summary>
            Get an info of the player of given guid
            </summary>
            <typeparam name="T">The type of information we want to get</typeparam>
            <param name="playerGuid">The guid of the player we want the information of</param>
            <param name="key">The key of the information</param>
            <param name="defaultValue">The default value</param>
            <returns>The wanted information, or the default value</returns>
        </member>
        <member name="M:XKTools.Net.GameData.GetPlayerInfo``1(System.Object,System.Object,``0,System.Boolean)">
            <summary>
            Get an info of the player of given guid
            </summary>
            <typeparam name="T">The type of information we want to get</typeparam>
            <param name="playerGuid">The guid of the player we want the information of</param>
            <param name="key">The key of the information</param>
            <param name="defaultValue">The default value</param>
            <param name="log"> </param>
            <returns>The wanted information, or the default value</returns>
        </member>
        <member name="M:XKTools.Net.GameData.HasPlayerInfos(System.Object)">
            <summary>
            Check if some player infos match with the given guid
            </summary>
            <param name="playerGuid">The wanted guid</param>
            <returns>True if some player infos exist for the given guid</returns>
        </member>
        <member name="P:XKTools.Net.GameData.AdditionalSettings">
            <summary>
            Some project-specific additional settings
            - get: May be null if no additional settings is set
            - set: 
            - -> If a value of null is set, a new XKHashtable will be added instead.
            - -> When settings a completely new instance of AdditionalSettings, the GameData will keep the same state
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.CheckFilledDatas">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.GameData.DefaultMaxPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.GameData.DefaultPrivateSlots">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.CreatePlayersInfosEntry">
            <summary>
            Create the players infos list
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.UpdatePlayerInfos(System.Object,XKTools.XKHashtable)">
            <summary>
            Update the player infos of given guid
            </summary>
            <param name="guid">The guid of the player we want to update the infos of</param>
            <param name="pi">The new player infos</param>
            <returns>True on success</returns>
        </member>
        <member name="M:XKTools.Net.GameData.RemovePlayerInfos(System.Object)">
            <summary>
            Remove the infos of the player of given idx
            </summary>
            <param name="guid">The guid of the player we want to remove the infos of</param>
        </member>
        <member name="M:XKTools.Net.GameData.AddBannedGuid(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.AddReservedGuid(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameData.RemoveReservedGuid(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.GameDataUDP">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.GameDataUDP.EGameDataUDP">
            <summary>
            
            </summary>
            <remarks>In case you'd change this enum values, please upgrade the NetworkManager.c_InternalVersion</remarks>
        </member>
        <member name="F:XKTools.Net.GameDataUDP.EGameDataUDP.IP">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameDataUDP.EGameDataUDP.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.GameDataUDP.EGameDataUDP.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameDataUDP.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameDataUDP.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:XKTools.Net.GameDataUDP.IP">
            <summary>
            separated by '|'
            </summary>
        </member>
        <member name="P:XKTools.Net.GameDataUDP.Port">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.GameDataUnity">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.GameDataUnity.EGameDataUnity">
            <summary>
            
            </summary>
            <remarks>In case you'd change this enum values, please upgrade the NetworkManager.c_InternalVersion</remarks>
        </member>
        <member name="F:XKTools.Net.GameDataUnity.EGameDataUnity.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameDataUnity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.GameDataUnity.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.Net.GameDataUnity.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.Gui.NetGuiBase">
            <summary>
            Base class to handle Net Gui
            </summary>
        </member>
        <member name="F:XKTools.Net.Gui.NetGuiBase.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.Gui.NetGuiBase.m_Owner">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.Gui.NetGuiBase.m_MinHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.#ctor(XKTools.Net.IServerDiscoveryGUI,System.Boolean)">
            <summary>
            NetGuiBase constructor
            </summary>
            <param name="owner">The owner of this Gui</param>
            <param name="useOnGUI">Indicates if we should use the OnGUI method of Unity</param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.Update">
            <summary>
            Update the NetGui
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.Shutdown">
            <summary>
            Shutdown the NetGuiBase
            </summary>
        </member>
        <member name="P:XKTools.Net.Gui.NetGuiBase.UseOnGUI">
            <summary>
            Use the Unity's OnGUI method
            </summary>
        </member>
        <member name="P:XKTools.Net.Gui.NetGuiBase.NetState">
            <summary>
            TODO: Manage net state with FSM ? or Network sub-FSM?
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.ShowInfoMessage(System.String)">
            <summary>
            Show in GUI an information to the player
            </summary>
            <param name="message">The message of the information</param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.OnNetStateChanged(XKTools.Net.ENetState,XKTools.Net.ENetState)">
            <summary>
            Called when the net state is changed via the NetState accessor
            </summary>
            <param name="previousState">The previous net state</param>
            <param name="nextState">The next net state</param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.InGame(XKTools.Net.ENetState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.GUILayoutButton(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.GUILayoutBox(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.GUILayoutLabel(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiBase.GUILayoutTextField(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.Gui.NetGuiUnity">
            <summary>
            Class to handle NetGui via Unity::OnGUI method
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.#ctor(XKTools.Net.IServerDiscoveryGUI)">
            <summary>
            NetGuiUnity constructor
            </summary>
            <param name="owner">The owner of the NetGui</param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.OnGUI">
            <summary>
            Draw UI
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.OnNetStateChanged(XKTools.Net.ENetState,XKTools.Net.ENetState)">
            <summary>
            
            </summary>
            <param name="previousState"></param>
            <param name="nextState"></param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.ShowInfoMessage(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.DrawHostMenuWindowAdditionnalInfos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.DrawWaitClientWindowAdditionnalInfos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.NetGuiUnity.DrawJoinMenuWindow(System.Int32)">
            <summary>
            TODO: add field to join with ip (port ?)
            </summary>
            <param name="windowID"></param>
        </member>
        <member name="T:XKTools.Net.Gui.ChatRoomGuiUnity">
            <summary>
            Class used to handle ChatRoom via the Unity's Gui's system
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.ChatRoomGuiUnity.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Gui.ChatRoomGuiUnity.Controller">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.Gui.ChatSubNetRenderer">
            <summary>
            Class to handle chat sub net controller's gui (base)
            </summary>
        </member>
        <member name="F:XKTools.Net.Gui.ChatSubNetRenderer.m_ChatController">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.ChatSubNetRenderer.#ctor(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="guiRoot"></param>
        </member>
        <member name="M:XKTools.Net.Gui.ChatSubNetRenderer.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Gui.ChatSubNetRenderer.ChatController">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.Gui.SubNetRendererBase">
            <summary>
            Class to handle renderers for SubNetControllers
            </summary>
        </member>
        <member name="F:XKTools.Net.Gui.SubNetRendererBase.m_GuiRoot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.Gui.SubNetRendererBase.m_UpdateWhenUnactive">
            <summary>
            Tell if the renderer should be updated by the controller when the renderer is unactive
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.SubNetRendererBase.#ctor(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="guiRoot"></param>
        </member>
        <member name="M:XKTools.Net.Gui.SubNetRendererBase.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Gui.SubNetRendererBase.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.Gui.SubNetRendererBase.ShouldBeUpdated">
            <summary>
            True if the renderer is active or if UpdateWhenUnactive is true
            </summary>
        </member>
        <member name="M:XKTools.Net.Gui.SubNetRendererBase.Activate(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.Net.HostController">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.HostController.#ctor(XKTools.Net.NetworkControllerUDP)">
            <summary>
            
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:XKTools.Net.HostController.StartServer(System.Boolean,XKTools.Net.GameDataUDP)">
            <summary>
            
            </summary>
            <param name="LANOnly"></param>
            <param name="game"> </param>
        </member>
        <member name="M:XKTools.Net.HostController.ListenForClients">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.HostController.StopListening">
            <summary>
            You should not call this function directly but rather call NetworkController.Disconnect()
            </summary>
        </member>
        <member name="M:XKTools.Net.HostController.ListenForClientsCallback(System.IAsyncResult)">
            <summary>
            Called when we receive a message from a client
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:XKTools.Net.HostController.GetDataToSend">
            <summary>
            Compute data to send to a client looking for game servers
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.HostController.ParseClientPort(System.Byte[])">
            <summary>
            
            </summary>
            <param name="receivedData"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.HostController.ReadyToUse">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.HostController.ThreadSafeReadyToUSe">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.HostController.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.HostController.Game">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.INetworkable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.INetworkable.OnEnter">
            <summary>
            Event sent when the current networkable object enter in game and created all other Networkable Avatars.
            </summary>
        </member>
        <member name="M:XKTools.Net.INetworkable.OnLeave">
            <summary>
            Event sent when the networkable object left the game.
            </summary>
        </member>
        <member name="M:XKTools.Net.INetworkable.OnError(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XKTools.Net.INetworkable.SetLocalServer(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="local"></param>
            <param name="server"></param>
        </member>
        <member name="M:XKTools.Net.INetworkable.ReceiveData(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            <para>When distant object update themselves, they can send there data over the network through the NetworkController.SendData(NetData data) function.</para>
            <para>This can also be used to communicate with another networkable object.</para>
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
        </member>
        <member name="P:XKTools.Net.INetworkable.IsLocalPlayer">
            <summary>
            Says wether or not the INetworkable object is a local object uses a distant control.
            </summary>
        </member>
        <member name="P:XKTools.Net.INetworkable.IsServer">
            <summary>
            Says wether or not the INetworkable object is server
            </summary>
        </member>
        <member name="P:XKTools.Net.INetworkable.PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.MessageStatsHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.MessageStatsHandler.MessageStatsEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.MessageStatsEntry.SentCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.MessageStatsEntry.ReceivedCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.MessageStatsEntry.Sizes">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.MessageStatsEntry.TotalSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.MessageStatsEntry.AverageSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.MessageStatsEntry.AddOccurence(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="sent"></param>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.MessageStatsEntry.GetTotalSize(XKTools.Net.MessageStatsHandler.MessageStatsEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.MessageStatsEntry.GetAverageSize(XKTools.Net.MessageStatsHandler.MessageStatsEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.MessageStatsEntry.GetSentCount(XKTools.Net.MessageStatsHandler.MessageStatsEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.MessageStatsEntry.GetReceivedCount(XKTools.Net.MessageStatsHandler.MessageStatsEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.ActivationTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.SentMessageCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.ReceivedMessageCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.TotalUsedBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.AveragUsedBandwith">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.TotalBiggestMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.AverageBiggestMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.MaxSizes">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.MinSizes">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.SizesStdDev">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.SNetworkTrafficStats.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.MessageStatsHandler.ESortCategory">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.Sent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.Received">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.SentAndReceived">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.TotalBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.AverageBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.StandardDeviation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortCategory.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.MessageStatsHandler.ESortOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortOrder.Ascending">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.MessageStatsHandler.ESortOrder.Descending">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.#ctor(XKTools.Context.ContextManager)">
            <summary>
            
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.AddMessageEntry(XKTools.Context.Message.MessageBase,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="size"></param>
            <param name="sent"></param>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.ComputeStats">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.ResetStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.Dictionary2List``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.SaveStatsToCSV(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.DisplayGUI">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.MessageStatsHandler.OnExternalGUI">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.MessageStatsHandler.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetData">
            <summary>
            This class helps to send data over the network.
            </summary>
        </member>
        <member name="T:XKTools.Net.NetData.ESendType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetData.ESendType.WaitForSyncTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetData.ESendType.Immediate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetData.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Net.NetData.#ctor(System.String,XKTools.Net.ERPCMode)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="rpcMode"></param>
        </member>
        <member name="M:XKTools.Net.NetData.#ctor(System.String,XKTools.Net.ERPCMode,XKTools.Net.NetData.ESendType)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="rpcMode"></param>
            <param name="sendType"></param>
        </member>
        <member name="M:XKTools.Net.NetData.#ctor(System.String,XKTools.Net.ERPCMode,XKTools.Net.NetData.ESendType,XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="rpcMode"></param>
            <param name="sendType"></param>
            <param name="target">If non null, this will override the ERPCMode</param>
        </member>
        <member name="M:XKTools.Net.NetData.PushData(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:XKTools.Net.NetData.Serialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.NetData.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetData.Buffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetData.SendType">
            <summary>
            <para>This explicits wheter or not the package will be immediately send.</para>
            <para>Default is WaitForSyncTime</para>
            </summary>
        </member>
        <member name="P:XKTools.Net.NetData.SyncTime">
            <summary>
            <para>This explicits the remaining time to wait wbefore sending data through network.</para>
            <para>Default is 0.1 second</para>
            </summary>
            <remarks>
            A null or negative value will be considered as Immediate sending
            </remarks>
        </member>
        <member name="P:XKTools.Net.NetData.RPCMode">
            <summary>
            <para>ERPCMode.All             -> Sends to everyone (me included)</para>
            <para>ERPCMode.AllBuffered     -> Sends to everyone (me included) and adds to the buffer</para>
            <para>ERPCMode.Others          -> Sends to everyone but me, server included</para>
            <para>ERPCMode.OthersBuffered  -> Sends to everyone but me, server included and adds to the buffer (all but me?, server included)</para>
            <para>ERPCMode.Server          -> Sends to the server only</para>
            </summary>
        </member>
        <member name="P:XKTools.Net.NetData.Target">
            <summary>
            <para>This helps to send messages to someone in particular.</para>
            <para>This overrides the chosen ERPCMode</para>
            </summary>
        </member>
        <member name="M:XKTools.Net.NetData.Unserialize(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetData.ExtractListFromMessage(System.String,System.Byte[],System.Collections.ArrayList@)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.ERPCMode">
            <summary>
            Option for who will receive an RPC, used by NetworkView.RPC.
            </summary>
        </member>
        <member name="F:XKTools.Net.ERPCMode.Server">
            <summary>
            Sends to the server only.
            </summary>
        </member>
        <member name="F:XKTools.Net.ERPCMode.Others">
            <summary>
            Sends to everyone except the sender.
            </summary>
        </member>
        <member name="F:XKTools.Net.ERPCMode.All">
            <summary>
            Sends to everyone.
            </summary>
        </member>
        <member name="F:XKTools.Net.ERPCMode.OthersBuffered">
            <summary>
            Sends to everyone except the sender and adds to the buffer.
            </summary>
        </member>
        <member name="F:XKTools.Net.ERPCMode.AllBuffered">
            <summary>
            Sends to everyone and adds to the buffer.
            </summary>
        </member>
        <member name="T:XKTools.Net.ENetState">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.MainMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.JoinMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.HostMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.WaitServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.WaitClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.Processing">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.Playing">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ENetState.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.EConnectionMessage">
            <summary>
            This enum is mostly used for other networks than Unity's (Steam and Nuggeta for instance)
            </summary>
        </member>
        <member name="F:XKTools.Net.EConnectionMessage.ConnectionAccepted">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EConnectionMessage.ExistingPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EConnectionMessage.JoinPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EConnectionMessage.ForceDisconnection">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EConnectionMessage.RequestSendAllPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.EDisconnectionReason">
            <summary>
            
            </summary>
            <remarks>In case you'd change this enum values, please upgrade the NetworkManager.c_InternalVersion</remarks>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_JoinServerFailed">
            <summary>
            Joining server failed
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_GameStarted">
            <summary>
            Game is already started, the user tries to connect right after the server player hits Start
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_GameFinished">
            <summary>
            Game is over already
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_SyncError">
            <summary>
            The packets are not ordered at receipt
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_Checksum">
            <summary>
            The packets are not complete or were modified during transport
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_INetworkable">
            <summary>
            The INetworkable creation failed
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_UnknownPlayer">
            <summary>
            The system was unable to convert the Guid to an INetworkable
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed_NullGuid">
            <summary>
            The guid is null
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.ConnectionFailed">
            <summary>
            The connection failed without any obvious reason
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.TimeOut">
            <summary>
            Too much time without new remote message
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.BadVersion">
            <summary>
            The games are not compatible as is
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.Kicked">
            <summary>
            The user's been kicked of the current game, he can come back if he wants
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.Banned">
            <summary>
            The user's been banned by the server (he will remain banned from the server until the server restarts the application)
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.NoUserName">
            <summary>
            The user did not set its name
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.NoGameName">
            <summary>
            The host did not set its game name
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.NewVersionAvailable">
            <summary>
            The game has detected lobby games with a newest version number
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.Full">
            <summary>
            The game is full already
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.CreateServerFailed">
            <summary>
            Server creation has failed
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.LobbyOwnerLeft">
            <summary>
            The game owner's left the game
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.LobbyMemberLeft">
            <summary>
            A player has left
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.AllLobbyMembersLeft">
            <summary>
            All other players left, only server remains
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EDisconnectionReason.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.EChatEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EChatEvent.ReceiveMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EChatEvent.SendMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EChatEvent.ChangeChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.EChatEvent.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.ERegion">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.Worldwide">
            <summary>
            No limitation, the whole world is considered
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.WholeWorld">
            <summary>
            No limitation, the whole world is considered
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.Europe">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.America">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.Africa">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.Asia">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.Oceania">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ERegion.Count">
            <summary>
            Should not be used except for AdjustIdx functions
            </summary>
        </member>
        <member name="T:XKTools.Net.EInterfaceType">
            <summary>
            Interface type which can be displayed
            </summary>
        </member>
        <member name="F:XKTools.Net.EInterfaceType.None">
            <summary>
            No interface, will disabled connector
            </summary>
        </member>
        <member name="F:XKTools.Net.EInterfaceType.Host">
            <summary>
            Can't be set when connected as Client
            </summary>
        </member>
        <member name="F:XKTools.Net.EInterfaceType.Client">
            <summary>
            Can't be set when connected as Host
            </summary>
        </member>
        <member name="F:XKTools.Net.EInterfaceType.HostAndClient">
            <summary>
            Display all menu entries
            </summary>
        </member>
        <member name="F:XKTools.Net.EInterfaceType.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.INetworkBaseGUI">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.INetworkBaseGUI.enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.INetworkBaseGUI.DisplayInterface">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.INetworkBaseGUI.StopClientBroadcastListener">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.INetworkBaseGUI.WantedNetState">
            <summary>
            Wanted net state to set after NetworkManager.ShowConnector call
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkBaseGUI`1">
            <summary>
            This GUI displays nothing, it just provides members used by other classes.
            See XKTools.Samples.Net.NetworkConnectorGUI for an implementation example
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_NetworkManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_NetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.c_VerticalRectCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.c_HorizontalRectCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_FullRects">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_HalfRects">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_ThirdRects">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_AllOverRects">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_DisplayInterface">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_ErrorLog">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_ConnectionValidated">
            <summary>
            Use this value to display "waiting for validation..."
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_ConfigurationSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_Configurations">
            <summary>
            This table represents all configurations possible.
            It should be used as a List(string) representing possible values for a configuration
            Exemple : m_Configurations.Add("SendEveryFrame", new string[] { "yes", "no" });
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_GameNameBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_UserNameBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.m_WantedNetState">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkBaseGUI`1.ConfigurationChangedDelegate">
            <summary>
            This will help knowing what to do when configuration has changed
            </summary>
            <param name="configurationsSet"></param>
        </member>
        <member name="F:XKTools.Net.NetworkBaseGUI`1.OnConfigurationChange">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkBaseGUI`1.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkBaseGUI`1.InitializeConfigurations(System.Collections.Hashtable)">
            <summary>
            Prepare configurations. Each first value will be set as default.
            </summary>
            <param name="configurations"></param>
        </member>
        <member name="M:XKTools.Net.NetworkBaseGUI`1.ComputeRectangles">
            <summary>
            Compute GUI rectangles
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkBaseGUI`1.StopClientBroadcastListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkBaseGUI`1.StoreUserAndGameName(System.Boolean)">
            <summary>
            
            </summary>
            <param name="storeGameName"></param>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.WaitForSyncTime">
            <summary>
            This function is helpful in a first time to set no the device the way of transmission
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.RPCMode">
            <summary>
            This function is helpful in a first time to set no the device the way of transmission
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.DefaultGameName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.DefaultUserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.DisplayInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.ConnectionValidated">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.ErrorLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.Configurations">
            <summary>
            This table represents all configurations possible.
            It should be used as a List(string) representing possible values for a configuration
            Exemple : m_Configurations.Add("SendEveryFrame", new string[] { "yes", "no" });
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.ConfigurationSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.GameName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkBaseGUI`1.WantedNetState">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkController">
            <summary>
            This object helps sending data over the network.
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkController.NetworkEventDlg">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkController.PlayerConnectionDlg">
            <summary>
            
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:XKTools.Net.NetworkController.UpdateGameAverageDlg">
            <summary>
            
            </summary>
            <param name="avg"></param>
        </member>
        <member name="T:XKTools.Net.NetworkController.GameDatasReceivedDlg">
            <summary>
            
            </summary>
            <param name="gameData"></param>
        </member>
        <member name="T:XKTools.Net.NetworkController.TimeOutDlg">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkController.TimeOutProcessDlg">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkController.CheckPlayerInfosValidityDlg">
            <summary>
            
            </summary>
            <param name="controller"></param>
            <param name="senderGuid"></param>
            <param name="newData"></param>
            <returns></returns>
        </member>
        <member name="F:XKTools.Net.NetworkController.JoinedPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.DisconnectedPlayer">
            <summary>
            
            <remarks>if player in argument is null then disconnect method has been called before and this method is fired for the local player (null) to ensure disconnection flow</remarks>
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.ServerCreated">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.ServerReadyToStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.CheckPlayerInfoValidity">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.GameDatasReceived">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.PlayerTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.ProcessTimeOut">
            <summary>
            if null all timeout players will be disconnected
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.UpdateGameAveragePing">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.UpdateGameAverageSkillPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_BasePort">
            <summary>
            TODO: set to 25000. It's 25011 to avoid conflict with tunnel project.
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_PingRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_GameDataRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_PlayerInfosRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_ChatRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_TimeOutRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.c_PingToSeconds">
            <summary>
            Used to convert a ping value (int) to a time value (in seconds).
            It's multiplied by 0.5f to anticipate back and forth travel.
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.m_DedicatedServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.m_CanChangeServerProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.m_NetState">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkController.m_WaitingGuids">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnExternalGUI">
            <summary>
            Shows a FloatBox to set a ping
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.StartGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.SendNetData(XKTools.Net.NetData)">
            <summary>
            <para>There are two ways to send NetData:</para>
            <para>- using a RPCMode saying who are the addressee</para>
            <para>- giving a INetworkable target (overrides RPCMode data)</para>
            <para>If the SendType is not immediate (so it is WaitForSyncTime) then the reference will help to send only the atest version of the data</para>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.Disconnect(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.DisconnectInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.DisconnectPlayer(XKTools.Net.INetworkable,XKTools.Net.EDisconnectionReason)">
            <summary>
            Ask for given player disconnection (can be called only from server)
            </summary>
            <param name="player">The player to kick/ban</param>
            <param name="reason">The disconnection reason</param>
        </member>
        <member name="M:XKTools.Net.NetworkController.GetOrdererUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkController.Pause(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.IsAsync">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.GamePrefix">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.GamePrefixBytes">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.NetworkUpdateIntervalMax">
            <summary>
            <para>This values helps limiting the amouint of data sent in one frame.</para>
            <para>The client wil wait for the specified time before he can send its data.</para>
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.NetState">
            <summary>
            Unused as is by the NetworkController, this is mostly helpful for Connector
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.DedicatedServer">
            <summary>
            Says wether or not the Server is considered as a Player (not if true)
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.MessageSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.MessageSeparatorAsString">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.PlayerDatasRefreshPeriod">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.Region">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.Jitter">
            <summary>
            Use this for debug with unstable ping
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkController.Latency">
            <summary>
            Use this for debug with huge ping
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.CreateServer(XKTools.Net.GameData,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.ConnectToServer(System.Int32,System.Int32,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.KillServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnRemotePlayerLeave``1(``0,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnReceiveErrorMessage(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.StatSendData(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.StatSendData(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.SendData(XKTools.Net.NetData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.TransmitData``1(System.String,System.Byte[],``0,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.ReceiveDatas``1(System.String,System.Byte[],``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="fromGuid"></param>
            <param name="toGuid"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.ClearPlayersData">
            <summary>
            Clear all hashtables and call OnLeave() for each player.
            You should call this method every time you want to leave the game.
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.CleanConnectionData">
            <summary>
            Cleans the connection data
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.ProcessReceiveNetDataFrom``1(System.String,System.Byte[],``0,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnCreateServerFailed">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnJoinServerFailed">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnConnectionFailed(System.Boolean,XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
            <param name="isServer">true if CERTAINTY called by server</param>
            <param name="reason"> </param>
        </member>
        <member name="M:XKTools.Net.NetworkController.GetLocalIPAddresses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnServerCreated``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnServerReceiveConnection``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.ServerSendConnectionAcceptation``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnClientReceiveConnectionAccepted``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="serverGuid"> </param>
        </member>
        <member name="M:XKTools.Net.NetworkController.ClientAskExistingPlayers``1(``0,``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="serverGuid"> </param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnServerReceiveAskExistingPlayers``1(``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.ServerSendExistingPlayer``1(``0,``0,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="guid"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.ServerSendPlayerToOthers``1(``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnClientReceiveExistingPlayer``1(``0,``0,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientID"></param>
            <param name="guid"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnClientReceiveNewPlayer``1(``0,``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="localGuid"></param>
            <param name="clientGuid"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.ServerSendForceDisconnectPlayerToOthers``1(``0,XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="reason"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnClientReceiveForceDisconnect``1(``0,XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="reason"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.OnPlayerLeave``1(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.UpdateAveragePing(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.SendPlayerInfos(XKTools.Context.Const.ENetDirection,XKTools.XKHashtable,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.CheckGameDataState">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.SendGameData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkController.CreateGameData(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.Net.NetworkController.HasEmptySlot(XKTools.Net.GameData)">
            <summary>
            
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkController.GetFakeTime">
            <summary>
            Compute fake current time given a latency and a jitter value
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.NetworkControllerBase">
            <summary>
            This object helps sending data over the network.
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_CurrentGame">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_PlayerDatas">
            <summary>
            This is a temporary value used to transmit player data from NetworkController to the LocalPlayer
            it will be release once the client is transformed to a INetworkable
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_Guids">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_GuidToINetworkable">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_StringToGuid">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_INetworkableToGuid">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_INetworkableToFakeGuid">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_FakeGuidToINetworkable">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_ServerPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_LocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_LocalPlayerInfos">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_LastLocalPlayerInfos">
            <summary>
            Used only for the server. It's used to store the player infos
            before checking the validity of the new ones.
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerBase.m_ChatController">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.IsAsync">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.CurrentGame">
            <summary>
            The datas of the current game
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.PlayerCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.Guids">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.GuidToINetworkable">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.INetworkableToGuid">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.GetNetworkableGuid(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="networkable"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.GetIdxInGuidsOf(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="networkable"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.IsFakeUser``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.ShowLockedGames">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.LocalPlayerInfos">
            <summary>
            
            Warning: do not use it if server modify player infos of clients. m_LocalPlayerInfos is not updated in this case
            Looking for m_LocalPlayerInfos to found the where m_LocalPlayerInfos should be updated
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.LocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerBase.ChatController">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.SendNetData(XKTools.Net.NetData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.Disconnect">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.StartGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.ReactivateLobby">
            <summary>
            Unlocks the current games
            Allows others to see the game
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CheckPlayerCanJoin``1(``0,``0,System.Int32,System.Int32,XKTools.Net.GameData,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="friend"></param>
            <param name="internalVersion"></param>
            <param name="externalVersion"></param>
            <param name="game"></param>
            <param name="checkForUpdate"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.ActivateChat(XKTools.Net.Gui.ChatSubNetRenderer,System.Boolean)">
            <summary>
            Activate the chat with the given renderer (will be initialized)
            </summary>
            <param name="r">The renderer used to render the chat (will be initialized here)</param>
            <param name="reset">If true, remove al the previous messages of the ChatRoom</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.RemoveChat">
            <summary>
            Also calls shutdown on chat controller
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.AddFakeNetworkable(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CreateFakeGuid(XKTools.Net.INetworkable)">
            <summary>
            Create a fake GUID (as string by default, can be overriden to change its type)
            </summary>
            <param name="networkable"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.PushPlayer(System.Object,XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="playerGuid"></param>
            <param name="networkablePlayer"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.AddSubNetController``1">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CreateServer(XKTools.Net.GameData,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.ConnectToServer(System.Int32,System.Int32,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.ConvertFromGuidToINetworkable(System.Object,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.ConvertFromGuidToINetworkable(System.Object,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CreateINetworkablePlayer``1(System.Boolean,System.Boolean,``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CheckPlayerCanJoin``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CheckPlayerIsFriend``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.HasEmptySlot(XKTools.Net.GameData)">
            <summary>
            
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.ClearPlayersData">
            <summary>
            Clear all hashtables and call OnLeave() for each player.
            You should call this method every time you want to leave the game.
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.KeepEffectiveDatas(System.Byte[]@,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CheckGameData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.AddLocalPlayerInfos(XKTools.XKHashtable,System.Boolean)">
            <summary>
            Add some player infos to the game datas
            </summary>
            <param name="pi">The players infos to add</param>
            <param name="clearPreviousPlayerInfos">The players might have been previously set, override them?</param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.SendPlayerInfos(XKTools.Context.Const.ENetDirection,XKTools.XKHashtable,System.Object)">
            <summary>
            
            </summary>
            <param name="dir">is not used in async case</param>
            <param name="infos"> </param>
            <param name="senderGuid"> </param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.UpdatePlayerInfos(System.Object,XKTools.XKHashtable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.CheckGameDataState">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.SendGameData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerBase.OnGameDatasUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkControllerUDP">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.CreateServer(XKTools.Net.GameData,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <param name="gameData"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.CreateServer(System.Boolean,XKTools.Net.GameDataUDP,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <param name="LANOnly"></param>
            <param name="gameData"></param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.ConnectToServer(System.Int32,System.Int32,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.StartGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.ReactivateLobby">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.KillServer">
            <summary>
            NOTE: m_HostController.StopListening() has to be called 
            before m_NetworkController.KillServer()
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.CloseUdpState(XKTools.Net.UdpState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUDP.CreateGameDataUDP(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.InvalidPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.FirstGamePort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.LastGamePort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.FirstListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.LastListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.FirstClientPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.LastClientPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.MaxServers">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.AllowedConnections">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.LocalAddresses">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.HostController">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkControllerUDP.ClientController">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkControllerUnity">
            <summary>
            This object helps sending data over the network.
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerUnity.c_ErrorServerFull">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkControllerUnity.c_ErrorServerLocked">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.CreateNetworkController(UnityEngine.GameObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.CreateServer(System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ConnectToServer(XKTools.Net.GameDataUnity,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <param name="game"> </param>
            <param name="playerDatas"> </param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.StartGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.BroadcastNetworkPlayers">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.DisconnectInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.OnRemotePlayerLeave``1(``0,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.SendData(XKTools.Net.NetData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.TransmitData``1(System.String,System.Byte[],``0,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ClearPlayersData">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.CreateGameData(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.CreateGameDataUDP(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ServerSendConnectionAcceptation``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ServerSendExistingPlayer``1(``0,``0,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="guid"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ServerSendPlayerToOthers``1(``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="playerDatas"></param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ServerSendForceDisconnectPlayerToOthers``1(``0,XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="reason"> </param>
        </member>
        <member name="M:XKTools.Net.NetworkControllerUnity.ClientAskExistingPlayers``1(``0,``0,XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid"></param>
            <param name="serverGuid"> </param>
            <param name="playerDatas"></param>
        </member>
        <member name="T:XKTools.Net.NetworkManager">
            <summary>
            <para>This class contains the network controller responsible for sending and receiving data.</para>
            <para>This class also manages the GUI interface that helps connecting to the world (even the local world).</para>
            <para></para>
            <para>    Usage:</para>
            <para>        First, you have to register a function that is able to create your INetworkable "Avatar" in game.</para>
            <para>            -> Use NetworkController.CreatePlayer = SphereAvatar.CreateTestObject; // (for instance)</para>
            <para>        Then, you can set the function to create your own GUI (default GUI display nothing).</para>
            <para>            -> You can use NetworkManager.CreateGUI = ServerDiscoveryGUI.CreateGUI;</para>
            <para>        Then, you'll need to create a server and connect clients (the NetworkConnectorGUI makes the trick).</para>
            <para>        Finally, you can send data that way:</para>
            <para>                NetData data = new NetData("MyReference");</para>
            <para>                data.PushData(m_WhateverDataAsLongAsItsSerializable);</para>
            <para>                data.SendType = ESendType.WaitForSyncTime;</para>
            <para>                data.RPCMode = ERPCMode.Others;</para>
            <para>                s_NetworkManager.NetworkController.SendNetData(data);</para>
            </summary>
        </member>
        <member name="T:XKTools.Net.NetworkManager.GUICreationDlg">
            <summary>
            Delegate used to instantiate GUI
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.NetworkManager.NetworkCtrlCreationDlg">
            <summary>
            Delegate used to instantiate NetworkController
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.NetworkManager.AsyncNetworkCtrlCreationDlg">
            <summary>
            Delegate used to instantiate AsyncNetworkController
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.NetworkManager.CreatePlayerCB">
            <summary>
            this will help to give the INetworkable Interface to the game
            </summary>
            <param name="isLocalPlayer"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.NetworkManager.IsVersionCompatibleDlg">
            <summary>
            
            </summary>
            <param name="currentVersion"></param>
            <param name="targetVersion"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Net.NetworkManager.ErrorEventDlg">
            <summary>
            
            </summary>
            <param name="errorMessage">The message (already localized)</param>
        </member>
        <member name="F:XKTools.Net.NetworkManager.CreateGUI">
            <summary>
            Set this member to use your own GUI
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.CreateNetworkController">
            <summary>
            Set this member to use your own NetworkController
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.CreateAsyncNetworkController">
            <summary>
            Set this member to use your own NetworkController
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.CreatePlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.IsExternalVersionCompatible">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.NetworkError">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.c_InternalVersion">
            <summary>
            In case the generic Network flow changes, please upgrade this value
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.s_ExternalVersion">
            <summary>
            This value represents the game flow version number in order to play with people that own the same game flow
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.s_CheckForUpdate">
            <summary>
            Check for available game updates when finding incompatible versions in the lobby
            </summary>
        </member>
        <member name="F:XKTools.Net.NetworkManager.s_TimeOutValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.OnGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.ShowConnector(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="displayHost"></param>
            <param name="displayClient"></param>
        </member>
        <member name="M:XKTools.Net.NetworkManager.ShowConnector(System.Boolean,System.Boolean,XKTools.Net.ENetState)">
            <summary>
            
            </summary>
            <param name="displayHost"></param>
            <param name="displayClient"></param>
            <param name="defaultNetState">MainMenu by default</param>
        </member>
        <member name="M:XKTools.Net.NetworkManager.ClearConnector">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.NetworkManager.DefaultGUICreation(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.DefaultNetworkCtrlCreation(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.DefaultAsyncNetworkCtrlCreation(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.DefaultCompatibleVersion(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.IsVersionCompatible(XKTools.Net.GameData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="log"> </param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.IsVersionCompatible(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="gameName"></param>
            <param name="internalVersion"></param>
            <param name="externalVersion"></param>
            <param name="log"> </param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.IsVersionCompatible(System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="internalVersion"></param>
            <param name="externalVersion"></param>
            <param name="log"> </param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.NetworkManager.CheckForUpdate(System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="internalVersion"></param>
            <param name="externalVersion"></param>
            <param name="devGame"></param>
        </member>
        <member name="M:XKTools.Net.NetworkManager.SpawnError(XKTools.Net.EDisconnectionReason)">
            <summary>
            
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:XKTools.Net.NetworkManager.SpawnError(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="locKey"> </param>
            <param name="defaultMessage"> </param>
        </member>
        <member name="P:XKTools.Net.NetworkManager.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.AsyncNetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.NetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.CurrentNetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.NetworkConnector">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.UniqueGameName">
            <summary>
            This will prevent displaying other games than the current one
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.DefaultSkillPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.NetworkManager.IsCurrentCtrlAsync">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.PlayerData">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.PlayerData.EPlayerData">
            <summary>
            
            </summary>
            <remarks>In case you'd change this enum values, please upgrade the NetworkManager.c_InternalVersion</remarks>
        </member>
        <member name="T:XKTools.Net.PlayerData.PingUpdatedDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.PlayerData.PingUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PlayerData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PlayerData.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PlayerData.CheckEntry(System.Collections.DictionaryEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PlayerData.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PlayerData.SetPing(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PlayerData.ResetPing">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.InternalNetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.ExternalNetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.GUID">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.SkillPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.PingAsMilliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.PingAsSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.PlayerData.ReachLastPingCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.ChatSubNetController">
            <summary>
            Class used to handle chat
            </summary>
        </member>
        <member name="T:XKTools.Net.ChatSubNetController.EChatMessageType">
            <summary>
            Any changes in this enum should be followed with a InternalVersion upgrade
            </summary>
        </member>
        <member name="F:XKTools.Net.ChatSubNetController.EChatMessageType.Message">
            <summary>
            A regular message
            </summary>
        </member>
        <member name="F:XKTools.Net.ChatSubNetController.EChatMessageType.NotLocalizedMessage">
            <summary>
            A message to localized when it has been received
            </summary>
        </member>
        <member name="F:XKTools.Net.ChatSubNetController.EChatMessageType.PreviousMessageRequest">
            <summary>
            A request for previous messages
            </summary>
        </member>
        <member name="F:XKTools.Net.ChatSubNetController.EChatMessageType.PreviousMessageResponse">
            <summary>
            A previous message sent by the server on arrival
            </summary>
        </member>
        <member name="F:XKTools.Net.ChatSubNetController.EChatMessageType.PreviousMessageEnd">
            <summary>
            Sent by the server when all the previous messages have been sent, to set us ready
            </summary>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.CreateDefaultRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ChatSubNetController.Chat">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ChatSubNetController.LastMessagesCount">
            <summary>
            Define the number of previous messages the new connected players will get
            Default is defined by c_DefaultLastMessagesCount member
            </summary>
        </member>
        <member name="P:XKTools.Net.ChatSubNetController.ReplaceTk2dSpecialChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.SendChatMessage(System.String,System.Int32)">
            <summary>
            Allow the local player to send a message on the chat
            </summary>
            <param name="message">The message</param>
            <param name="channel">The channel</param>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.SendChatMessage(System.String,System.Int32,XKTools.Net.ChatSubNetController.EChatMessageType)">
            <summary>
            Allow the local player to send a message on the chat
            </summary>
            <param name="message">The message</param>
            <param name="channel">The channel</param>
            <param name="messageType"> </param>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.AddChannelMessage(System.String,System.Int32)">
            <summary>
            Add a message written by the channel (info message for example)
            </summary>
            <param name="message">The message</param>
            <param name="channelId">The channel</param>
        </member>
        <member name="M:XKTools.Net.ChatSubNetController.ReceiveChatMessage(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            Receive a chat message from the network
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
        </member>
        <member name="T:XKTools.Net.PingSubNetController">
            <summary>
            Class used to handle the ping (update...)
            </summary>
        </member>
        <member name="T:XKTools.Net.PingSubNetController.EPingMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.PingSubNetController.EPingMessage.AskPing">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.PingSubNetController.EPingMessage.Receipt">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.PingSubNetController.EPingMessage.SendPingToAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PingSubNetController.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.PingSubNetController.OnAllPlayersAreReady(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Net.PingSubNetController.OnPingMessage(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
        </member>
        <member name="T:XKTools.Net.SubNetControllerBase">
            <summary>
            Class used to handle sub net controllers (ping, chat...)
            </summary>
        </member>
        <member name="F:XKTools.Net.SubNetControllerBase.m_NetworkControllerBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.SubNetControllerBase.m_NetworkController">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.SubNetControllerBase.m_Renderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.SubNetControllerBase.Renderer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.SubNetControllerBase.NetCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.CreateDefaultRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.OnReceiveExistingPlayer(XKTools.Net.INetworkable)">
            <summary>
            Called on server to notify the controllers we have received an existing player
            </summary>
            <param name="player">The new player</param>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.OnReceiveNewPlayer(XKTools.Net.INetworkable)">
            <summary>
            Called on server to notify the controllers we have received a new player
            </summary>
            <param name="player">The new player</param>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.OnPlayerLeave(XKTools.Net.INetworkable)">
            <summary>
            Called on server to notify the controllers a player left
            </summary>
            <param name="player">The left player player</param>
        </member>
        <member name="M:XKTools.Net.SubNetControllerBase.OnAllPlayersAreReady(System.Boolean)">
            <summary>
            called once all players are ready
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.Net.TimeOutSubNetController">
            <summary>
            Class used to handle the ping (update...)
            </summary>
        </member>
        <member name="T:XKTools.Net.TimeOutSubNetController.ETimeOutMessageType">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.TimeOutSubNetController.ETimeOutMessageType.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.TimeOutSubNetController.ETimeOutMessageType.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnReceiveExistingPlayer(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnReceiveNewPlayer(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnPlayerLeave(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnAllPlayersAreReady(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.ClearTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnApplicationPause(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnReceiveMessage(XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:XKTools.Net.TimeOutSubNetController.OnReceiveTimeOutMessage(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.UdpState">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.IServerDiscoveryGUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.CreateServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.CreateServer(XKTools.Net.ERegion)">
            <summary>
            
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.SelectGameToJoin(XKTools.Net.GameData)">
            <summary>
            
            </summary>
            <param name="game"></param>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.GameName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.NetworkCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.NetGui">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.CurrentGame">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.MaxPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.GameVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.BackRequestedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.EnterLobbyEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.IServerDiscoveryGUI.LeaveLobbyEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.LeaveGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.KillServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.TryRefresh">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.TryRefresh(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceRefresh"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.ComputeAvailableGames">
            <summary>
            ComputeAvailableGames(ERegion.WholeWorld);
            </summary>
            <remarks>KTBG is up to date already</remarks>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.ComputeAvailableGames(XKTools.Net.ERegion)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.IServerDiscoveryGUI.SetGuiNetState(XKTools.Net.ENetState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:XKTools.Net.EGameVisibility">
            <summary>
            Game Visibility (matches with Steam enum)
            </summary>
        </member>
        <member name="F:XKTools.Net.EGameVisibility.Private">
            <summary>
            only way to join the lobby is to invite to someone else
            </summary>
        </member>
        <member name="F:XKTools.Net.EGameVisibility.FriendsOnly">
            <summary>
            shows for friends or invitees, but not in lobby list
            </summary>
        </member>
        <member name="F:XKTools.Net.EGameVisibility.Public">
            <summary>
            visible for friends and in lobby list
            </summary>
        </member>
        <member name="F:XKTools.Net.EGameVisibility.Invisible">
            <summary>
            returned by search, but not visible to other friends
                useful if you want a user in two lobbies, for example matching groups together
                a user can be in only one regular lobby, and up to two invisible lobbies
            </summary>
        </member>
        <member name="T:XKTools.Net.OnNetBackRequestedDlg">
            <summary>
            Should be called when the back action is requested (from menus, for example) on project side
            </summary>
        </member>
        <member name="T:XKTools.Net.OnNetEnterLobbyDlg">
            <summary>
            Called automatically in ServerDiscoveryGUI when the player enters the lobby
            </summary>
            <param name="isServer">Indicates if the player is server (has created the lobby) or client (has joined the lobby)</param>
        </member>
        <member name="T:XKTools.Net.OnNetLeaveLobbyDlg">
            <summary>
            Called automatically in ServerDiscoveryGUI when the player leaves the lobby
            </summary>
        </member>
        <member name="T:XKTools.Net.ServerDiscoveryGUI`2">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Net.ServerDiscoveryGUI`2.c_RefreshDelay">
            <summary>
            Caution: the game list will be refresh with a delay of c_RefreshDelay seconds
            but, due to double buffer use, a game creation / deletion will only be visible 
            2*c_RefreshDelay seconds after it happened.
            <see cref="F:XKTools.Net.ServerDiscoveryGUI`2.m_AvailableGames"/>
            <see cref="P:XKTools.Net.ClientController.Games"/>
            </summary>
        </member>
        <member name="F:XKTools.Net.ServerDiscoveryGUI`2.m_AvailableGames">
            <summary>
            Buffer used in parallel with ClientControl.Games to avoid glittering.
            The displayed games are actually the game available at the previous update.
            </summary>
        </member>
        <member name="F:XKTools.Net.ServerDiscoveryGUI`2.m_NetGui">
            <summary>
            The NetGui (either Unity GUI or other UI system)
            </summary>
        </member>
        <member name="F:XKTools.Net.ServerDiscoveryGUI`2.m_GameVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.OnEnable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.OnDisable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.NetworkCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.CurrentGame">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.MaxPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.GameVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.BackRequestedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.EnterLobbyEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.LeaveLobbyEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.CreateServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.CreateServer(XKTools.Net.ERegion)">
            <summary>
            
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.SelectGameToJoin(XKTools.Net.GameData)">
            <summary>
            
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.LeaveGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.KillServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.TryRefresh">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.TryRefresh(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceRefresh"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.ComputeAvailableGames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.ComputeAvailableGames(XKTools.Net.ERegion)">
            <summary>
            
            </summary>
            <param name="region">Using ERegion.WholeWorld skips region limitation</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.SetGuiNetState(XKTools.Net.ENetState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.GameName">
            <summary>
            The name of the current game if exists, the name in buffer otherwise
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.CreateGame">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.JoinGame(`1)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.CreateDefaultNetGui">
            <summary>
            Create a default net gui (with OnGUI method)
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUI`2.OnServerCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Net.ServerDiscoveryGUI`2.NetGui">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.ServerDiscoveryGUIUDP`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUIUDP`2.StopClientBroadcastListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUIUDP`2.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Net.ServerDiscoveryGUIUnity">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUIUnity.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUIUnity.JoinGame(XKTools.Net.GameDataUnity)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUIUnity.CreateGame">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Net.ServerDiscoveryGUIUnity.CreateGUI(UnityEngine.GameObject)">
            <summary>
            
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.MemberChecker">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.MemberChecker.Enable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.MemberChecker.GetNoNullReferences(System.Object)">
            <summary>
            Return all fields not null &#60;FieldName, ClassTypeWhereFieldIsDecladred&#62;
            Use this method to get a base for comparaison in GetCheckLog
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.MemberChecker.GetCheckLog(System.Object,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            
            </summary>
            <param name="obj">object to check</param>
            <param name="baseForComparaison">Use GetNoNullReferences before. default is null</param>
        </member>
        <member name="M:XKTools.MemberChecker.GetCheckLog(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.ObjectCounter">
            <summary>
            This ObjectCounter version is based on lists that we hope will not fail as Dictionaries
            This original Object Counter version based on Dictionary locked up sometimes with OutOfSync or InvalidArgument exceptions.
            </summary>
        </member>
        <member name="M:XKTools.ObjectCounter.AddInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.ObjectCounter.RemoveInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.ObjectCounter.DisplayCountersSinceLastCall(System.Object,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ObjectCounter.Active">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ObjectCounter.GetObjectCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.MonoBehaviourPersistantSingleton`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XKTools.MonoBehaviourPersistantSingleton`1.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.MonoBehaviourPersistantSingleton`1.IsInstanciated">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.MonoBehaviourPersistantSingleton`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.MonoBehaviourPersistantSingleton`1.GetInstance(`0@)">
            <summary>
            
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:XKTools.Singleton`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XKTools.Singleton`1.GetInstance(`0@)">
            <summary>
            
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:XKTools.Singleton`1.KillInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Singleton`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.SingletonConstructor">
            <summary>
            Object responsible with instance creation
            </summary>
        </member>
        <member name="M:XKTools.SingletonConstructor.InitializeTables">
            <summary>
            Push all XKTools singletons into tables.
            </summary>
        </member>
        <member name="T:XKTools.SingletonConstructor.Construct">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.SingletonConstructor.PushCreatorTable(System.Type,XKTools.SingletonConstructor.Construct)">
            <summary>
            Add a singleton into tables
            </summary>
            <param name="t">Type of the singleton</param>
            <param name="ctr">Contructor of type t (delegate XKObject Construct())</param>
        </member>
        <member name="M:XKTools.SingletonConstructor.CreateInstanceTable(System.Type)">
            <summary>
            Create an instance of a singleton according to tables
            </summary>
            <param name="t">Type of the singleton</param>
        </member>
        <member name="M:XKTools.SingletonConstructor.GetInstanceTable(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.SingletonConstructor.KillInstanceTable(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.SingletonConstructor.ContainsInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.SingletonConstructor.ContainsConstructor(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.SingletonConstructor.EnableLog(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.XKAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.XKBehaviour">
            <summary>
            Base object for all MonoBehaviours
            </summary>
        </member>
        <member name="F:XKTools.XKBehaviour.m_ComponentContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.Awake">
            <summary>
            Behaviour Awake
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.OnDestroy">
            <summary>
            Behaviour OnDestroy
            </summary>
        </member>
        <member name="P:XKTools.XKBehaviour.Vehicle">
            <summary>
            Accessor on local Vehicle
            </summary>
        </member>
        <member name="P:XKTools.XKBehaviour.ComponentContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKBehaviour.HasXKComponents">
            <summary>
            Indicates whether this XKBehaviour has some XKObject as components or not
            </summary>
        </member>
        <member name="P:XKTools.XKBehaviour.CleanedName">
            <summary>
            Get the name of the behaviour without unity's extensions ("(Clone)", "(Instance)" and so on)
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.CleanGameObjectName">
            <summary>
            Remove unity's extension  ("(Clone)", "(Instance)" and so on) from the gameObject's name
            </summary>
        </member>
        <member name="M:XKTools.XKBehaviour.CleanObjectName(System.String)">
            <summary>
            Remove unity's extension  ("(Clone)", "(Instance)" and so on) from the given name
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.XKHashtable">
            <summary>
            Base Class for Hashtable-types (provide some helpers)
            </summary>
        </member>
        <member name="T:XKTools.XKHashtable.EState">
            <summary>
            The state the XKHashtable can have (must match with NetData.ESendType enum)
            </summary>
        </member>
        <member name="F:XKTools.XKHashtable.EState.Updated">
            <summary>
            Has been updated, but does not need to be sync immediately
            </summary>
        </member>
        <member name="F:XKTools.XKHashtable.EState.Dirty">
            <summary>
            Is dirty and must be sync as soon as possible
            </summary>
        </member>
        <member name="F:XKTools.XKHashtable.EState.Clean">
            <summary>
            Is clean
            </summary>
        </member>
        <member name="F:XKTools.XKHashtable.m_State">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.XKHashtable.m_DefaultModifiedState">
            <summary>
            The state the table will reach by default in case of modification
            </summary>
        </member>
        <member name="M:XKTools.XKHashtable.#ctor">
            <summary>
            XKHashtable default constructor
            </summary>
        </member>
        <member name="M:XKTools.XKHashtable.#ctor(System.Collections.Hashtable)">
            <summary>
            Construct the XKHashtable and provide it with the elements of the given table
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.XKHashtable.SetValue(System.Object,System.Object)">
            <summary>
            Set the given value to the given key, or default value if the given one is null
            </summary>
            <param name="key">The wanted key</param>
            <param name="value">The wanted value</param>
        </member>
        <member name="M:XKTools.XKHashtable.SetValue(System.Object,System.Object,XKTools.XKHashtable.EState)">
            <summary>
            Set the given value to the given key, or default value if the given one is null
            </summary>
            <param name="key">The wanted key</param>
            <param name="value">The wanted value</param>
            <param name="modifiedState">The next state of the hashtable after this modification</param>
        </member>
        <member name="M:XKTools.XKHashtable.GetValue``1(System.Object,``0)">
            <summary>
            Get the value associated with the given key and cast it to the wanted type
            </summary>
            <typeparam name="T">The type of value we want to get</typeparam>
            <param name="key">The key of the value</param>
            <param name="defaultValue">The default value if no key is found</param>
            <returns>The wanted value, or the default one</returns>
        </member>
        <member name="M:XKTools.XKHashtable.FindFirstKeyFor(System.Object,System.Boolean)">
            <summary>
            Find the first key that matches with the given value (careful - may not be unique)
            </summary>
            <param name="value">The value we want to retrieve the key of</param>
            <param name="seekInCollection">Should we seek into the collection that are stored into this XKHashtable?</param>
            <returns>The first key that leads to the given value</returns>
        </member>
        <member name="P:XKTools.XKHashtable.IsDirty">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKHashtable.IsClean">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKHashtable.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKHashtable.Parents">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKHashtable.Commit">
            <summary>
            Set this XKHashtable not dirty anymore
            </summary>
        </member>
        <member name="M:XKTools.XKHashtable.OnDatasModified(System.Object,System.Object,XKTools.XKHashtable.EState)">
            <summary>
            Called when the datas of the xkHashtable are modified
            </summary>
            <param name="key">The key that has been modified</param>
            <param name="newValue">The new value</param>
            <param name="modifiedState">The new state of the XKHashtable</param>
        </member>
        <member name="M:XKTools.XKHashtable.CheckEntry(System.Collections.DictionaryEntry)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKHashtable.CheckBaseValueType(System.Object)">
            <summary>
            Check the base value type of the given value (used when the XKHashtable is built from an Hashtable)
            Replace Hashtable values by XKHashtable ones for example
            </summary>
            <param name="val">The value to check</param>
            <returns>The new val to really add to this XKHashtable</returns>
        </member>
        <member name="T:XKTools.XKObject">
            <summary>
            <para>Base Object for all pure C# data structures</para>
            <para>This class also implement a component system themselves based on XKObject</para>
            <remarks>Using the component system is not adviced for serialized objects yet (to be discussed)</remarks>
            </summary>
        </member>
        <member name="M:XKTools.XKObject.op_Implicit(XKTools.XKObject)~System.Boolean">
            <summary>
            Allows to do boolean test to know if the class is null or not
            </summary>
            <param name="exists"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKObject.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:XKTools.XKObject.Initialize">
            <summary>
            Every object creation and finding should be done in this function
            </summary>
        </member>
        <member name="M:XKTools.XKObject.Shutdown">
            <summary>
            Every object destruction should be done in this function
            </summary>
        </member>
        <member name="M:XKTools.XKObject.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKObject.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKObject.FixedUpdate">
            <summary>
            Object FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.XKObject.Update">
            <summary>
            Object Update
            </summary>
        </member>
        <member name="M:XKTools.XKObject.LateUpdate">
            <summary>
            Object LateUpdate
            </summary>
        </member>
        <member name="M:XKTools.XKObject.OnGUI">
            <summary>
            Object OnGUI
            </summary>
        </member>
        <member name="M:XKTools.XKObject.OnDrawGizmos">
            <summary>
            Object OnDrawGizmos
            </summary>
        </member>
        <member name="M:XKTools.XKObject.ReceiveData(System.Object,System.Object[])">
            <summary>
            This function might be useful to transmit data without casting the object to call the correct function
            <remarks>Maybe you should prefer using enums instead of strings as reference which helps intellisense</remarks>
            </summary>
            <param name="reference"></param>
            <param name="args"></param>
        </member>
        <member name="M:XKTools.XKObject.GetTypeName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.GetFullTypeName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.AddComponent``1">
            <summary>
            Also initialize the component
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.AddXKComponent``1(System.Boolean)">
            <summary>
            Also initialize the component
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xkActive"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.RemoveXKComponent``1(``0)">
            <summary>
            Also shuts down the component if it is known by this object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cpnt"></param>
        </member>
        <member name="M:XKTools.XKObject.RemoveXKComponent``1(``0@)">
            <summary>
            Also shuts down the component if it is known by this object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cpnt">this will be set to null if the component is known</param>
        </member>
        <member name="M:XKTools.XKObject.RemoveXKComponents``1">
            <summary>
            Also shuts down the components
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XKTools.XKObject.ClearXKComponents">
            <summary>
            Also shuts down the components
            </summary>
        </member>
        <member name="M:XKTools.XKObject.GetXKComponent``1">
            <summary>
            Warning, this function iterates over all components (not optimized)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.GetXKComponents``1">
            <summary>
            Warning, this function iterates over all components (not optimized)
            </summary>
            <typeparam name="T"></typeparam>
            <returns>A non null array, might be empty though</returns>
        </member>
        <member name="M:XKTools.XKObject.FindXKParent``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.FindTopXKParent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.FindXKBrother``1">
            <summary>
            Warning, this function iterates over all components (not optimized)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.FindXKBrothers``1">
            <summary>
            Warning, this function iterates over all components (not optimized)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.XKObject.LogXKComps(System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="startFromTopParent">moves to the TopParent before starting exploring children, default is true</param>
            <param name="logInactiveChildren">Logs the inactive objects as well</param>
            <param name="logCat">Log category, default is "Info"</param>
        </member>
        <member name="P:XKTools.XKObject.XKParent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.XKObject.XKActive">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKObject.OnSetXKActive(System.Boolean)">
            <summary>
            Called when a new XKActive value is set
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.Pathfinder.ENeighbourDirection">
            <summary>
            Neighbor direction of a cell
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.ENeighbourDirection.Right">
            <summary>
            right (x+1, y)
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.ENeighbourDirection.Top">
            <summary>
            top (x, y+1)
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.ENeighbourDirection.Left">
            <summary>
            left (x-1, y)
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.ENeighbourDirection.Bot">
            <summary>
            bot (x, y-1)
            </summary>
        </member>
        <member name="T:XKTools.Pathfinder.Pathfinder">
            <summary>
            4 connectivity Pathfinder
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.Pathfinder.m_OpenList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.Pathfinder.m_CloseList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.Pathfinder.m_Reference">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.Pathfinder.m_ForceLastCellFree">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.#ctor(XKTools.Pathfinder.Pathfinder)">
            <summary>
            
            </summary>
            <param name="finder"></param>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.GetCost(System.Collections.Generic.List{XKTools.Pathfinder.PathfinderCell},System.Object)">
            <summary>
            
            </summary>
            <param name="cells"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.GetCost(XKTools.Pathfinder.PathfinderGrid,XKTools.IntPair,XKTools.IntPair,System.Object)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.GetCost(System.Collections.Generic.List{XKTools.Pathfinder.PathfinderCell})">
            <summary>
            
            </summary>
            <param name="cells"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.GetCost(XKTools.Pathfinder.PathfinderGrid,XKTools.IntPair,XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.ComputeBestPath(XKTools.Pathfinder.PathfinderGrid,XKTools.IntPair,XKTools.IntPair,System.Object)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.ComputeBestPath(XKTools.Pathfinder.PathfinderGrid,XKTools.IntPair,XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.ComputeBestPath(XKTools.Pathfinder.PathfinderGrid,XKTools.IntPair,XKTools.IntPair,System.Int32)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="attempt"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.ComputeBestPath(XKTools.Pathfinder.PathfinderGrid,XKTools.IntPair,XKTools.IntPair,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="attempt"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.AddToOpen(XKTools.Pathfinder.PathfinderCell,System.Collections.Generic.List{XKTools.Pathfinder.PathfinderCell},XKTools.IntPair,System.Object)">
            <summary>
            
            </summary>
            <param name="current"></param>
            <param name="nodes"></param>
            <param name="target"></param>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.AddDichotomic(XKTools.Pathfinder.PathfinderCell,XKTools.IntPair,System.Object)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="target"></param>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Pathfinder.Pathfinder.ClearLists">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Pathfinder.Pathfinder.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Pathfinder.Pathfinder.ForceLastCellFree">
            <summary>
            Forces the last cell to be consider as free
            </summary>
        </member>
        <member name="T:XKTools.Pathfinder.PathfinderCell">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_GridPos">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_Neighbourhood">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_Parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_RelativeCost">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_AbsoluteCost">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_AdditionalWeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderCell.m_F">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.#ctor(XKTools.Pathfinder.PathfinderCell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Pathfinder.PathfinderCell.GridPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.SetCost(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="cost"></param>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetCost(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetRelativeCost(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.CostWillBe(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetHeuristic(XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetF(XKTools.IntPair,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Pathfinder.PathfinderCell.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.SetParent(XKTools.Pathfinder.PathfinderCell)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.SetNeighbour(XKTools.Pathfinder.PathfinderCell,XKTools.Pathfinder.ENeighbourDirection)">
            <summary>
            
            </summary>
            <param name="neighbour"></param>
            <param name="dir"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetPossibleNodes(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="attempt"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetPossibleNodes(System.Int32,System.Object,XKTools.IntPair,System.Boolean)">
            <summary>
            
            </summary>
            <param name="attempt"></param>
            <param name="reference"></param>
            <param name="end"></param>
            <param name="forceLastCellFree"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.GetAdditionalWeight(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderCell.SetAdditionalWeight(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="weight"></param>
            <param name="reference"></param>
        </member>
        <member name="T:XKTools.Pathfinder.PathfinderGrid">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderGrid.m_Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderGrid.m_Height">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderGrid.m_CellCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathfinderGrid.m_Cells">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="heigh"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.#ctor(XKTools.Pathfinder.PathfinderGrid)">
            <summary>
            
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.Initialize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.AddDigressiveWeightToCells(System.Int32,XKTools.IntPair,System.Int32,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="weighStep"></param>
            <param name="centerCell"></param>
            <param name="width"></param>
            <param name="factor"></param>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.Clamp(XKTools.IntPair@)">
            <summary>
            Clamps a grid position to a valid position grid position
            </summary>
            <param name="gridPos"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.AddWeightGrid(XKTools.Pathfinder.PathWeightGrid,XKTools.IntPair,System.Object,System.Boolean)">
            <summary>
            Add the weight of a PathWeightGrid to the pathfinder grid at the position pos
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.AddWeightGrid(XKTools.Pathfinder.PathWeightGrid,System.Int32,System.Int32,System.Object,System.Boolean)">
            <summary>
            Add the weight of a PathWeightGrid to the pathfinder grid at the position (x, y)
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.GetCellAt(XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.GetCellAt(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.GetCells">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.IsValidPos(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Pathfinder.PathfinderGrid.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Pathfinder.PathfinderGrid.Height">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.IsBorder(XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="gridPos"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.IsBorder(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.IsOuterGrid(XKTools.IntPair)">
            <summary>
            
            </summary>
            <param name="gridpos"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.GetOuterCell(XKTools.IntPair,System.Int32)">
            <summary>
            Get the cell outside the grid just next the given one
            </summary>
            <param name="p">The cell we want to go out from</param>
            <param name="outerGridMargin">The outer grid margin</param>
            <returns>The outer cell</returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.GetPositionInDirection(XKTools.IntPair,XKTools.Pathfinder.ENeighbourDirection)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathfinderGrid.GetDirection(XKTools.Pathfinder.ENeighbourDirection)">
            <summary>
            
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Pathfinder.PathWeightGrid">
            <summary>
            Store a grid of weight to add it to a pathfinder grid.
            The "center" of this grid will be matched with a point of the pathfinder grid
            (inherit this class to create and fill the grid)
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathWeightGrid.m_Width">
            <summary>
            Weight Grid Width
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathWeightGrid.m_Height">
            <summary>
            Weight Grid Length
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathWeightGrid.m_WeightGrid">
            <summary>
            Weight Table that storage the weights around a "center".
            </summary>
        </member>
        <member name="F:XKTools.Pathfinder.PathWeightGrid.m_Center">
            <summary>
            The index of the position of the "Center" on the grid
            This "center" is the point that will generate the weights
            It is used to be matched
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathWeightGrid.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathWeightGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            create a pathWeightGrid, initialize width and height of the Grid and allocate the memory for the grid
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:XKTools.Pathfinder.PathWeightGrid.Width">
            <summary>
            Width of the weight Grid
            </summary>
        </member>
        <member name="P:XKTools.Pathfinder.PathWeightGrid.Height">
            <summary>
            Height of the Weight grid
            </summary>
        </member>
        <member name="P:XKTools.Pathfinder.PathWeightGrid.Center">
            <summary>
            Access to the "center" of the grid
            This "center" is used to match with a point of the PathfinderGrid when we'll want to add the weight
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathWeightGrid.GetWeightAt(System.Int32,System.Int32)">
            <summary>
            Get the weight at the coordinate (x, y) of the weight grid.
            Return 0 if out of bound
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Pathfinder.PathWeightGrid.CreateGrid">
            <summary>
            Allocate memory for the grid
            </summary>
        </member>
        <member name="M:XKTools.Pathfinder.PathWeightGrid.CreateGrid(System.Int32,System.Int32)">
            <summary>
            set width and height and allocate memory for the grid
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:XKTools.Pathfinder.PathWeightGrid.AllocateGridMemory">
            <summary>
            Allocate the memory to the grid (1 dimension array) m_WeightGrid
            </summary>
        </member>
        <member name="T:XKTools.Physics.DontGoThroughThings">
            <summary>
            This class helps for CCD and computes the remaining frame count before colliding an object
            </summary>
        </member>
        <member name="M:XKTools.Physics.DontGoThroughThings.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Physics.DontGoThroughThings.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Physics.DontGoThroughThings.SkinWidth">
            <summary>
            This value represents the skin width of the body
            You will probably not have to change this value as it fits correctly with the Physics engine
            </summary>
        </member>
        <member name="P:XKTools.Physics.DontGoThroughThings.CCD">
            <summary>
            Auto replace body to ensure it will collide on next frame
            </summary>
        </member>
        <member name="P:XKTools.Physics.DontGoThroughThings.LayerMask">
            <summary>
            Says which layers will be tested
            </summary>
        </member>
        <member name="P:XKTools.Physics.DontGoThroughThings.FramesBeforeCollision">
            <summary>
            Explicits the remaining frames before colliding an object
            (this might be fluctuating according to velocity props and possible target movements)
            </summary>
        </member>
        <member name="T:XKTools.Physics.ICollidable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Physics.ICollidable.OnEnterCollidable(UnityEngine.Collision)">
            <summary>
            
            </summary>
            <param name="collision"></param>
        </member>
        <member name="M:XKTools.Physics.ICollidable.OnExitCollidable(UnityEngine.Collision)">
            <summary>
            
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:XKTools.Physics.ITriggable">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Physics.ITriggable.OnEnterTriggable(UnityEngine.Collider)">
            <summary>
            
            </summary>
            <param name="collider"></param>
        </member>
        <member name="M:XKTools.Physics.ITriggable.OnExitTriggable(UnityEngine.Collider)">
            <summary>
            
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:XKTools.Physics.PhysicPrediction">
            <summary>
            Physic prediction class
            </summary>
        </member>
        <member name="T:XKTools.Physics.PhysicPrediction.ConditionCheck">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="velocity"></param>
            <param name="timeElapsed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.YUnderZero(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true if positionn.y is under 0.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='frameCount'>
            Number of frame to predict.
            </param>
            <returns>
            An array of Vector3 representing the positions predicted.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,XKTools.Physics.PhysicPrediction.ConditionCheck)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='conditionCheck'>
            A function that should return true when the prediction must stop depending of the velocity, position and time.
            </param>
            <returns>
            An array of Vector3 representing the positions predicted.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeInSeconds'>
            Time in seconds to predict.
            </param>
            <returns>
            An array of Vector3 representing the positions predicted.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictVelocityNeeded(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,XKTools.Physics.PhysicPrediction.ConditionCheck,System.Int32,System.Single)">
            <summary>
            Try to predict the velocity needed for the object to get to the target position.
            You must specifies an error tolerance and the maximum number of tries,
            but also the axis that are importants. Ex : 
            if you target a point which is at the same height than your object, you need xAxis and zAxis only
            </summary>    
            <param name='originPos'>
            Position of the object which will be launched.
            </param>
            <param name='direction'>
            Direction in which you want to launch your object. Direction must be unitized!
            </param>
            <param name='targetPos'>
            The position you want to reach.
            </param>
            <param name='ConditionCheck'>
            A function that should return true when the object must stop depending of the velocity, position and time.
            For example : YUnderZero() return true when the object Y is under 0 (most of the time when the object goes underground)
            </param>
            <param name='tries'>
            The maximum number of tries after which the prediction will stop whatever the result is.
            25 is a good number. The more the tolerance is low, the more tries you must have, but
            try not to chose over 500 tries.
            </param>
            <param name="tolerance">
            The error tolerance : the maximum distance between your targeted position
            and the position you will obtain with the veloc predicted
            </param>
            <returns>
            A Vector3 representing the velocity which is needed to reach the targeted point.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictVelocityNeeded(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,XKTools.Physics.PhysicPrediction.ConditionCheck,System.Int32,System.Single,System.Single@)">
            <summary>
            Try to predict the velocity needed for the object to get to the target position.
            You must specifies an error tolerance and the maximum number of tries,
            but also the axis that are importants. Ex : 
            if you target a point which is at the same height than your object, you need xAxis and zAxis only
            </summary>    
            <param name='originPos'>
            Position of the object which will be launched.
            </param>
            <param name='direction'>
            Direction in which you want to launch your object. Direction must be unitized!
            </param>
            <param name='targetPos'>
            The position you want to reach.
            </param>
            <param name='ConditionCheck'>
            A function that should return true when the object must stop depending of the velocity, position and time.
            For example : YUnderZero() return true when the object Y is under 0 (most of the time when the object goes underground)
            </param>
            <param name='tries'>
            The maximum number of tries after which the prediction will stop whatever the result is.
            25 is a good number. The more the tolerance is low, the more tries you must have, but
            try not to chose over 500 tries.
            </param>
            <param name="tolerance">
            The error tolerance : the maximum distance between your targeted position
            and the position you will obtain with the veloc predicted
            </param>
            <param name="time">
            </param>
            <returns>
            A Vector3 representing the velocity which is needed to reach the targeted point.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictVelocityNeeded(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,XKTools.Physics.PhysicPrediction.ConditionCheck,System.Int32,System.Single,UnityEngine.Vector3[]@)">
            <summary>
            Try to predict the veloc needed for the object to get to the target position.
            You must specifies an error tolerance and the maximum number of tries,
            but also the axis that are importants. Ex : 
            if you target a point which is at the same height than your object, you need xAxis and zAxis only
            </summary>    
            <param name='originPos'>
            Position of the object which will be launched.
            </param>
            <param name='direction'>
            Direction in which you want to launch your object. Direction must be unitized!
            </param>
            <param name='targetPos'>
            The position you want to reach.
            </param>
            <param name='ConditionCheck'>
            A function that should return true when the object must stop depending of the velocity, position and time.
            For example : YUnderZero() return true when the object Y is under 0 (most of the time when the object goes underground)
            </param>
            <param name='tries'>
            The maximum number of tries after which the prediction will stop whatever the result is.
            25 is a good number. The more the tolerance is low, the more tries you must have, but
            try not to chose over 500 tries.
            </param>
            <param name="tolerance">
            The error tolerance : the maximum distance between your targeted position
            and the position you will obtain with the veloc predicted
            </param>
            <param name="trajectory">
            An array of vector3 which will contain every position of the trajectory
            </param>
            <returns>
            A Vector3 representing the veloc and direction which is needed to reach the targeted point.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictVelocityAndSlopeNeeded(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,XKTools.Physics.PhysicPrediction.ConditionCheck,System.Int32,System.Single)">
            <summary>
            Try to predict the veloc needed for the object to get to the target position.
            If the direction indicated does not allow to reach the target point,
            the slope is adjusted to reach the target
            You must specifies an error tolerance and the maximum number of tries.
            </summary>    
            <param name='originPos'>
            Position of the object which will be launched.
            </param>
            <param name='direction'>
            Direction in which you want to launch your object. Direction must be unitized!
            </param>
            <param name='targetPos'>
            The position you want to reach.
            </param>
            <param name='ConditionCheck'>
            A function that should return true when the object must stop depending of the velocity, position and time.
            For example : YUnderZero() return true when the object Y is under 0 (most of the time when the object goes underground)
            </param>
            <param name='tries'>
            The maximum number of tries after which the prediction will stop whatever the result is.
            25 is a good number. The more the tolerance is low, the more tries you must have, but
            try not to chose over 500 tries.
            </param>
            <param name="tolerance">
            The error tolerance : the maximum distance between your targeted position
            and the position you will obtain with the veloc predicted
            </param>
            <returns>
            A Vector3 representing the veloc and direction which is needed to reach the targeted point.
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.ComputeFrictionAndReflectionCoef(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@,System.Single@)">
            <summary>
            Compute the friction and reflection coef of two material
            from a collision that happened.
            This function is meant to be used while programming, 
            to compute coef that you will then use in your computation to predict bounciness.
            Example : you have a ball that you launch on the floor and you want to predict bounces,
            but you don't have the friction nor the reflection coef.
            Project your ball on the floor, keep in memory your in and out velocity.
            Use this function to get the coef, write them down somewhere, then remove this function,
            and use them to predict bounces.
            </summary>    
            <param name='inVelocity'>
            The velocity that the object had when making contact.
            </param>
            <param name='outVelocity'>
            The velocity that the object had after contact (the "bounce" velocity).
            </param>
            <param name='surfaceNormal'>
            The normal of the surface hit by the object. Please remember that a normal should be normalized.
            </param>
            <param name="frictionCoef">
            The friction coefficient computed.
            </param>
            <param name="reflectionCoef">
            The friction reflection computed.
            </param>
        </member>
        <member name="M:XKTools.Physics.PhysicPrediction.PredictBounceVelocity(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Compute the "bounce" velocity of an object.
            This function takes the velocity that an object will have when touching an obstacle,
            the normal of this obstacle and the friction and reflection coef 
            (which depends on how you've set your set and materials) and compute the "bounce" velocity
            which is the velocity the object will have after collision.
            This function is more or less precise depending of the precision of the given coef. 
            </summary>    
            <param name='inVelocity'>
            The velocity that the object will have when making contact.
            </param>
            <param name='surfaceNormal'>
            The normal of the surface hit by the object. Please remember that a normal should be normalized.
            </param>
            <param name="frictionCoef">
            The friction coefficient.
            </param>
            <param name="reflectionCoef">
            The friction reflection.
            </param>
        </member>
        <member name="T:XKTools.Physics.PhysicPredictionComponent">
            <summary>
            Physic prediction class
            </summary>
        </member>
        <member name="T:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition">
            <summary>
            Enum used to configure a default end condition for the prediction.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.Custom">
            <summary>
            Allow to use custom end condition.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.DefinedFrame">
            <summary>
            Use the defined frame end condition.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.DefinedTime">
            <summary>
            Use the defined time end condition.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.FromTimeToTime">
            <summary>
            Use the FromTimeToTime condition.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.YUnderZero">
            <summary>
            Use the end condition which stops when the predicted transform.position.y
            goes under zero.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.YUnderOriginY">
            <summary>
            Use the end condition which stops when the predicted transform.position.y
            goes under the original transform.position.y.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.XAfterTargetPosX">
            <summary>
            Use the end condition which stops when the predicted transform.position.x
            goes farther than the original target position x.
            </summary>
        </member>
        <member name="F:XKTools.Physics.PhysicPredictionComponent.EDefaultEndCondition.ZAfterTargetPosZ">
            <summary>
            Use the end condition which stops when the predicted transform.position.z
            goes farther than the original target position z.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.Color">
            <summary>
            The Color of the Gizmos
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.TryCount">
            <summary>
            Number of tries that will be done before stoping the prediction of veloc.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.Tolerance">
            <summary>
            The tolerance under wich the result is considered correct.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.TrajectoryPos">
            <summary>
            Returns the positions of the trajectory.
            </summary>
            <returns>Vector3[]</returns>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.ComputedVelocity">
            <summary>
            Returns the velocity computed by "PredictVelocityNeeded".
            </summary>
            <returns>Vector3</returns>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.WantedVelocity">
            <summary>
            Sets the velocity used to make predictions.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.TargetPosition">
            <summary>
            Set the target position need by some of the default end condition
            and by the "PredictVelocityNeeded" function.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.MaxFrameCount">
            <summary>
            Maximum number of frame that will be predicted.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.Predict">
            <summary>
            Activate or deactivate the prediction.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.DrawGizmo">
            <summary>
            Activate or deactivate the display of the prediction.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.DefinedFrame">
            <summary>
            Frame at which the prediction must stop.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.DefinedTime">
            <summary>
            Time at which the prediction must stop.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.StartDefinedTime">
            <summary>
            Time at which the prediction must start.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.DefaultEndCondition">
            <summary>
            Set the default end condition of the prediction.
            Set to Custom if you want a custom end condition.
            </summary>
        </member>
        <member name="P:XKTools.Physics.PhysicPredictionComponent.ConditionToCheck">
            <summary>
            Set custom end condition of the prediction.
            </summary>
        </member>
        <member name="T:XKTools.Physics.PhysicPredictionComponent.ConditionCheck">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="velocity"></param>
            <param name="timeElapsed"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.YUnderZero(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true if positionn.y is under 0.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.YUnderOriginY(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true if positionn.y is under m_InitialPosition.y.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.DefinedFrameExceeded(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true when the defined frame is reached.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.DefinedTimedElapsed(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true when the defined time is elapsed.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.XAfterTargetPosX(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true if m_InitialPosition.x is after m_TargetPos.x.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.ZAfterTargetPosZ(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Condition check : returns true if m_InitialPosition.z is after m_TargetPos.z.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeElapsed'>
            Time already elapsed.
            </param>
            <returns>
            A boolean which indicates if the prediction must stop
            </returns>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='frameCount'>
            Number of frame to predict.
            </param>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,XKTools.Physics.PhysicPredictionComponent.ConditionCheck)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='conditionCheck'>
            A function that should return true when the prediction must stop depending of the velocity, position and time.
            </param>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,XKTools.Physics.PhysicPredictionComponent.ConditionCheck)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='delay'>
            Time in seconds to wait before starting topredict.
            </param>
            <param name='conditionCheck'>
            A function that should return true when the prediction must stop depending of the velocity, position and time.
            </param>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.PredictPhysic(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Predicts the physic.
            </summary>    
            <param name='position'>
            Position.
            </param>
            <param name='velocity'>
            Velocity.
            </param>
            <param name='timeInSeconds'>
            Time in seconds to predict.
            </param>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.PredictVelocityNeeded(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Try to predict the veloc needed for the object to get to the target position.
            You must specifies an error tolerance and the maximum number of tries,
            but also the axis that are importants. Ex : 
            if you target a point which is at the same height than your object, you need xAxis and zAxis only
            </summary>    
            <param name='originPos'>
            Position of the object which will be launched.
            </param>
            <param name='direction'>
            Direction in which you want to launch your object. Direction should be unitized!
            </param>
        </member>
        <member name="M:XKTools.Physics.PhysicPredictionComponent.PredictVelocityAndSlopeNeeded(UnityEngine.Vector3)">
            <summary>
            Try to predict the veloc needed for the object to get to the target position.
            If the direction indicated does not allow to reach the target point,
            the slope is adjusted to reach the target
            You must specifies an error tolerance and the maximum number of tries.
            </summary>    
            <param name='originPos'>
            Position of the object which will be launched.
            </param>
            <returns>
            A Vector3 representing the veloc and direction which is needed to reach the targeted point.
            </returns>
        </member>
        <member name="T:XKTools.Replay.EventRecorderBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderBase.m_PreviousRecordedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderBase.m_IsFixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderBase.m_RecorderManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderBase.m_ReplayManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.EventRecorderBase.PreviousRecordedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.EventRecorderBase.IsFixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.EventRecorderBase.op_Implicit(XKTools.Replay.EventRecorderBase)~System.Boolean">
            <summary>
            Allows to do boolean test to know if the class is null or not
            </summary>
            <param name="exists"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.EventRecorderBase.#ctor(XKTools.Replay.RecorderManager,XKTools.Replay.ReplayManager)">
            <summary>
            
            </summary>
            <param name="recorderManager"></param>
            <param name="replayManager"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderBase.LinkerRecordedEvent(XKTools.Replay.RecordedEventBase)">
            <summary>
            
            </summary>
            <param name="newRecordedEvent"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderBase.Record">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.EventRecorderBase.ManualRecord(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.EventRecorderBase.BaseRecord(XKTools.Replay.RecordedEventBase)">
            <summary>
            
            </summary>
            <param name="newAction"></param>
        </member>
        <member name="T:XKTools.Replay.EventRecorderShadow">
            <summary>
            Event Recorder for Shadow's activation/deactivation
            </summary>
        </member>
        <member name="M:XKTools.Replay.EventRecorderShadow.#ctor(XKTools.Graphics.ShadowScript,XKTools.Replay.RecorderManager,XKTools.Replay.ReplayManager)">
            <summary>
            EventRecorderShadow cst
            </summary>
            <param name="shadowScript">The script to record</param>
            <param name="recorderManager">The recorder manager</param>
            <param name="replayManager">The replay manager</param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderShadow.ManualRecord(System.Object)">
            <summary>
            Performs manual record
            </summary>
            <param name="data">The data to record</param>
            <returns>The recorded event</returns>
        </member>
        <member name="T:XKTools.Replay.EventRecorderSound">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderSound.m_AudioElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderSound.m_SoundManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.EventRecorderSound.#ctor(XKTools.Sound.AudioElement,XKTools.Sound.SoundManager,XKTools.Replay.RecorderManager,XKTools.Replay.ReplayManager)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="soundManager"></param>
            <param name="recorderManager"></param>
            <param name="replayManager"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderSound.ManualRecord(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Replay.EventRecorderTransform">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Replay.EventRecorderTransform.EAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.PositionX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.PositionY">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.PositionZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.Position">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.RotationX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.RotationY">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.RotationZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.Rotation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.ScaleX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.ScaleY">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.ScaleZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.PosAndRot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.EAttribute.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.m_Trans">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.EventRecorderTransform.m_AttributeMask">
            <summary>
            Default value set to Position and Rotation
            </summary>
        </member>
        <member name="P:XKTools.Replay.EventRecorderTransform.Trans">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.#ctor(UnityEngine.Transform,XKTools.Replay.RecorderManager,XKTools.Replay.ReplayManager)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="recorderManager"></param>
            <param name="replayManager"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.#ctor(UnityEngine.Transform,XKTools.Replay.EventRecorderTransform.EAttribute[],XKTools.Replay.RecorderManager,XKTools.Replay.ReplayManager)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="attributes"></param>
            <param name="recorderManager"></param>
            <param name="replayManager"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.#ctor(UnityEngine.Transform,XKTools.Replay.EventRecorderTransform.EAttribute,XKTools.Replay.RecorderManager,XKTools.Replay.ReplayManager)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="attribute"></param>
            <param name="recorderManager"></param>
            <param name="replayManager"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.Record">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.BaseRecord(XKTools.Replay.RecordedEventBase)">
            <summary>
            
            </summary>
            <param name="newActionBase"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.IsAttributeRecorded(XKTools.Replay.EventRecorderTransform.EAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.RecordAttribute(XKTools.Replay.EventRecorderTransform.EAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:XKTools.Replay.EventRecorderTransform.RemoveAttributeFromRecording(XKTools.Replay.EventRecorderTransform.EAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="T:XKTools.Replay.RecordedEventBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_Time">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_IsActionApplied">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_ManuallyRecorded">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_PreviousRecordedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_NextRecordedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_DoNotDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_DoNotLerp">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_ApplyInTimelessMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_RecorderManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventBase.m_ReplayManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.op_Implicit(XKTools.Replay.RecordedEventBase)~System.Boolean">
            <summary>
            Allows to do boolean test to know if the class is null or not
            </summary>
            <param name="exists"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.IsActionApplied">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.PreviousRecordedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.NextRecordedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.DoNotDelete">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.DoNotLerp">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.ManuallyRecorded">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.RecorderManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.ReplayManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventBase.ApplyInTimelessMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.RecycleEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.GetIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.ApplyAction(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.ApplyImportantAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.ApplyLastImportantAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.PrepareFirstRecord">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.PrepareLastRecord">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.PrepareForReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.PostReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.ResetImportantAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventBase.InterpolateBetweenPrevAndNext(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:XKTools.Replay.RecordedEventShadow">
            <summary>
            Recorded Shadow event (activation/deactivation)
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventShadow.Active">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventShadow.ShadowScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventShadow.#ctor">
            <summary>
            The recorded event shadow cst
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventShadow.RecycleEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventShadow.ApplyImportantAction">
            <summary>
            Apply important action (activation/deactivation for the shadowScript)
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventShadow.PrepareFirstRecord">
            <summary>
            Prepare the first record: avoid recording event from the ShadowScript while replaying
            </summary>
        </member>
        <member name="T:XKTools.Replay.RecordedEventSound">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Replay.RecordedEventSound.EAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.Play">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.FadeIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.FadeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.StopLoop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.DestroyOnStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.EAction.ChangeVolume">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_SoundManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Action">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Volume">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_FadeIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_FadeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Pitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Priority">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Loop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_UnloadClipOnStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_DestroySourceOnStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Clip">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_AudioGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_AudioReference">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_Parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_AudioElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_FadeOnceDuration">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_ChangeVolumeDuration">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_SourceMaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventSound.m_SourceMinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventSound.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.SoundManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.FadeIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.FadeOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Pitch">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Loop">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.UnloadClipOnStop">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.DestroySourceOnStop">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Clip">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Group">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.FadeOnceDuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.ChangeVolumeDuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.SourceMaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventSound.SourceMinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventSound.RecycleEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventSound.ApplyImportantAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventSound.PostReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventSound.PrepareFirstRecord">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Replay.RecordedEventTransform">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventTransform.m_AttributeMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventTransform.m_Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecordedEventTransform.m_Trans">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventTransform.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventTransform.AttributeMask">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.CleanAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventTransform.Position">
            <summary>
            Please remember that if you record multiples attributes, you should respect the record order.
            First, position, then, rotation, and at last, scale.
            If you don't respect the order, don't expect the get to work properly.
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventTransform.Rotation">
            <summary>
            Please remember that if you record multiples attributes, you should respect the record order.
            First, position, then, rotation, and at last, scale.
            If you don't respect the order, don't expect the get to work properly.
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventTransform.Scale">
            <summary>
            Please remember that if you record multiples attributes, you should respect the record order.
            First, position, then, rotation, and at last, scale.
            If you don't respect the order, don't expect the get to work properly.
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecordedEventTransform.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.RecycleEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.ApplyAction(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.ApplyImportantAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.InterpolateBetweenPrevAndNext(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.GetAttributesInVector(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.GetAttributesInVector(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <param name="setPos"></param>
            <param name="setRot"></param>
            <param name="setScale"></param>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.IsAttributeRecorded(XKTools.Replay.EventRecorderTransform.EAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.RecordAttribute(XKTools.Replay.EventRecorderTransform.EAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:XKTools.Replay.RecordedEventTransform.RemoveAttributeFromRecording(XKTools.Replay.EventRecorderTransform.EAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="T:XKTools.Replay.RecorderManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Replay.RecorderManager.ERecordStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.ERecordStatus.Stopped">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.ERecordStatus.Paused">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.ERecordStatus.Recording">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_RecordTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_AuthorizedRecord">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_RecordFreq">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_RecordStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_RecordStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_StartedRecordingAt">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_TimePaused">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_PausedAt">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_ResetList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_StoppedAtLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_IndexDoNotDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_RecorderList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_EventListGlobal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_EventLists">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_EventListCurrent">
            <summary>
            
            </summary>            
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_EventRecycling">
            <summary>
            
            </summary>            
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_DoNotDeleteEventList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_PauseManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_SystemPaused">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_ManageMemory">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_ListCount">
            <summary>
            Number of list used to record events. More list means less memory usage but less performance.
            3 should be a good compromise. If you need to use less memory, use more list.
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_CurrentEventListIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_TimeBeforeListSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.RecorderManager.m_LastRecordTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.RecordTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.FullRecordTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetRecordStartTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.IsRecording">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.IsPaused">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.LastRecordLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetFirstActionTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetFirstActionTime(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetLastActionTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetEventsList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetResetList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Replay.RecorderManager.AuthorizedRecord">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.RecorderManager.RecordFreq">
            <summary>
            This property should match the Time.timeScale value in case of huge cpu load due to recording
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.SetRecordLengthInSeconds(System.Single)">
            <summary>
            
            </summary>
            <param name="recordLength"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.GetEvent``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.PostReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.PrepareForReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.StartRecording(System.Single)">
            <summary>
            
            </summary>
            <param name="startTime"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.StartRecording">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Add(XKTools.Replay.EventRecorderBase)">
            <summary>
            
            </summary>
            <param name="eventRecorder"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Remove(XKTools.Replay.EventRecorderBase)">
            <summary>
            
            </summary>
            <param name="eventRecorder"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.ResetRecorderManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.StopRecording">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.DoManualRecord(XKTools.Replay.EventRecorderBase)">
            <summary>
            
            </summary>
            <param name="eventRecorder"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.DoManualRecord(XKTools.Replay.EventRecorderBase,System.Object)">
            <summary>
            
            </summary>
            <param name="eventRecorder"></param>
            <param name="data"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.ResetBeforeRecording">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.ResetObject(XKTools.Replay.ElementToResetForReplay)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.AddObjectToResetList(System.Object)">
            <summary>
            
            </summary>
            <param name="objectToReset"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.CanRecord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Pause(System.Object)">
            <summary>
            Called by pause manager
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Register(System.Object)">
            <summary>
            Register to the pause manager
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Resume(System.Object[],System.Object)">
            <summary>
            Called by pause manager
            </summary>
            <param name="param"></param>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Replay.RecorderManager.Unregister">
            <summary>
            Unregister from the pause manager
            </summary>
        </member>
        <member name="T:XKTools.Replay.ElementToResetForReplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.ElementToResetForReplay.ObjectToReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.ElementToResetForReplay.Time">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Replay.ReplayManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_ReplayTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_LastReplayTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_FirstActionTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_ForceToApplyTillEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_CurrentWaitingTimeAfterReplay">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_ComplexReplayCamera">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_ViewingReplay">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_TimeScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_AuthorizedReplay">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_ReplayCam">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_TimeToReplayBeforeDeath">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_WaitingTimeAfterReplay">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_CurrentRecordedEventList">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_PauseManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_SystemPaused">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_RecorderManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Replay.ReplayManager.m_NotifierManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.FixedUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.LateUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.IsReplaying">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.AuthorizedReplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.TimeScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.TimeToReplayBeforeDeath">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.WaitingTimeAfterReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.StartReplayFrom(System.Single)">
            <summary>
            In case timepoint would be negative or null, this function starts the normal replay
            </summary>
            <param name="timepoint"></param>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.NextFrame(System.Single)">
            <summary>
            
            </summary>
            <param name="timeStep"></param>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.ReplayTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.ElapsedTime">
            <summary>
            Time elapsed between 2 calls to Apply()
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.UpdateReplayTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.TimelessApplyAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.InterpolateBetweenPrevAndNext">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Apply">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.InitCurrentREBListFromTime(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.InitCurrentRecordedEventList">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.StopReplayWithDelay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.InitReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.StartReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.SetReplayCamera">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.PauseAndResetObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.SetSpecificReplayTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.RestartReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.StopReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.EndReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.SkipReplay">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Pause(System.Object)">
            <summary>
            Called by pause manager
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Replay.ReplayManager.IsPaused">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Register(System.Object)">
            <summary>
            Register to the pause manager
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Resume(System.Object[],System.Object)">
            <summary>
            Called by pause manager
            </summary>
            <param name="param"></param>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Replay.ReplayManager.Unregister">
            <summary>
            Unregister from the pause manager
            </summary>
        </member>
        <member name="T:XKTools.Rule.BaseRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.BaseRule.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Rule.BaseRule.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.BaseRule.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.BaseRule.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.BaseRule.SetActive(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Rule.BaseRule.UpdateRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.BaseRule.ShouldReactivate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Rule.BaseRule.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Rule.BaseRule.Active">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Rule.Ruler">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.Ruler.Initialize">
            <summary>
            This initialization is not mandatory for now
            </summary>
        </member>
        <member name="M:XKTools.Rule.Ruler.Update">
            <summary>
            This function has been sealed, use UpdateRule instead
            </summary>
        </member>
        <member name="M:XKTools.Rule.Ruler.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Rule.Ruler.AddRule(XKTools.Rule.BaseRule)">
            <summary>
            The given rule will be initialized
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:XKTools.Rule.Ruler.RemoveRule(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Rule.Ruler.GetRule(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Rule.Ruler.ActivateRule(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="b"></param>
        </member>
        <member name="T:XKTools.Samples.Asset.BundleTester">
            <summary>
            This class helps understanding and testing the BundleManager
            </summary>
        </member>
        <member name="M:XKTools.Samples.Asset.BundleTester.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="T:XKTools.Samples.Net.NetworkColorAvatar">
            <summary>
            This class helps understanding and testing the NetworkManager.
            
            
                Usage:
                    In order to test the NetworkManager, just write:
                    NetworkController.CreatePlayer = NetworkColorAvatar.CreateTestObject
            </summary>
        </member>
        <member name="F:XKTools.Samples.Net.NetworkColorAvatar.m_IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Samples.Net.NetworkColorAvatar.m_IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Samples.Net.NetworkColorAvatar.m_PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.OnEnter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.OnLeave">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.OnError(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.XKTools#Net#INetworkable#ReceiveData(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
        </member>
        <member name="P:XKTools.Samples.Net.NetworkColorAvatar.IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Samples.Net.NetworkColorAvatar.IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.XKTools#Net#INetworkable#SetLocalServer(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="local"></param>
            <param name="server"></param>
        </member>
        <member name="P:XKTools.Samples.Net.NetworkColorAvatar.PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.NetworkColorAvatar.CreateTestObject(System.Boolean,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            Function to be set on NetworkManager
            </summary>
            <param name="isLocalPlayer"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Samples.Net.SphereAvatar">
            <summary>
            This class helps understanding and testing the NetworkManager.
            
            
                Usage:
                    In order to test the NetworkManager, just write:
                    NetworkController.CreatePlayer = SphereAvatar.CreateTestObject
            </summary>
        </member>
        <member name="F:XKTools.Samples.Net.SphereAvatar.m_IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Samples.Net.SphereAvatar.m_IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Samples.Net.SphereAvatar.m_PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.OnEnter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.OnLeave">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.OnError(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.XKTools#Net#INetworkable#ReceiveData(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
        </member>
        <member name="P:XKTools.Samples.Net.SphereAvatar.IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Samples.Net.SphereAvatar.IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.XKTools#Net#INetworkable#SetLocalServer(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="local"></param>
            <param name="server"></param>
        </member>
        <member name="P:XKTools.Samples.Net.SphereAvatar.PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Samples.Net.SphereAvatar.CreateTestObject(System.Boolean,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            Function to be set on NetworkManager
            </summary>
            <param name="isLocalPlayer"></param>
            <param name="isServer"></param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.SnailGenerator">
            <summary>
            Snail Generator functions
            </summary>
        </member>
        <member name="T:XKTools.SnailGenerator.EDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SnailGenerator.EDirection.North">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SnailGenerator.EDirection.East">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SnailGenerator.EDirection.South">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SnailGenerator.EDirection.West">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.SnailGenerator.EDirection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SnailGenerator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SnailGenerator.#ctor(XKTools.SnailGenerator.EDirection,System.Boolean)">
            <summary>
            
            </summary>
            <param name="startDirection"></param>
            <param name="rotateClockwise"></param>
        </member>
        <member name="M:XKTools.SnailGenerator.GenerateSnailPos">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.SnailGenerator.CurrentPosition">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Sound.AudioElement">
            <summary>
            class that is used by the sound manager to play sounds
            it contains an audio source and
            a reference to the group it belongs to
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.#ctor(XKTools.Sound.AudioReference,UnityEngine.AudioClip,System.Single,System.Single,System.Object,UnityEngine.AudioRolloffMode)">
            <summary>
            Constructor
            </summary>
            <param name="reference"> </param>
            <param name="clip">The clip that will be played by this element</param>
            <param name="fadeIn">Duration of the fade in. 0.0f means no fade in.</param>
            <param name="fadeOut">Duration of the fade out. 0.0f means no fade out.</param>
            <param name="pauseLayer">The pause layer that will be used to pause this element.</param>
            <param name="rolloffMode">RolloffMode for 3D sounds</param>
        </member>
        <member name="M:XKTools.Sound.AudioElement.#ctor(XKTools.Sound.AudioReference,XKTools.Sound.AudioGroup,UnityEngine.AudioClip,System.Single,System.Single,System.Object,UnityEngine.AudioRolloffMode)">
            <summary>
            Constructor
            </summary>
            <param name="reference"> </param>
            <param name="group">The group with which the element will be associated.
            The element will use the volume of the groupe by default</param>
            <param name="clip">The clip that will be played by this element</param>
            <param name="fadeIn">Duration of the fade in. 0.0f means no fade in.</param>
            <param name="fadeOut">Duration of the fade out. 0.0f means no fade out.</param>
            <param name="pauseLayer">The pause layer that will be used to pause this element.</param>
            <param name="rolloffMode">RolloffMode for 3D sounds</param>
        </member>
        <member name="M:XKTools.Sound.AudioElement.#ctor(XKTools.Sound.AudioReference,XKTools.Sound.AudioGroup,UnityEngine.AudioClip,System.Single,System.Single,UnityEngine.AudioRolloffMode)">
            <summary>
            Constructor
            </summary>
            <param name="reference"> </param>
            <param name="group">The group with which the element will be associated.
            The element will use the volume of the groupe by default</param>
            <param name="clip">The clip that will be played by this element</param>
            <param name="fadeIn">Duration of the fade in. 0.0f means no fade in.</param>
            <param name="fadeOut">Duration of the fade out. 0.0f means no fade out.</param>
            <param name="rolloffMode">RolloffMode for 3D sounds</param>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Initialize(XKTools.Sound.AudioReference,UnityEngine.AudioClip,System.Single,System.Single,System.Object,UnityEngine.AudioRolloffMode)">
            <summary>
            
            </summary>
            <param name="reference"> </param>
            <param name="clip">The clip that will be played by this element</param>
            <param name="fadeIn">Duration of the fade in. 0.0f means no fade in.</param>
            <param name="fadeOut">Duration of the fade out. 0.0f means no fade out.</param>
            <param name="pauseLayer">The pause layer that will be used to pause this element.</param>
            <param name="rolloffMode">RolloffMode for 3D sounds</param>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Initialize(XKTools.Sound.AudioReference,XKTools.Sound.AudioGroup,UnityEngine.AudioClip,System.Single,System.Single,System.Object,UnityEngine.AudioRolloffMode)">
            <summary>
            
            </summary>
            <param name="reference"> </param>
            <param name="group">The group with which the element will be associated.
            The element will use the volume of the groupe by default</param>
            <param name="clip">The clip that will be played by this element</param>
            <param name="fadeIn">Duration of the fade in. 0.0f means no fade in.</param>
            <param name="fadeOut">Duration of the fade out. 0.0f means no fade out.</param>
            <param name="pauseLayer">The pause layer that will be used to pause this element.</param>
            <param name="rolloffMode">RolloffMode for 3D sounds</param>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Initialize(XKTools.Sound.AudioReference,XKTools.Sound.AudioGroup,UnityEngine.AudioClip,System.Single,System.Single,UnityEngine.AudioRolloffMode)">
            <summary>
            
            </summary>
            <param name="reference"> </param>
            <param name="group">The group with which the element will be associated.
            The element will use the volume of the groupe by default</param>
            <param name="clip">The clip that will be played by this element</param>
            <param name="fadeIn">Duration of the fade in. 0.0f means no fade in.</param>
            <param name="fadeOut">Duration of the fade out. 0.0f means no fade out.</param>
            <param name="rolloffMode">RolloffMode for 3D sounds</param>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Play">
            <summary>
            Play the sound
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Stop">
            <summary>
            Stop the sound
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Pause">
            <summary>
            Pause the sound
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.FadeInDuration">
            <summary>
            Usual fade in duration.
            (fade that happens each time the sounds begin
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.FadeOutDuration">
            <summary>
            Usual fade out duration.
            (fade that happens each time the sounds finish
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.FadeOnceDuration">
            <summary>
            The duration of the ponctual fade
            (used with fade in or fade out now)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.ChangeVolumeDuration">
            <summary>
            The duration of a ponctual change of the volume
            (used with turn up or down)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Source">
            <summary>
            The audio source
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Group">
            <summary>
            The audio with which this element is associated
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Clip">
            <summary>
            The audio clip of the source
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Time">
            <summary>
            Time of the sound already elapsed
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.IsPlaying">
            <summary>
            Indicates if the source is playing
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.MustFadeIn">
            <summary>
            if true, the element will fade in (now)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.MustFadeOut">
            <summary>
            if true, the element will fade out (now)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Volume">
            <summary>
            AudioElement volume
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.UnloadClipOnStop">
            <summary>
            If this bool is true, all the clip references will be removed 
            and so, the clip will be unloaded when the GC will collect
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.DestroySourceOnStop">
            <summary>
            If this bool is true, the game object containing the audio source
            will be destroyed when the sound stops playing
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.GameObject">
            <summary>
            The game object which has the audio source
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Loop">
            <summary>
            If the sound will be played in loop or not
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Mute">
            <summary>
            If the audio source is muted or not
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Pitch">
            <summary>
            Pitch of the audio source
            Default : 1
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Priority">
            <summary>
            Priority of the audio source
            Default : 128
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.PauseLayer">
            <summary>
            Pause layer associated with this element
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.PlayInTimelessReplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.WaitingTime">
            <summary>
            Time before playing the audio element
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.TransformToFollow">
            <summary>
            Transform the element is following (3D sound)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Is3D">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.ContinueAfterObjectFollowedDestruction">
            <summary>
            Boolean used to know if the sound must continue to play after the object he follow destruction
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.UpdateUsualFadeAndVolume">
            <summary>
            Update the usual fade, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.UpdateFadeInOnce">
            <summary>
            Update the fade in once, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.StopFadeInOnce">
            <summary>
            Stop the fade in once, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.UpdateFadeOutOnce">
            <summary>
            Update the fade out once, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.StopFadeOutOnce">
            <summary>
            Stop the fade out once, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.UpdateChangeVolume">
            <summary>
            Update the volume change, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.StopChangeVolume">
            <summary>
            Stop the volume change, not to be used by users
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.SettingForVolumeChanged(System.Single,System.Single)">
            <summary>
            Sets the volume change parameters, not to be used by users
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.FadeTimer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.ChangeVolumeTimer">
            <summary>
            Timer used for the change of volume
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.Fading">
            <summary>
            If the sound is fading or not
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.ChangingVolume">
            <summary>
            If the volume is changing or not
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.WasPlaying">
            <summary>
            If the audio source was playing or not.
            Used by manager to pause sound
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.SourceVolume">
            <summary>
            Audio source volume
            the actual source volume, (same as the element volume except when fading)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.AbsoluteVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioElement.HasGroupRootAsParent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.FollowTransform">
            <summary>
            Place the AudioElement on the position of the transform he follow if he has one
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioElement.Setup3dSound(System.Boolean,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Determine the parameter to know if a sound follow a transform
            and if the sound must continue after the destruction of this
            transform
            </summary>
            <param name="continueToFollow">Determine if the sound continue to play after the destruction of the transform the sound follow</param>
            <param name="transformToFollow">Determine the transform the sound has to follow</param>
            <param name="parent">Determine the parent (position in the hierarchy)</param>
        </member>
        <member name="T:XKTools.Sound.AudioGroup">
            <summary>
            class that is used by the sound manager
            it allow the manager to sort the gameobjects of the audio elements
            in a easily readable hierarchy
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.#ctor">
            <summary>
            Constructor that place the group at the scene root
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.#ctor(UnityEngine.Transform)">
            <summary>
            Constructor that place the group as child of a transform
            </summary>
            <param name="root">Root of the group</param>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.#ctor(System.Object,System.Object)">
            <summary>
            Constructor that place the group at the scene root
            </summary>
            <param name="reference">Group reference(Music, for instance)</param>
            <param name="pauseLayer">The pause layer that will be used to pause all elements associated to this group</param>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.#ctor(System.Object,UnityEngine.Transform,System.Object)">
            <summary>
            Constructor that place the group as child of a transform
            </summary>
            <param name="reference">Group reference(Music, for instance)</param>
            <param name="root">Root of the group</param>
            <param name="pauseLayer">The pause layer that will be used to pause all elements associated to this group</param>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.SetRoot(UnityEngine.Transform)">
            <summary>
            Set the root of the group
            </summary>
            <param name="root">Root of the group</param>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.SetName(System.String)">
            <summary>
            Set the name of the group
            </summary>
            <param name="name">Name of the group</param>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.GroupReference">
            <summary>
            Group reference (name)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.PlayingRoot">
            <summary>
            return the root of the elemets of this group that are playing
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.LoadedRoot">
            <summary>
            return the root of the elemets of this group that are loaded
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.EmptyRoot">
            <summary>
            return the root of the elemets of this group that are empty (no clip loaded)
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.PausedRoot">
            <summary>
            return the root of the elemets of this group that are paused
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.Volume">
            <summary>
            Volume of the group (that will be used by all elements associated to the group)            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.AddElement(XKTools.Sound.AudioElement)">
            <summary>
            Associate an element to the group
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.RemoveElement(XKTools.Sound.AudioElement)">
            <summary>
            Remove an element of the group
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:XKTools.Sound.AudioGroup.PauseLayer">
            <summary>
            The pause layer that will be used to pause all elements associated to this group
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioGroup.GetElements">
            <summary>
            Get the list of audio elements that are associated to this group
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Sound.AudioListenerInfoScript">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioListenerInfoScript.m_Volume">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioListenerInfoScript.m_Pause">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioListenerInfoScript.m_VelocityUpdateMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioListenerInfoScript.m_Listener">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioListenerInfoScript.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioListenerInfoScript.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioListenerInfoScript.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioListenerInfoScript.UpdateInfos">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Sound.AudioReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioReference.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="clipPath"></param>
        </member>
        <member name="M:XKTools.Sound.AudioReference.#ctor(System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="clipPath"></param>
            <param name="volume"></param>
        </member>
        <member name="M:XKTools.Sound.AudioReference.#ctor(System.String,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="clipPath"></param>
            <param name="volume"></param>
            <param name="recorded"></param>
        </member>
        <member name="M:XKTools.Sound.AudioReference.OnNewAudioElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioReference.InitializeAudioElement(XKTools.Sound.AudioElement)">
            <summary>
            
            </summary>
            <param name="audioElement"></param>
        </member>
        <member name="M:XKTools.Sound.AudioReference.LoadClip">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioReference.ClipPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioReference.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioReference.Recorded">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.AudioReference.Clip">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Sound.MultiAudioReference">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.MultiAudioReference.m_IndexBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.#ctor(System.String[])">
            <summary>
            
            </summary>
            <param name="clipPaths"></param>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.#ctor(System.String[],System.Single)">
            <summary>
            
            </summary>
            <param name="clipPaths"></param>
            <param name="volume"></param>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.#ctor(System.String[],System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="clipPaths"></param>
            <param name="volume"></param>
            <param name="recorded"></param>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.NextAudioReference">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.OnNewAudioElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.LoadClip">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.GetNextIndexFromIndexBuffer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Sound.MultiAudioReference.IsFirst">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MultiAudioReference.IsLast">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MultiAudioReference.IsSecondToLast">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MultiAudioReference.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MultiAudioReference.ClipPath">
            <summary>
            Random reference among the references list.
            Use to select sound to play.
            </summary>
        </member>
        <member name="P:XKTools.Sound.MultiAudioReference.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MultiAudioReference.SetVolume(System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="volume"></param>
        </member>
        <member name="T:XKTools.Sound.RandomizedAudioReference">
            <summary>
            This class represent a randomized sound 
            Each time this sound is played, the sound will
            be randomly chosen amond a given lsit
            </summary>
        </member>
        <member name="M:XKTools.Sound.RandomizedAudioReference.#ctor(System.String[])">
            <summary>
            
            </summary>
            <param name="clipPaths"></param>
        </member>
        <member name="M:XKTools.Sound.RandomizedAudioReference.#ctor(System.String[],System.Single)">
            <summary>
            
            </summary>
            <param name="clipPaths"></param>
            <param name="volume"></param>
        </member>
        <member name="M:XKTools.Sound.RandomizedAudioReference.#ctor(System.String[],System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="clipPaths"></param>
            <param name="volume"></param>
            <param name="recorded"></param>
        </member>
        <member name="M:XKTools.Sound.RandomizedAudioReference.InitializeAudioElement(XKTools.Sound.AudioElement)">
            <summary>
            
            </summary>
            <param name="audioElement"></param>
        </member>
        <member name="M:XKTools.Sound.RandomizedAudioReference.GetNextIndexFromIndexBuffer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.Sound.AudioSourceInfoScript">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioSourceInfoScript.m_AudioClip">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioSourceInfoScript.m_Time">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioSourceInfoScript.m_Length">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioSourceInfoScript.m_IsPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioSourceInfoScript.m_IgnoreListenerVolume">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.AudioSourceInfoScript.m_Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioSourceInfoScript.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioSourceInfoScript.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioSourceInfoScript.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.AudioSourceInfoScript.UpdateInfos">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Sound.MusicManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Sound.MusicManager.MusicEventDlg">
            <summary>
            
            </summary>
            <param name="music"></param>
        </member>
        <member name="F:XKTools.Sound.MusicManager.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.PlayMusicWithDelay(System.Object,System.Single)">
            <summary>
            Plays the music corresponding to the reference in 'delay' seconds
            </summary>
            <param name="reference">The music to play</param>
            <param name="delay">Time before the music is played (in seconds)</param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.PlayMusic(System.Object)">
            <summary>
            that function loads in game music and ambient music
            and start fading it in while fading the menu music out.
            The music will be played exactly one time.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.PlayLoopMusic(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.PlayLoopMusic(System.Object,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="startDelay"></param>
            <param name="switchDelay"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.SwitchMusics(System.Object[],System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="references"></param>
            <param name="startDelay"></param>
            <param name="switchDelay"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.SwitchMusics(System.Object[],System.Int32[],System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="references"></param>
            <param name="loopsCount"></param>
            <param name="startDelay"></param>
            <param name="switchDelay"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Stop(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Stop(System.Single,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.ChangeVolume(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="newVolume"></param>
            <param name="duration"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.SetLowVolume(System.Single,System.Single)">
            <summary>
            Fade out music volume for level and world preview
            </summary>
            <param name="volume"></param>
            <param name="fade"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.SetLowVolume">
            <summary>
            Fade out music volume for level and world preview
            </summary>
            <remarks>Set Low Volume with the preset : volume = 0.24, fade = 2.0</remarks>
        </member>
        <member name="M:XKTools.Sound.MusicManager.ResetVolume">
            <summary>
            Fade in music to restore volume after SetLowVolume() was called
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.Muted">
            <summary>
            Shuts down the sounds
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.IsPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.LoopMusic">
            <summary>
            Direct loop on AudioElement
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.MasterVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.OnMusicStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Sound.MusicManager.OnMusicEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Register(System.Object)">
            <summary>
            
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Unregister">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Pause(System.Object)">
            <summary>
            
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.MusicManager.Resume(System.Object[],System.Object)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="layer"></param>
        </member>
        <member name="T:XKTools.Sound.Const.EAudioGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.Const.EAudioGroup.Music">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.Const.EAudioGroup.Ambient">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.Const.EAudioGroup.AmbientFX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.Const.EAudioGroup.SFX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.Const.EAudioGroup.MenuFX">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.Const.EAudioGroup.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Sound.SoundManager">
            <summary>
            SoundManager that can be used to play sound.
            </summary>
        </member>
        <member name="T:XKTools.Sound.SoundManager.LoadClipDlg">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Sound.SoundManager.PlayData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Sound.SoundManager.PlayData.m_StartTime">
            <summary>
            Date at wich the sound was played
            </summary>
        </member>
        <member name="F:XKTools.Sound.SoundManager.PlayData.m_PlayingDelay">
            <summary>
            Minimum time (in sec) before this
            sound can be played again
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.PlayData.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="delay"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.PlayData.IsPlayable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.PlayData.Replay(System.Single)">
            <summary>
            
            </summary>
            <param name="newDelay"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.PlayData.ResetDelay">
            <summary>
            Reset the Playing Delay, allowing to replay the sound
            </summary>
        </member>
        <member name="F:XKTools.Sound.SoundManager.c_Tag">
            <summary>
            Log Tag
            </summary>
        </member>
        <member name="F:XKTools.Sound.SoundManager.m_AllowedAudioGroups">
            <summary>
            References of audio groups that are allowed to play sounds
            </summary>
        </member>
        <member name="F:XKTools.Sound.SoundManager.m_DelayedPlayingElements">
            <summary>
            Contains the date at which the sound 
            was played and the delay
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Pause(System.Object)">
            <summary>
            Called by pause manager
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Register(System.Object)">
            <summary>
            Register to the pause manager
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Resume(System.Object[],System.Object)">
            <summary>
            Called by pause manager
            </summary>
            <param name="param"></param>
            <param name="layer"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Unregister">
            <summary>
            Unregister from the pause manager
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.UpdateAudioListener">
            <summary>
            Update the position of the Audio Listener
            </summary>
        </member>
        <member name="P:XKTools.Sound.SoundManager.ListenerOffSet">
            <summary>
            Listener position offset accessor
            </summary>
        </member>
        <member name="P:XKTools.Sound.SoundManager.MasterVolume">
            <summary>
            volume of the audio listener
            </summary>
        </member>
        <member name="P:XKTools.Sound.SoundManager.AudioListener">
            <summary>
            Audio Listener
            </summary>
        </member>
        <member name="P:XKTools.Sound.SoundManager.TransformToFollow">
            <summary>
            The transform that the listener shall follow
            </summary>
        </member>
        <member name="P:XKTools.Sound.SoundManager.RolloffMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Set3DSoundsMaxDistance(System.Single)">
            <summary>
            
            </summary>
            <param name="maxDistance"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Get3DSoundsMaxDistance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Set3DSoundsMinDistance(System.Single)">
            <summary>
            
            </summary>
            <param name="minDistance"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetDSoundsMinDistance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Sound.SoundManager.CheckSpam">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddGroup(System.Object,System.Object)">
            <summary>
            Add a group to the sound manager
            </summary>
            <param name="reference"></param>
            <param name="pauseLayer"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetAudioGroup(System.Object)">
            <summary>
            Get and existing audio group
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Sound.SoundManager.AllowLoadingLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPath(System.Object,System.String)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Key</param>
            <param name="path">Sound file path</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPath(System.Object,System.String,System.Single)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Key</param>
            <param name="path">Sound file path</param>
            <param name="volume">Sound file volume modulator (default value is 1.0f)</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPath(System.Object,System.String[])">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="clipPaths">Clip paths</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPath(System.Object,System.String[],System.Boolean)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="clipPaths">Clip paths</param>
            <param name="random">default is true</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPath(System.Object,System.String,System.Type,System.Boolean)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="basePath">Clip base path</param>
            <param name="enumType">Enum contains path</param>
            <param name="containsCount"> true if enum contains Count value</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPath(System.Object,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="basePath">Clip base path</param>
            <param name="enumType">Enum contains path</param>
            <param name="containsCount"> true if enum contains Count value</param>
            <param name="random">default is true</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPathReplay(System.Object,System.String)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            This clip will be recorded and replayed
            </summary>
            <param name="reference"></param>
            <param name="path"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPathReplay(System.Object,System.String,System.Single)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            This clip will be recorded and replayed
            </summary>
            <param name="reference"></param>
            <param name="path"></param>
            <param name="volume"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPathReplay(System.Object,System.String[])">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="clipPaths">Clip set keys</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPathReplay(System.Object,System.String[],System.Boolean)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="clipPaths">Clip set keys</param>
            <param name="random">default is true</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPathReplay(System.Object,System.String,System.Type,System.Boolean)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="basePath">Clip base path</param>
            <param name="enumType">Enum contains path</param>
            <param name="containsCount"> true if enum contains Count value</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AddClipPathReplay(System.Object,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Associate a key to a path (register the clip to the manager).
            The key will be used each time you want to play this sound
            </summary>
            <param name="reference">Randomized clip key</param>
            <param name="basePath">Clip base path</param>
            <param name="enumType">Enum contains path</param>
            <param name="containsCount"> true if enum contains Count value</param>
            <param name="random">default is true</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.SetClipVolume(System.Object,System.Single)">
            <summary>
            This function is for sound volume initialization from clip reference
            </summary>
            <param name="reference">Key</param>
            <param name="volume">Sound file volume modulator (default value is 1.0f)</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.LoadClip(System.Object)">
            <summary>
            Load a clip in memory.
            (Key must be registered)
            </summary>
            <param name="clipReference">Key</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetClip(System.Object)">
            <summary>
            Directly return the clip if it was in memory
            If it wasn't then load the clip and return it.
            If the clip is not found, log errors.
            </summary>
            <param name="clipReference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetClipFromPath(System.String)">
            <summary>
            Load the AudioClip from the given path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetClipNoLog(System.Object)">
            <summary>
            Directly return the clip if it was in memory
            If it wasn't then load the clip and return it.
            If the clip is not found, does not log errors.
            Can be used to determine if a clip exist or not.
            For instance : on Metegol, we used it calling [TeamName]_[Sound]
            and if it did not exist we used it calling Common_[Sound]
            => If the specific sound did not exist, we used the common sound.
            </summary>
            <param name="clipReference"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Sound.SoundManager.LoadClipMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetAudioReference(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetExistingAudioElement(UnityEngine.AudioSource)">
            <summary>
            Get an existing audio element from an audio source 
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetNewAudioElement(System.Object)">
            <summary>
            Create and return a new audio element from a clip ref
            </summary>
            <param name="clipReference"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetNewAudioElement(System.Object,System.Object)">
            <summary>
            Create and return a new audio element from a clip ref
            </summary>
            <param name="clipReference"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetNewAudioElement(System.Object,System.Object,System.Object)">
            <summary>
            Create and return a new audio element from a clip ref and a group ref
            </summary>
            <param name="clipReference"></param>
            <param name="groupReference"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.GetNewAudioElement(XKTools.Sound.AudioReference,UnityEngine.AudioClip,XKTools.Sound.AudioGroup,System.Object)">
            <summary>
            Used by the replay system
            </summary>
            <param name="reference"> </param>
            <param name="clip"></param>
            <param name="group"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(System.Object,System.Object,System.Object,System.Object,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Play and return an audio element
            </summary>
            <param name="clipReference">The reference of the clip that need to be played</param>
            <param name="groupReference">The group it should be associated with</param>
            <param name="layer">The pause layer it should be associated with</param>
            <param name="delayer"></param>
            <param name="delay">Minimum time before this clip can be played again</param>
            <param name="fadeIn">The duration of the fade in it will do every time the sound starts playing. 0.0f means no fade</param>
            <param name="fadeOut">The duration of the fade out it will do every time the sound stops playing. 0.0f means no fade</param>
            <param name="pitch">The pitch of the sound</param>
            <param name="priority">The priority of the sound</param>
            <param name="loop">If the sound must loop or not</param>
            <param name="unloadClipOnStop">If the clip must be unloaded once played</param>
            <param name="destroySourceOnStop">If the source must be destroyed once played</param>
            <returns>The audio element</returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(System.Object,System.Object,System.Object,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Play and return an audio element
            </summary>
            <param name="clipReference">The reference of the clip that need to be played</param>
            <param name="groupReference">The group it should be associated with</param>
            <param name="layer">The pause layer it should be associated with</param>
            <param name="fadeIn">The duration of the fade in it will do every time the sound starts playing. 0.0f means no fade</param>
            <param name="fadeOut">The duration of the fade out it will do every time the sound stops playing. 0.0f means no fade</param>
            <param name="pitch">The pitch of the sound</param>
            <param name="priority">The priority of the sound</param>
            <param name="loop">If the sound must loop or not</param>
            <param name="unloadClipOnStop">If the clip must be unloaded once played</param>
            <param name="destroySourceOnStop">If the source must be destroyed once played</param>
            <returns>The audio element</returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(System.Object,System.Object,System.Object,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Play and return an audio element
            </summary>
            <param name="clipReference">The reference of the clip that need to be played</param>
            <param name="groupReference">The group it should be associated with</param>
            <param name="layer">The pause layer it should be associated with</param>
            <param name="fadeIn">The duration of the fade in it will do every time the sound starts playing. 0.0f means no fade</param>
            <param name="fadeOut">The duration of the fade out it will do every time the sound stops playing. 0.0f means no fade</param>
            <param name="loop">If the sound must loop or not</param>
            <param name="unloadClipOnStop">If the clip must be unloaded once played</param>
            <param name="destroySourceOnStop">If the source must be destroyed once played</param>
            <returns>The audio element</returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement,System.Object,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Play the clip of a given audio element
            </summary>
            <param name="element">The audio element that needs to be played</param>
            <param name="delayer"></param>
            <param name="delay">Minimum durantion between two consecutive plays of this clip</param>
            <param name="fadeIn">The duration of the fade in it will do every time the sound starts playing. 0.0f means no fade</param>
            <param name="fadeOut">The duration of the fade out it will do every time the sound stops playing. 0.0f means no fade</param>
            <param name="pitch">The pitch of the sound</param>
            <param name="priority">The priority of the sound</param>
            <param name="loop">If the sound must loop or not</param>
            <param name="unloadClipOnStop">If the clip must be unloaded once played</param>
            <param name="destroySourceOnStop">If the source must be destroyed once played</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Play the clip of a given audio element
            </summary>
            <param name="element">The audio element that needs to be played</param>
            <param name="fadeIn">The duration of the fade in it will do every time the sound starts playing. 0.0f means no fade</param>
            <param name="fadeOut">The duration of the fade out it will do every time the sound stops playing. 0.0f means no fade</param>
            <param name="pitch">The pitch of the sound</param>
            <param name="priority">The priority of the sound</param>
            <param name="loop">If the sound must loop or not</param>
            <param name="unloadClipOnStop">If the clip must be unloaded once played</param>
            <param name="destroySourceOnStop">If the source must be destroyed once played</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Play the clip of a given audio element
            </summary>
            <param name="element">The audio element that needs to be played</param>
            <param name="fadeIn">The duration of the fade in it will do every time the sound starts playing. 0.0f means no fade</param>
            <param name="fadeOut">The duration of the fade out it will do every time the sound stops playing. 0.0f means no fade</param>
            <param name="loop">If the sound must loop or not</param>
            <param name="unloadClipOnStop">If the clip must be unloaded once played</param>
            <param name="destroySourceOnStop">If the source must be destroyed once played</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement,System.Boolean)">
            <summary>
            No fade, no loop, do not unload, do not destroy
            </summary>
            <param name="element"></param>
            <param name="restartSoundIfPlayingAlready"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement,System.Object,System.Single,UnityEngine.Transform)">
            <summary>
            
            </summary>
            <param name="element">Element to play</param>
            <param name="delayer">Delay reference (several element with the same reference won't be played simultenaously</param>
            <param name="delay">time to wait before playing two element</param>
            <param name="transform">Location of the sound</param>
            <returns>True if the element was actually played</returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Play(XKTools.Sound.AudioElement,System.Object,System.Single,UnityEngine.Transform,System.Boolean)">
            <summary>
            
            </summary>
            <param name="element">Element to play</param>
            <param name="delayer">Delay reference (several element with the same reference won't be played simultenaously</param>
            <param name="delay">time to wait before playing two element</param>
            <param name="transform">Location of the sound</param>
            <param name="ContinueAfterDestruction">true make the sound continue after the followed object destruction (for 3D sounds)</param>
            <returns>True if the element was actually played</returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.PlayWithDelay(XKTools.Sound.AudioElement,System.Single)">
            <summary>
            Play the given audio element in given seconds
            </summary>
            <param name="element">The element to be played</param>
            <param name="time">The seconds in which the given audio element will be played</param>
            <returns>True if the element is valid</returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.ResetDelayer(System.Object)">
            <summary>
            Reset the delay, allowing to replay the sound before the initial delay
            </summary>
            <param name="reference">delayer to reset</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.Stop(XKTools.Sound.AudioElement)">
            <summary>
            Stop the clip of a given audio element
            </summary>
            <param name="element">The audio element that needs to stop</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopLoop(XKTools.Sound.AudioElement)">
            <summary>
            Stop the loop of a given audio element : the clip will play till its end but won't restart
            </summary>
            <param name="element">The audio element that needs to stop looping</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopAllSounds(System.Boolean)">
            <summary>
            Stop all sounds
            </summary>
            <param name="destroy">Tells if source must be destroyed</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopAllSounds(System.Boolean,System.Boolean)">
            <summary>
            Stop all sounds
            </summary>
            <param name="destroy">Tells if source must be destroyed</param>
            <param name="unload">Tells if clip must be unload. Default is false</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopAllSoundsFromGroup(XKTools.Sound.AudioGroup,System.Boolean,System.Boolean)">
            <summary>
            Stop all sounds from a specified group
            </summary>
            <param name="group">the specified group</param>
            <param name="destroy">Tells if source must be destroyed</param>
            <param name="unload">Tells if clip must be unload. Default is false</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopAllSoundsFromGroup(XKTools.Sound.AudioGroup,System.Boolean)">
            <summary>
            Stop all sounds from a specified group
            </summary>
            <param name="group">the specified group</param>
            <param name="destroy">Tells if source must be destroyed</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopAllSoundsFromGroup(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Stop all sounds from a specified group
            </summary>
            <param name="groupReference">Reference of the specified group</param>
            <param name="destroy">Tells if source must be destroyed</param>
            <param name="unload">Tells if clip must be unload. Default is false</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.StopAllSoundsFromGroup(System.Object,System.Boolean)">
            <summary>
            Stop all sounds from a specified group
            </summary>
            <param name="groupReference">Reference of the specified group</param>
            <param name="destroy">Tells if source must be destroyed</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.FadeIn(XKTools.Sound.AudioElement,System.Single)">
            <summary>
            Fade in an audio element (already playing)
            </summary>
            <param name="element">The audio element that needs to fade</param>
            <param name="fadeInDuration">The duration of the fade</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.FadeOut(XKTools.Sound.AudioElement,System.Single)">
            <summary>
            Fade out an audio element (already playing) and stops it after fade.
            </summary>
            <param name="element">The audio element that needs to fade</param>
            <param name="fadeOutDuration">The duration of the fade</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.ChangeVolume(XKTools.Sound.AudioElement,System.Single,System.Single)">
            <summary>
            Smoothly change the volume of an audio element
            </summary>
            <param name="element">The audio element that needs to change volume</param>
            <param name="newVolume">The new volume asked</param>
            <param name="changeDuration">The duration of the change</param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AllowGroup(XKTools.Sound.AudioGroup)">
            <summary>
            Allow sound of the given group to be played
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.AllowGroup(System.Object)">
            <summary>
            Allow sound of the given group to be played
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.DontAllowGroup(XKTools.Sound.AudioGroup)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.DontAllowGroup(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:XKTools.Sound.SoundManager.IsGroupAllowed(XKTools.Sound.AudioGroup)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Sound.SoundManager.IsGroupAllowed(System.Object)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Spline.BSpline">
            <summary>
            B-Spline management
            </summary>
        </member>
        <member name="T:XKTools.Spline.BSpline.EControlPoints">
            <summary>
            Control points source
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.EControlPoints.None">
            <summary>
            No control point
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.EControlPoints.ChildsOfAttached">
            <summary>
            Control points from children of attached
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.EControlPoints.ChildsOfTransform">
            <summary>
            Control points from children of a designated transform
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.EControlPoints.GivenCollection">
            <summary>
            Control points from collections
            </summary>
        </member>
        <member name="T:XKTools.Spline.BSpline.ECurveProperty">
            <summary>
            Specify looped, clamped or simple curve
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.ECurveProperty.None">
            <summary>
            No loop nor clamp
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.ECurveProperty.Looped">
            <summary>
            Looped curve
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.ECurveProperty.Clamped">
            <summary>
            Clamped curve
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_DisplayOnOffMode">
            <summary>
            Enable gizmo drawing of BSpline on off mode
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_DisplayOnRuntime">
            <summary>
            Enable gizmo drawing of BSpline on runtime
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_DisplayBSplinePoints">
            <summary>
            Enable gizmo drawing of every point of the BSpline
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_DisplayControlLines">
            <summary>
            Enable gizmo drawing of lines between control points
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_UseInheritedRotation">
            <summary>
            Enable using of inherited rotations
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_UseTrajectoryRotation">
            <summary>
            Enable using of trajectory rotations
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_SplineIsFrom">
            <summary>
            Control points source
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_Spline">
            <summary>
            Parent of control points
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_CurveProperty">
            <summary>
            Loop or clamp property
            </summary>
        </member>
        <member name="F:XKTools.Spline.BSpline.m_YIsForward">
            <summary>
            Use Y axis as forward instead of Z (for 2D games for example)
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject)">
            <summary>
            Create an empty BSpline attached to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <returns>Empty BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject,System.Collections.Generic.List{UnityEngine.Vector3},System.Int32,System.Collections.Generic.List{UnityEngine.Vector3},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a BSpline from Lists and attach it to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <param name="controlPoints">Spline control points (at least 3)</param>
            <param name="discretization"></param>
            <param name="controlPointsRotation">Rotations inherited from control points</param>
            <param name="useTrajectoryRotations"></param>
            <param name="doLoop">Set true if you want your BSpline looped</param>
            <param name="doClamp">Set true if you want your BSpline clamped</param>
            <param name="yIsForward">Use Y axis as forward instead of Z (for 2D games for example)</param>
            <returns>BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject,System.Collections.Generic.List{UnityEngine.Vector3},System.Int32,System.Collections.Generic.List{UnityEngine.Vector3},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a BSpline from Lists and attach it to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <param name="controlPoints">Spline control points (at least 3)</param>
            <param name="discretization"></param>
            <param name="controlPointsRotation">Rotations inherited from control points</param>
            <param name="useTrajectoryRotations"></param>
            <param name="doLoop">Set true if you want your BSpline looped</param>
            <param name="doClamp">Set true if you want your BSpline clamped</param>
            <returns>BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject,System.Collections.Generic.List{UnityEngine.Vector3},System.Int32)">
            <summary>
            Create a BSpline from Lists and attach it to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <param name="controlPoints">Spline control points (at least 3)</param>
            <param name="discretization"></param>
            <returns>BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject,UnityEngine.Transform,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a BSpline from a Transform children and attach it to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <param name="spline">Parent of control points</param>
            <param name="discretization"></param>
            <param name="useInheritedRotations"></param>
            <param name="useTrajectoryRotations"></param>
            <param name="doLoop">Set true if you want your BSpline looped</param>
            <param name="doClamp">Set true if you want your BSpline clamped</param>
            <param name="yIsForward">Use Y axis as forward instead of Z (for 2D games for example)</param>
            <returns>BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject,UnityEngine.Transform,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a BSpline from a Transform children and attach it to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <param name="spline">Parent of control points</param>
            <param name="discretization"></param>
            <param name="useInheritedRotations"></param>
            <param name="useTrajectoryRotations"></param>
            <param name="doLoop">Set true if you want your BSpline looped</param>
            <param name="doClamp">Set true if you want your BSpline clamped</param>
            <returns>BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.CreateBSpline(UnityEngine.GameObject,UnityEngine.Transform,System.Int32)">
            <summary>
            Create a BSpline from a Transform children and attach it to a GameObject
            </summary>
            <param name="attachedTo">BSpline will be attached to this GameObject</param>
            <param name="spline">Parent of control points</param>
            <param name="discretization"></param>
            <returns>BSpline created</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.Start">
            <summary>
            Initialize BSpline
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.OnDrawGizmos">
            <summary>
            Draw BSpline gizmos
            Enabled by setting "display on off mode" or "display on runtime" on true
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.InitializeControlPoints">
            <summary>
            Initialize control points, calling needed functions
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.InitializeControlPointsFromChildren">
            <summary>
            Get control points from children of the GameObject BSpline is attached to
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.InitializeControlPointsFromTransformChildren">
            <summary>
            Get control points from children of designated Transform
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.ComputeBSpline">
            <summary>
            Compute BSpline
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.ComputeBSplineVertex(System.Int32,System.Single)">
            <summary>
            Compute a BSpline point
            </summary>
            <param name="segment">Current segment on which the point is</param>
            <param name="t">Current fraction of the segment</param>
        </member>
        <member name="M:XKTools.Spline.BSpline.MoveAlongSpline(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Move a Transform along the BSpline
            </summary>
            <param name="movingItem">Transform to move</param>
            <param name="initialRotation">Rotation item has at the beginning</param>
            <param name="lengthTraveled">Distance already traveled along the spline</param>
            <param name="speed"></param>
            <param name="smoothRotation"></param>
            <returns>Total distance traveled along the spline</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.ComputeLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Spline.BSpline.ComputeBSplineCoeff(System.Int32,System.Int32,System.Single)">
            <summary>
            Compute Reisenfeld number
            </summary>
            <param name="i"></param>
            <param name="m"></param>
            <param name="t"></param>
            <returns>Reisenfeld number</returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.GetStartingPoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Spline.BSpline.GetCurveLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Spline.BSpline.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Spline.Catmull">
            <summary>
            Catmull-Rom spline
            </summary>
        </member>
        <member name="M:XKTools.Spline.Catmull.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Spline.Catmull.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
        </member>
        <member name="M:XKTools.Spline.Catmull.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Automatically compute a curve from those 3 ctrl points (not accurate)
            </summary>
            <param name="from"></param>
            <param name="almostBy"></param>
            <param name="to"></param>
        </member>
        <member name="M:XKTools.Spline.Catmull.ComputeValue(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Spline.Catmull.Sample(System.Collections.Generic.List{UnityEngine.Vector3},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="sampleAmount"></param>
            <param name="pushLast"></param>
        </member>
        <member name="M:XKTools.Spline.Catmull.UpdateP3(UnityEngine.Vector3)">
            <summary>
            P1 becomes P0, P2 becomes P1, P3 becomes P2
            </summary>
            <param name="newP3">The new P3 value</param>
        </member>
        <member name="P:XKTools.Spline.Catmull.P0">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Spline.Catmull.P1">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Spline.Catmull.P2">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Spline.Catmull.P3">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Stats.IStatsContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.IStatsContainer.IsReadyForStatsProcessing">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.IStatsContainer.PrepareForStatsProcessing">
            <summary></summary>
        </member>
        <member name="M:XKTools.Stats.IStatsContainer.ProcessStats">
            <summary></summary>
        </member>
        <member name="M:XKTools.Stats.IStatsContainer.ClearStats">
            <summary></summary>
        </member>
        <member name="P:XKTools.Stats.IStatsContainer.AreStatsProcessed">
            <summary></summary>
        </member>
        <member name="T:XKTools.Stats.NetworkStabilityScore">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.NetworkStabilityScore.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.NetworkStabilityScore.#ctor(System.Collections.Hashtable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.NetworkStabilityScore.Process">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.NetworkStabilityScore.Score">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.NetworkStabilityScore.AvgPing">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.NetworkStabilityScore.PingStandardDev">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.NetworkStabilityScore.AvgSpikeAmplitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.NetworkStabilityScore.AvgSpikeMagnitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.NetworkStabilityScore.SpikeCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Stats.PingStatsManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Stats.PingStatsManager.PingStats">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.Min">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.Max">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.Avg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.StdDev">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.SpikeCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.AvgSpikeAmp">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.PingStats.AvgSpikeMag">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Stats.PingStatsManager.LagSpikeData">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.LagSpikeData.AbsoluteStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.LagSpikeData.AbsoluteStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.LagSpikeData.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.PingStatsManager.LagSpikeData.Amplitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.PingStatsManager.LagSpikeData.Magnitude">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.LagSpikeData.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.LagSpikeData.GetAmplitude(XKTools.Stats.PingStatsManager.LagSpikeData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.LagSpikeData.GetMagnitude(XKTools.Stats.PingStatsManager.LagSpikeData)">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.PingStatsManager.m_Stats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.SetData(XKTools.Net.PlayerData)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.PushScore">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.ProcessNetworkStabilityScore">
            <summary>
            Compute a network stability score.
            The lower the score, the more stable the connexion was.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.ReadFromHashtable(System.Collections.Hashtable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.LogStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.IsReadyForStatsProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.PrepareForStatsProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.ProcessStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.ClearStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.TestSpikes">
            <summary>
            For debug purpose
            </summary>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.SimulatePing(System.Int32[],System.Int32)">
            <summary>
            For debug purpose
            </summary>
            <param name="pingValues"></param>
            <param name="size"></param>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.LogSpikesData(System.Collections.Generic.List{XKTools.Stats.PingStatsManager.LagSpikeData},XKTools.Stats.PingStatsManager.LagSpikeData)">
            <summary>
            For debug purpose
            </summary>
            <param name="spikes"></param>
            <param name="pending"></param>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.GetSpikes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Compute the spikes in the given data.
            If you plan to use this method over time, you should consider using an offset and a pending spike reference.
            </summary>
            <param name="values">Data from which the spikes are computed</param>
            <returns>A list containing the detected spikes</returns>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.GetSpikes(System.Collections.Generic.List{System.Int32},System.Int32,XKTools.Stats.PingStatsManager.LagSpikeData@)">
            <summary>
            Compute the spikes in the given data
            </summary>
            <param name="values">Data from which the spikes are computed</param>
            <param name="offset">Number of values that have been skipped (before the given values)</param>
            <param name="pendingSpike">Either the previous or the new unsolved spike</param>
            <returns>A list containing the detected spikes</returns>
        </member>
        <member name="M:XKTools.Stats.PingStatsManager.GetSpikes(System.Collections.Generic.List{System.Int32},System.Single,System.Single,System.Int32,XKTools.Stats.PingStatsManager.LagSpikeData@)">
            <summary>
            Compute the spikes in the given data
            </summary>
            <param name="values">Data from which the spikes are computed</param>
            <param name="avg">Average value of the data</param>
            <param name="stdDev">Standard deviation of the data</param>
            <param name="offset">Number of values that have been skipped (before the given values)</param>
            <param name="pendingSpike">Either the previous or the new unsolved spike</param>
            <returns>A list containing the detected spikes</returns>
        </member>
        <member name="P:XKTools.Stats.PingStatsManager.Scores">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Stats.Accumulator">
            <summary>
            Store multiple concatenated float stats into one card
            </summary>
        </member>
        <member name="M:XKTools.Stats.Accumulator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.Accumulator.PushValue(System.Single)">
            <summary>
            Adds a stat to the card
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XKTools.Stats.Accumulator.PushAccumulator(XKTools.Stats.Accumulator)">
            <summary>
            Concatenates 2 Accumulator into the current stat card
            </summary>
            <param name="accumulator"></param>
        </member>
        <member name="M:XKTools.Stats.Accumulator.GetAverage">
            <summary>
            Gets the average value of the pushed stats
            </summary>
            <returns></returns>
        </member>
        <member name="P:XKTools.Stats.Accumulator.Min">
            <summary>
            Min value of the pushed stats
            </summary>
        </member>
        <member name="P:XKTools.Stats.Accumulator.Max">
            <summary>
            Max value of the pushed stats
            </summary>
        </member>
        <member name="P:XKTools.Stats.Accumulator.Accumulation">
            <summary>
            Min value of the pushed stats
            </summary>
        </member>
        <member name="P:XKTools.Stats.Accumulator.EntryCount">
            <summary>
            Number of stats pushed to the card
            </summary>
        </member>
        <member name="T:XKTools.Stats.StatsManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.StatsManager.c_LogKeyword">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Stats.StatsManager.m_SubManagers">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsManager.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsManager.AddSubManager(XKTools.Stats.StatsSubManager)">
            <summary>
            
            </summary>
            <param name="subManager"></param>
        </member>
        <member name="M:XKTools.Stats.StatsManager.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsManager.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsManager.GetSubManager``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsManager.GetStatsSubManager``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:XKTools.Stats.StatsManager.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.StatsManager.SubManagers">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Stats.StatsProcessor">
            <summary>
            This class provides generic methods for basic stats processing.
            The available operators are Max, Min, Avg and Sum.
            Example code:
            <code>
            // Data class definition
            private class Data
            {
                public int IntData;
                public float FloatData;
            }
            
            // Some accessors
            static private int IntAccessor(Data entry)
            {
                return entry.IntData;
            }
            
            static private float FloatAccessor(Data entry)
            {
                return entry.FloatData;
            }
            
            // Test method
            
            public void ProcessStats()
            {
                XKLog.EnableLogType(StatsManager.LogKeyword, true);
            
                // With a List
                List|int| list = new List|int|();
                list.Add(4);
                list.Add(-5);
                list.Add(0);
                XKLog.Log(StatsManager.LogKeyword, "The maximum is " + StatsProcessor.Max|int|(list));
            
                // With a simple dictionary
                Dictionary|string, int| dict = new Dictionary|string, int|();
                dict.Add("data1", 3);
                dict.Add("data2", 1664);
                KeyValuePair|string, int| max = StatsProcessor.Max(dict), min = StatsProcessor.Min(dict);
                XKLog.Log(StatsManager.LogKeyword, "The maximum is " + max.Value + " and is reached for " + max.Key);
                XKLog.Log(StatsManager.LogKeyword, "The maximum is " + min.Value + " and is reached for " + min.Key);
                
                // With a more complex dictionary
                Data data3 = new Data(), data4 = new Data();
                data3.IntData = 3;
                data4.IntData = 42;
                data3.FloatData = 12f;
                data3.FloatData = 3.5f;
                
                Dictionary|string, Data| complexDict = new Dictionary|string, Data|();
                complexDict.Add("data3", data3);
                complexDict.Add("data4", data4);
                
                KeyValuePair|string, int| maxInt = StatsProcessor.Max|string, Data, int|(complexDict, IntAccessor);
                KeyValuePair|string, float| maxFloat = StatsProcessor.Max|string, Data, float|(complexDict, FloatAccessor);
                
                XKLog.Log(StatsManager.LogKeyword, "The maximum int is " + maxInt.Value + " and is reached for " + maxInt.Key);
                XKLog.Log(StatsManager.LogKeyword, "The maximum float is " + maxFloat.Value + " and is reached for " + maxFloat.Key);
                
                XKLog.EnableLogType(StatsManager.LogKeyword, false);
            }
            </code>
            </summary>
        </member>
        <member name="T:XKTools.Stats.StatsProcessor.Accessor`2">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.BasicAccessor``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Max``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2})">
            <summary>
            Compute the maximum value among data stored in a dictionary.
            
            For example, if you have 
            - the following class:
            <code>
                public class Data
                {
                    public int      m_IntData   = 0;
                    public float    m_FloatData = 0f;
                }
            </code>
            - dictionary storing several instance with a string-typed key:
            <code>
                Dictionary|string, Data| data = new Dictionary|string, Data|();
                // Insert data here ...
            </code>
            You can compute the maximum value of m_IntData by 
            - defining an accessor:
            <code>
                public int IntAccessor(Data entry)
                {
                    return entry.m_IntData;
                }
            </code>
            - Calling this method:
            <code>
                KeyValuePair|string, int| max = StatsProcessor.Max|string, Data, int|(data, IntAccessor);
                XKLog.Log("Stats", "The maximum is " + max.Value + " and is reached for " + max.Key);
            </code>
            </summary>
            <typeparam name="KeyT">Type of the dictionary keys</typeparam>
            <typeparam name="ValueT"> Type of the dictionary values</typeparam>
            <typeparam name="DataT">Type of the computed values (maybe a member of the dictionary values)</typeparam>
            <param name="data">Dictionary containing data</param>
            <param name="accessor">Method getting the computed value from the dictionary value</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Max``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Max``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Max``1(System.Collections.Generic.List{``0})">
            <summary>
            NOTE: probably less efficient than processing max on the list,
            but it is shorter to write. 
            TODO: Compare both methods and check if it's necessary to re-write the
            List-based methods without using dictionaries
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Max(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Alias for types [string, int]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Max(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Alias for types [string, double]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Min``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2})">
             <summary>
            
             </summary>
             <typeparam name="KeyT"></typeparam>
             <typeparam name="ValueT"></typeparam>
             <typeparam name="DataT"></typeparam>
             <param name="data"></param>
             <param name="accessor"></param>
             <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Min``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Min``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Min``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Min(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Alias for types [string, int]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Min(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Alias for types [string, double]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <param name="defaultAvg">Value returned when 'data' is empty</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <param name="defaultAvg">Value returned when 'data' is empty</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``2(System.Collections.Generic.Dictionary{``0,``1},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <param name="defaultAvg">Value returned when 'data' is empty</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg``1(System.Collections.Generic.List{``0},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <param name="defaultAvg">Value returned when 'data' is empty</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Alias for types [string, int]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Avg(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Alias for types [string, double]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Sum``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Sum``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Sum``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Sum``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Sum(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Alias for types [string, int]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Sum(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Alias for types [string, double]
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Var``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2})">
            <summary>
            Compute Variance.
            Used formula is sum(pi * xi²) - avg².
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Var``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Var``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Compute Variance.
            Used formula is sum(pi * xi²) - avg².
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Var``1(System.Collections.Generic.List{``0})">
            <summary>
            Compute Variance.
            Used formula is sum(pi * xi²) - avg².
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Var(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Alias for types [string, int]
            Compute Variance.
            Used formula is sum(pi * xi²) - avg².
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.Var(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Alias for types [string, double]
            Compute Variance.
            Used formula is sum(pi * xi²) - avg².
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.StdDev``3(System.Collections.Generic.Dictionary{``0,``1},XKTools.Stats.StatsProcessor.Accessor{``1,``2})">
            <summary>
            Compute standard deviation
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.StdDev``2(System.Collections.Generic.List{``0},XKTools.Stats.StatsProcessor.Accessor{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="ValueT"></typeparam>
            <typeparam name="DataT"></typeparam>
            <param name="data"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.StdDev``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Compute standard deviation
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.StdDev``1(System.Collections.Generic.List{``0})">
            <summary>
            Compute standard deviation
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.StdDev(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Alias for types [string, int]
            Compute standard deviation
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsProcessor.StdDev(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Alias for types [string, double]
            Compute standard deviation
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XKTools.Stats.StatsSubManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="revision"></param>
        </member>
        <member name="P:XKTools.Stats.StatsSubManager.Revision">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.StatsSubManager.Key">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.ReadFromHashtable(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.LogStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.IsHashtableKeyValid``1(System.Collections.Hashtable,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.GetHashtableValue``1(System.Collections.Hashtable,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.GetHashtableValue``1(System.Collections.Hashtable,System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.Hashtable2Dictionary``2(System.Collections.Hashtable,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="table"></param>
            <param name="clean"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.Dictionary2Hashtable``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="KeyT"></typeparam>
            <typeparam name="ValueT"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.IsReadyForStatsProcessing">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.PrepareForStatsProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.ProcessStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Stats.StatsSubManager.ClearStats">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Stats.StatsSubManager.AreStatsProcessed">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Performance.CountedUpdate">
            <summary>
            Control of performance : this let you choose the rate of updates in frames
            </summary>
        </member>
        <member name="F:XKTools.Performance.CountedUpdate.m_UseControl">
            <summary>
            Flag that activate the update controller
            </summary>
        </member>
        <member name="F:XKTools.Performance.CountedUpdate.m_UpdateFrameInterval">
            <summary>
            the count of waited frame between two granted Update()
            </summary>
        </member>
        <member name="F:XKTools.Performance.CountedUpdate.m_FixedUpdateFrameInterval">
            <summary>
            the count of waited frame between two granted Fixedupdate()
            </summary>
        </member>
        <member name="F:XKTools.Performance.CountedUpdate.m_LateUpdateFrameInterval">
            <summary>
            the count of waited frame between two granted Lateupdate()
            </summary>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.#ctor(System.Int32)">
            <summary>
            Constructor with update Frame Interval
            </summary>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor with update and fixed Frame Interval
            </summary>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor with update, fixed and late Frame Interval
            </summary>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.CanUpdate">
            <summary>
            Check if, according to this controller, you can Update
            </summary>
            <returns>true if you can Update</returns>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.CanFixedUpdate">
            <summary>
            Check if, according to this controller, you can Fixedupdate
            </summary>
            <returns>true if you can Fixedupdate</returns>
        </member>
        <member name="M:XKTools.Performance.CountedUpdate.CanLateUpdate">
            <summary>
            Check if, according to this controller, you can Lateupdate
            </summary>
            <returns>true if you can Lateupdate</returns>
        </member>
        <member name="P:XKTools.Performance.CountedUpdate.UseControl">
            <summary>
            Flag that activate the update controller
            </summary>
        </member>
        <member name="P:XKTools.Performance.CountedUpdate.UpdateFrameInterval">
            <summary>
            the count of waited frame between two granted Update()
            </summary>
        </member>
        <member name="P:XKTools.Performance.CountedUpdate.FixedUpdateFrameInterval">
            <summary>
            the count of waited frame between two granted Fixedupdate()
            </summary>
        </member>
        <member name="P:XKTools.Performance.CountedUpdate.LateUpdateFrameInterval">
            <summary>
            the count of waited frame between two granted Lateupdate()
            </summary>
        </member>
        <member name="T:XKTools.Performance.TimedUpdate">
            <summary>
            Control of performance : this let you choose the rate of updates in seconds
            </summary>
        </member>
        <member name="F:XKTools.Performance.TimedUpdate.m_UseControl">
            <summary>
            Flag that activate the update controller
            </summary>
        </member>
        <member name="F:XKTools.Performance.TimedUpdate.m_UpdateTimeInterval">
            <summary>
            the time in seconds between two granted Update()
            </summary>
        </member>
        <member name="F:XKTools.Performance.TimedUpdate.m_FixedUpdateTimeInterval">
            <summary>
            the time in seconds between two granted Fixedupdate()
            </summary>
        </member>
        <member name="F:XKTools.Performance.TimedUpdate.m_LateUpdateTimeInterval">
            <summary>
            the time in seconds between two granted Lateupdate()
            </summary>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.#ctor(System.Single)">
            <summary>
            Constructor with update Time Interval
            </summary>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.#ctor(System.Single,System.Single)">
            <summary>
            Constructor with update and fixed Time Interval
            </summary>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor with update, fixed and late Time Interval
            </summary>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.CanUpdate">
            <summary>
            Check if, according to this controller, you can Update
            </summary>
            <returns>true if you can Update</returns>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.CanFixedUpdate">
            <summary>
            Check if, according to this controller, you can Fixedupdate
            </summary>
            <returns>true if you can Fixedupdate</returns>
        </member>
        <member name="M:XKTools.Performance.TimedUpdate.CanLateUpdate">
            <summary>
            Check if, according to this controller, you can Lateupdate
            </summary>
            <returns>true if you can Lateupdate</returns>
        </member>
        <member name="P:XKTools.Performance.TimedUpdate.UseControl">
            <summary>
            Flag that activate the update controller
            </summary>
        </member>
        <member name="P:XKTools.Performance.TimedUpdate.UpdateTimeInterval">
            <summary>
            the count of waited frame between two granted Update()
            </summary>
        </member>
        <member name="P:XKTools.Performance.TimedUpdate.FixedUpdateTimeInterval">
            <summary>
            the count of waited frame between two granted Fixedupdate()
            </summary>
        </member>
        <member name="P:XKTools.Performance.TimedUpdate.LateUpdateTimeInterval">
            <summary>
            the count of waited frame between two granted Lateupdate()
            </summary>
        </member>
        <member name="T:XKTools.Performance.UpdateController">
            <summary>
            Control of performance : this let you check the rate of updates in frames and/or seconds
            </summary>
        </member>
        <member name="T:XKTools.Performance.UpdateController.EControllerMode">
            <summary>
            Controller Modes
            </summary>
        </member>
        <member name="F:XKTools.Performance.UpdateController.EControllerMode.TimeInterval">
            <summary>
            By interval of seconds
            </summary>
        </member>
        <member name="F:XKTools.Performance.UpdateController.EControllerMode.FrameInterval">
            <summary>
            By interval of frames
            </summary>
        </member>
        <member name="F:XKTools.Performance.UpdateController.EControllerMode.Framerate">
            <summary>
            By framerate
            </summary>
        </member>
        <member name="F:XKTools.Performance.UpdateController.EControllerMode.None">
            <summary>
            Desactivated
            </summary>
        </member>
        <member name="F:XKTools.Performance.UpdateController.m_Mode">
            <summary>
            Mode of the UpdateController
            </summary>
        </member>
        <member name="F:XKTools.Performance.UpdateController.m_Parameter">
            <summary>
            the Parameter between two granted Update()
            </summary>
        </member>
        <member name="M:XKTools.Performance.UpdateController.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:XKTools.Performance.UpdateController.#ctor(XKTools.Performance.UpdateController.EControllerMode,System.Single)">
            <summary>
            Constructor with parameter
            </summary>
        </member>
        <member name="M:XKTools.Performance.UpdateController.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:XKTools.Performance.UpdateController.CanUpdate">
            <summary>
            Check if, according to this controller, you can Update
            </summary>
            <returns>true if you can Update</returns>
        </member>
        <member name="M:XKTools.Performance.UpdateController.CheckParameter">
            <summary>
            Check if parameters have been modified
            </summary>
            <returns>return true if parameter have been refresh</returns>
        </member>
        <member name="P:XKTools.Performance.UpdateController.Mode">
            <summary>
            The mode of Update Control
            </summary>
        </member>
        <member name="P:XKTools.Performance.UpdateController.Parameter">
            <summary>
            The parameter of the Update Control
            </summary>
        </member>
        <member name="T:XKTools.EUpdateMode">
            <summary>
            Update Modes in monobehaviour
            </summary>
        </member>
        <member name="F:XKTools.EUpdateMode.FixedUpdate">
            <summary>
            Fixed update mode
            </summary>
        </member>
        <member name="F:XKTools.EUpdateMode.Update">
            <summary>
            Update mode
            </summary>
        </member>
        <member name="F:XKTools.EUpdateMode.LateUpdate">
            <summary>
            Late update mode
            </summary>
        </member>
        <member name="T:XKTools.Steering.Radars.ConicRadar">
            <summary>
            Base class of neighboor detection with cone detection
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.ConicRadar.m_SqrMinRadius">
            <summary>
            Minimum radius in which another vehicle is definitely considered in the neighborhood
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.ConicRadar.m_SqrMaxRadius">
            <summary>
            Maximum neighborhood radius
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.ConicRadar.m_AngleCos">
            <summary>
            Cosine of the maximum angle
            </summary>
            <remarks>All boid-like behaviors have an angle that helps limit them.
            We store the cosine of the angle for faster calculations</remarks>
        </member>
        <member name="M:XKTools.Steering.Radars.ConicRadar.Start">
            <summary>
            Start which initialize trigger
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.ConicRadar.AddNeighboor(XKTools.Steering.Vehicle)">
            <summary>
            Add a naighboor to local vehicle
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.ConicRadar.ShouldRemoveNeighboor(XKTools.Steering.Vehicle)">
            <summary>
            Check a neighboor of the local vehicle
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.ConicRadar.AngleDeg">
            <summary>
            Degree accessor for the angle
            </summary>
            <remarks>The cosine is actually used in calculations for performance reasons</remarks>
        </member>
        <member name="P:XKTools.Steering.Radars.ConicRadar.SqrMinRadius">
            <summary>
            Minimum squared radius in which another vehicle is definitely considered in the neighborhood
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.ConicRadar.SqrMaxRadius">
            <summary>
            Maximum neighborhood squared radius
            </summary>
        </member>
        <member name="T:XKTools.Steering.Radars.Radar">
            <summary>
            Base class of neighboor detection with trigger
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.Radar.m_TriggerCenter">
            <summary>
            Center of the sphere Trigger
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.Radar.m_SqrTriggerRadius">
            <summary>
            Squared Radius of the sphere Trigger
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.Radar.m_OverrideTrigger">
            <summary>
            Override Trigger
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.Radar.m_SphereCollider">
            <summary>
            Sphere collider of the Trigger, if no override Trigger
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.Radar.m_LayerMask">
            <summary>
            Layermask to filter neighboors
            </summary>
        </member>
        <member name="F:XKTools.Steering.Radars.Radar.m_CheckInside">
            <summary>
            Does the radar check vehicle inside trigger ?
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.Start">
            <summary>
            Start which initialize trigger
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.Update">
            <summary>
            Update with optionnal check
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.OnEnterTriggable(UnityEngine.Collider)">
            <summary>
            Override of the trigger enter event
            </summary>
            <param name="other">the collider which enters the trigger</param>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.OnExitTriggable(UnityEngine.Collider)">
            <summary>
            Override of the trigger exit event
            </summary>
            <param name="other">the collider which exits the trigger</param>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.ConfigureTrigger">
            <summary>
            Configure the trigger following members
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.AddNeighboor(XKTools.Steering.Vehicle)">
            <summary>
            Add a naighboor to local vehicle
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.RemoveNeighboor(XKTools.Steering.Vehicle)">
            <summary>
            Remove a naighboor to local vehicle
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.RemoveNeighboor(UnityEngine.Collider)">
            <summary>
            Remove a naighboor to local vehicle
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.CheckNeighboors">
            <summary>
            Check all current neighboors of the local vehicle
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.Radar.ShouldRemoveNeighboor(XKTools.Steering.Vehicle)">
            <summary>
            Check a neighboor of the local vehicle
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.Radar.SqrTriggerRadius">
            <summary>
            Set the radius of the sphere Trigger
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.Radar.TriggerCenter">
            <summary>
            Set the center of the sphere Trigger
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.Radar.OverrideTrigger">
            <summary>
            Set the override Collider
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.Radar.LayerMask">
            <summary>
            Set the Layermask to filter neighboors
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.Radar.CheckInside">
            <summary>
            Activate the radar vehicle check inside trigger 
            </summary>
        </member>
        <member name="T:XKTools.Steering.Radars.RadarHelper">
            <summary>
            Radar helper, it mainly transmits trigger information to its steering friends
            </summary>
        </member>
        <member name="M:XKTools.Steering.Radars.RadarHelper.Update">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Steering.Radars.RadarHelper.Triggable">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForAlignment">
            <summary>
            Steers a vehicle in alignment with detected neighbors
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForAlignment.CalculateNeighborContribution(XKTools.Steering.Vehicle)">
            <summary>
            Calculates the force Contribution by this behavior, for a neighbor
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="T:XKTools.Steering.SteerForCohesion">
            <summary>
            Steers a vehicle to remain in cohesion with neighbors
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForCohesion.CalculateNeighborContribution(XKTools.Steering.Vehicle)">
            <summary>
            Calculates the force Contribution by this behavior, for a neighbor
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="T:XKTools.Steering.SteerForCollisionAvoidance">
            <summary>
            Steers a vehicle to avoid collision with moving objects
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForCollisionAvoidance.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForCollisionAvoidance.m_SqrMinSafeDistance">
            <summary>
            The minimum safe distance the avoidance is success
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForCollisionAvoidance.m_MinSafeDistance">
            <summary>
            The minimum safe distance the avoidance is success
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForCollisionAvoidance.CalculateNeighborContribution(XKTools.Steering.Vehicle)">
            <summary>
            Calculates the force Contribution by this behavior, for a neighbor
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForCollisionAvoidance.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForCollisionAvoidance.SafeDistance">
            <summary>
            The safe distance the unalignement is success
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForSeparation">
            <summary>
            Steers a vehicle to keep separate from neighbors
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForSeparation.CalculateNeighborContribution(XKTools.Steering.Vehicle)">
            <summary>
            Calculates the force Contribution by this behavior, for a neighbor
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForSeparation.SeparationDistance">
            <summary>
            The separation Distance
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerGroup">
            <summary>
            Base class of Group steering component
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerGroup.m_OverrideNeighbors">
            <summary>
            override list of Neighbors
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerGroup.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerGroup.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerGroup.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerGroup.CalculateNeighborContribution(XKTools.Steering.Vehicle)">
            <summary>
            Calculates the force Contribution by this behavior, for a neighbor
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerGroup.Neighbors">
            <summary>
            Neighboors of local vehicle
            </summary>
        </member>
        <member name="T:XKTools.Steering.Steer">
            <summary>
            Base class of steering component
            </summary>
        </member>
        <member name="T:XKTools.Steering.Steer.SuccessDlg">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Steering.Steer.m_SuccessEvent">
            <summary>
            The Success Event
            </summary>
        </member>
        <member name="F:XKTools.Steering.Steer.m_SteeringForce">
            <summary>
            Last force calculated
            </summary>
        </member>
        <member name="F:XKTools.Steering.Steer.m_Vehicle">
            <summary>
            Cached vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Steer.m_Active">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Steering.Steer.m_DoesUnregister">
            <summary>
            Does it Unregister when objective reached
            </summary>
        </member>
        <member name="F:XKTools.Steering.Steer.m_DoesDeactive">
            <summary>
            Does it Deactive when objective reached
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.Awake">
            <summary>
            Get the vehicule when added
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.Success">
            <summary>
            Handle The succes of the steering
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.Enable">
            <summary>
            Enable the steering Component
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.Disable">
            <summary>
            Disable the steering Component
            </summary>
        </member>
        <member name="M:XKTools.Steering.Steer.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.Steer.Active">
            <summary>
            Set or get the Active Status of the object
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.Force">
            <summary>
            The force vector calculated by this steering behavior
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.WeighedForce">
            <summary>
            Force vector modified by the assigned weight 
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.Tick">
            <summary>
            Tick information
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.Vehicle">
            <summary>
            Vehicle that this behavior will influence
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.Weight">
            <summary>
            Weight assigned to this steering behavior
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.SuccessEvent">
            <summary>
            The Success Event
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.DoesUnregister">
            <summary>
            Does it Unregister when objective reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.Steer.DoesDeactive">
            <summary>
            Does it Deactive when objective reached
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForArrival">
            <summary>
            Steers a vehicle to arrival on a position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForArrival.m_StartBrakeDistance">
            <summary>
            The distance the braking start
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForArrival.m_SqrCatchDistance">
            <summary>
            The distance the target is reached
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForArrival.m_Target">
            <summary>
            The target position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForArrival.m_TargetTransform">
            <summary>
            The target transform
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForArrival.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForArrival.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForArrival.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForArrival.StartBrakeDistance">
            <summary>
            The distance the braking start
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForArrival.SqrCatchDistance">
            <summary>
            The squared distance the target is reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForArrival.CatchDistance">
            <summary>
            The distance the target is reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForArrival.Target">
            <summary>
            target position
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForArrival.TargetTransform">
            <summary>
            target transform
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForConstantAcceleration">
            <summary>
            Steers a vehicle to with a constant acceleration
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForConstantAcceleration.m_ConstantAcceleration">
            <summary>
            The Constant acceleration To apply
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForConstantAcceleration.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForConstantAcceleration.ConstantAcceleration">
            <summary>
            The constant acceleration To Apply
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForConstantForce">
            <summary>
            Steers a vehicle to with a constant force
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForConstantForce.m_ConstantForce">
            <summary>
            The Constant Force To apply
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForConstantForce.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForConstantForce.ConstantForce">
            <summary>
            The constant Force To Apply
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForContainment">
            <summary>
            Steer a vehicle inside of a containment zone
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForContainment.m_MinBounds">
            <summary>
            The Min Bounds
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForContainment.m_MaxBounds">
            <summary>
            The Max Bounds
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForContainment.m_Margin">
            <summary>
            The Margin to use
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForContainment.m_PredictionTime">
            <summary>
            The PRediction Time To Use
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForContainment.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForContainment.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForContainment.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForContainment.MinBounds">
            <summary>
            The Min Bounds
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForContainment.MaxBounds">
            <summary>
            The Max Bounds
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForContainment.Margin">
            <summary>
            The Margin to use
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForContainment.PredictionTime">
            <summary>
            The PredictionTime to use
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForDirection">
            <summary>
            Steers a vehicle to move in a direction
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForDirection.m_Direction">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForDirection.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForDirection.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForDirection.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForDirection.Direction">
            <summary>
            target direction
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForEvasion">
            <summary>
            Steers a vehicle to avoid another one
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForEvasion.m_Menace">
            <summary>
            The target vehicule
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForEvasion.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForEvasion.m_SqrSafeDistance">
            <summary>
            The distance the evasion is success
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForEvasion.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForEvasion.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForEvasion.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForEvasion.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForEvasion.Menace">
            <summary>
            Vehicle menace
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForEvasion.SqrSafeDistance">
            <summary>
            The squared distance the menace is droped
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForEvasion.SafeDistance">
            <summary>
            The safe distance the flee is success
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForFlee">
            <summary>
            Steers a vehicle to flee a position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForFlee.m_Menace">
            <summary>
            The menace position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForFlee.m_MenaceTransform">
            <summary>
            The menace transform
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForFlee.m_SqrSafeDistance">
            <summary>
            The distance the flee is success
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForFlee.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForFlee.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForFlee.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForFlee.Menace">
            <summary>
            menace position
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForFlee.MenaceTransform">
            <summary>
            menace transform
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForFlee.SqrSafeDistance">
            <summary>
            The squared distance the menace is droped
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForFlee.SafeDistance">
            <summary>
            The safe distance the flee is success
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForForbiddenZone">
            <summary>
            Steer a vehicle outside of a forbidden zone
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForForbiddenZone.m_MinBounds">
            <summary>
            The Min Bounds
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForForbiddenZone.m_MaxBounds">
            <summary>
            The Max Bounds
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForForbiddenZone.m_Margin">
            <summary>
            The Margin to use
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForForbiddenZone.m_PredictionTime">
            <summary>
            The PRediction Time To Use
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForForbiddenZone.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForForbiddenZone.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForForbiddenZone.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForForbiddenZone.MinBounds">
            <summary>
            The Min Bounds
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForForbiddenZone.MaxBounds">
            <summary>
            The Max Bounds
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForForbiddenZone.Margin">
            <summary>
            The Margin to use
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForLeaderFollowing">
            <summary>
            Steers a vehicle to follow a leader
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForLeaderFollowing.m_Leader">
            <summary>
            The Leader Vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForLeaderFollowing.m_FollowDistance">
            <summary>
            the distance to keep with the leader
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForLeaderFollowing.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForLeaderFollowing.FollowDistance">
            <summary>
            The distance to keep with the leader
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForLeaderFollowing.Leader">
            <summary>
            menace position
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForObstacleAvoidance">
            <summary>
            Steers a vehicle to avoid obstacle
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForObstacleAvoidance.m_PredictionDistance">
            <summary>
            the distance to predict collision
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForObstacleAvoidance.m_TestedLayers">
            <summary>
            the layer of Obstacles
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForObstacleAvoidance.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForObstacleAvoidance.TestedLayers">
            <summary>
            the layer of Obstacles
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForObstacleAvoidance.PredictionDistance">
            <summary>
            distance to look ahead for position prediction
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForObstacleAvoidanceLight">
            <summary>
            Steers a vehicle to avoid obstacle like if they where spheres
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForObstacleAvoidanceLight.m_Obstacle">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForObstacleAvoidanceLight.m_SqrRadiusObstacle">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForObstacleAvoidanceLight.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForObstacleAvoidanceLight.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForObstacleAvoidanceLight.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForObstacleAvoidanceLight.Obstacle">
            <summary>
            Obstacle
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForObstacleAvoidanceLight.SqrRadiusObstacle">
            <summary>
            Radius of obstacle
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForPathFollow">
            <summary>
            Steers a vehicle to follow a cylindric Path
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForPathFollow.PathKey">
            <summary>
            The strut of a path Key
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPathFollow.PathKey.Radius">
            <summary>
            the path radius
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPathFollow.PathKey.Transform">
            <summary>
            the target transform
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPathFollow.m_Path">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPathFollow.m_CurrentIndex">
            <summary>
            the curren index on the path
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPathFollow.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForPathFollow.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForPathFollow.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForPathFollow.Path">
            <summary>
            The path , composed by pair of radius / Transform
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForPursuit">
            <summary>
            Steers a vehicle to pursuit another one
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPursuit.m_SqrCatchDistance">
            <summary>
            The distance the target is reached
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPursuit.m_Target">
            <summary>
            The target vehicule
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPursuit.m_Offset">
            <summary>
            The offset to target
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForPursuit.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForPursuit.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForPursuit.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForPursuit.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForPursuit.SqrCatchDistance">
            <summary>
            The squared distance the target is reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForPursuit.CatchDistance">
            <summary>
            The distance the target is reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForPursuit.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForPursuit.Target">
            <summary>
            Vehicle target
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForPursuit.Offset">
            <summary>
            offset to target
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForSeek">
            <summary>
            Steers a vehicle to seek a position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForSeek.m_SqrCatchDistance">
            <summary>
            The distance the target is reached
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForSeek.m_Target">
            <summary>
            The target position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForSeek.m_Offset">
            <summary>
            The offset to target
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForSeek.m_TargetTransform">
            <summary>
            The target transform
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForSeek.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForSeek.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForSeek.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForSeek.SqrCatchDistance">
            <summary>
            The squared distance the target is reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForSeek.CatchDistance">
            <summary>
            The distance the target is reached
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForSeek.Target">
            <summary>
            target position
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForSeek.TargetTransform">
            <summary>
            target transform
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForSeek.Offset">
            <summary>
            offset to target
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForSphericalObstacleAvoidance">
            <summary>
            Steers a vehicle to avoid obstacle like if they where spheres
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForSphericalObstacleAvoidance.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForSphericalObstacleAvoidance.m_TestedLayers">
            <summary>
            the layer of Obstacles
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForSphericalObstacleAvoidance.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForSphericalObstacleAvoidance.TestedLayers">
            <summary>
            the layer of Obstacles
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForSphericalObstacleAvoidance.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForUnalignment">
            <summary>
            Steers a vehicle to unalign with two points
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForUnalignment.m_Target">
            <summary>
            The target position
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForUnalignment.m_TargetTransform">
            <summary>
            The target transform
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForUnalignment.m_Menace">
            <summary>
            The target vehicule
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForUnalignment.m_PredictionTime">
            <summary>
            the time to predict movement
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForUnalignment.m_SafeDistance">
            <summary>
            The safe distance the unalignement is success
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForUnalignment.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.SteerForUnalignment.DrawGUI">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForUnalignment.DrawGizmos">
            <summary>
            Debug Draw
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForUnalignment.PredictionTime">
            <summary>
            How many seconds to look ahead for position prediction
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForUnalignment.Target">
            <summary>
            target position
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForUnalignment.TargetTransform">
            <summary>
            target transform
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForUnalignment.Menace">
            <summary>
            Vehicle menace
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForUnalignment.SafeDistance">
            <summary>
            The safe distance the unalignement is success
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteerForWander">
            <summary>
            Steers a vehicle to wander
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForWander.m_WanderRadius">
            <summary>
            The wander circle radius
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteerForWander.m_WanderDistance">
            <summary>
            The wander circle distance
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteerForWander.CalculateForce">
            <summary>
            Calculates the force desired by this behavior
            </summary>
            <returns>
            A vector with the desired force <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.SteerForWander.WanderRadius">
            <summary>
            target transform
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteerForWander.WanderDistance">
            <summary>
            The Success Event
            </summary>
        </member>
        <member name="T:XKTools.Steering.Utility">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Steering.Utility.BlendIntoAccumulator(System.Single,System.Single,System.Single)">
            <summary>
            Blend a value into another, with rate
            </summary>
            <param name="smoothRate">the smooth rate of accumulation</param>
            <param name="newValue">the target value</param>
            <param name="smoothedAccumulator">the last smoothed value</param>
            <returns>the new smoothed value</returns>
        </member>
        <member name="M:XKTools.Steering.Utility.BlendIntoAccumulator(System.Single,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Blend a vector into another, with rate
            </summary>
            <param name="smoothRate">the smooth rate of accumulation</param>
            <param name="newValue">the target vector</param>
            <param name="smoothedAccumulator">the last smoothed vector</param>
            <returns>the new smoothed vector</returns>
        </member>
        <member name="M:XKTools.Steering.Utility.CosFromDegrees(System.Single)">
            <summary>
            Convert cosnius to degree angle
            </summary>
            <param name="angle">the degree angle</param>
            <returns>the cosinus</returns>
        </member>
        <member name="M:XKTools.Steering.Utility.DegreesFromCos(System.Single)">
            <summary>
            Convert degree angle to cosnius
            </summary>
            <param name="cos">the cosinus value</param>
            <returns>the degree angle</returns>
        </member>
        <member name="M:XKTools.Steering.Utility.parallelComponent(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            (IMPORTANT NOTE: assumes "basis" has unit magnitude (length==1))
            </summary>
            <param name="source"></param>
            <param name="unitBasis"></param>
            <returns>component of vector parallel to a unit basis vector</returns>
        </member>
        <member name="M:XKTools.Steering.Utility.perpendicularComponent(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            (IMPORTANT NOTE: assumes "basis" has unit magnitude (length==1))
            </summary>
            <param name="source"></param>
            <param name="unitBasis"></param>
            <returns>component of vector perpendicular to a unit basis vector</returns>
        </member>
        <member name="T:XKTools.Steering.AutonomousVehicle">
            <summary>
            Vehicle that is only driven by attached steering component using FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.Steering.AutonomousVehicle.FixedUpdate">
            <summary>
            Update of all steering component
            </summary>
        </member>
        <member name="T:XKTools.Steering.AutonomousVehicleBase">
            <summary>
            Base for the vehicles that are only driven by attached steering component 
            </summary>
        </member>
        <member name="M:XKTools.Steering.AutonomousVehicleBase.ApplySteeringForce(UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a steering force to this vehicle
            </summary>
            <param name="force">
            The force vector to apply<see cref="T:UnityEngine.Vector3"/>
            </param>
            <param name="elapsedTime">
            Elapsed time since the last update<see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:XKTools.Steering.AutonomousVehicleBase.RegenerateLocalSpace">
            <summary>
            Damp the forward to follow the movement
            </summary>
        </member>
        <member name="M:XKTools.Steering.AutonomousVehicleBase.ComputeNewForward">
            <summary>
            Compute the forward depending on the Velocity and the Speed
            </summary>
        </member>
        <member name="T:XKTools.Steering.AutonomousVehicleLight">
            <summary>
            Vehicle that is only driven by attached steering component using Update
            </summary>
        </member>
        <member name="M:XKTools.Steering.AutonomousVehicleLight.Update">
            <summary>
            Update of all steering component
            </summary>
        </member>
        <member name="T:XKTools.Steering.SteeredVehicle">
            <summary>
            Vehicle that is only steered attached steering component 
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteeredVehicle.m_AngularAcceleration">
            <summary>
            The Angular Acceleration
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteeredVehicle.m_AngularSpeed">
            <summary>
            The Current Angular Speed
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteeredVehicle.m_MaxAngularSpeed">
            <summary>
            The maximum Angular Speed
            </summary>
        </member>
        <member name="F:XKTools.Steering.SteeredVehicle.m_NoDirectionFading">
            <summary>
            Does the direction to be fade
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteeredVehicle.FixedUpdate">
            <summary>
            Update of all steering component
            </summary>
        </member>
        <member name="M:XKTools.Steering.SteeredVehicle.ApplySteeringForce(UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a steering force to this vehicle
            </summary>
            <param name="force">
            A force vector to apply<see cref="T:UnityEngine.Vector3"/>
            </param>
            <param name="elapsedTime">
            How long has elapsed since the last update<see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:XKTools.Steering.SteeredVehicle.RegenerateLocalSpace(System.Single)">
            <summary>
            Damp the forward to follow the movement
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteeredVehicle.AngularAcceleration">
            <summary>
            The Current Angular Velocity
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteeredVehicle.AngularSpeed">
            <summary>
            The Current Angular Speed
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteeredVehicle.MaxAngularSpeed">
            <summary>
            The maximum Angular Speed
            </summary>
        </member>
        <member name="P:XKTools.Steering.SteeredVehicle.NoDirectionFading">
            <summary>
            Does the direction to be fade
            </summary>
        </member>
        <member name="T:XKTools.Steering.TrackingVehicle">
            <summary>
            Vehicle that compute his value from his moves
            </summary>
        </member>
        <member name="M:XKTools.Steering.TrackingVehicle.FixedUpdate">
            <summary>
            Update of all steering component
            </summary>
        </member>
        <member name="T:XKTools.Steering.Vehicle">
            <summary>
            Base class of vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_CharacterController">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Rigidbody">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.c_MinForceThreshold">
            <summary>
            Minimum force squared magnitude threshold
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Steerings">
            <summary>
            List of steering behaviors
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_CanMove">
            <summary>
            Indicates if the behavior should move or not
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_DrawVolume">
            <summary>
            Does it draw debug Volume informations
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_DrawForce">
            <summary>
            Does it draw debug Force informations
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_TrajectoryTimeDraw">
            <summary>
            Does it draw debug Trajectory informations
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Center">
            <summary>
            The vehicle's center in the transform
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_ScaledCenter">
            <summary>
            The vehicle's center in the transform, scaled to by the transform's lossyScale
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Radius">
            <summary>
            The vehicle's radius.
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_ScaledRadius">
            <summary>
            The vehicle's radius, scaled by the maximum of the transform's lossyScale values
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_HasInertia">
            <summary>
            Does the vehicle continue going when there's no force applied to it?
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_InternalMass">
            <summary>
            Internally-assigned Mass for the vehicle.
            </summary>
            <remarks>
            This value will be disregarded if the object has a rigidbody, and
            that rigidbody's mass value will be used instead.
            </remarks>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_AxisXIgnore">
            <summary>
            Does the vehicle move in X space?
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_AxisYIgnore">
            <summary>
            Does the vehicle move in Y space?
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_AxisZIgnore">
            <summary>
            Does the vehicle move in Z space?
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Neighbors">
            <summary>
            The list of Neighbors
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Force">
            <summary>
            the current force apply on the vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Acceleration">
            <summary>
            the current acceleration apply on the vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Velocity">
            <summary>
            the current velocity apply on the vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_Speed">
            <summary>
            The current speed of the vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_MaxSpeed">
            <summary>
            The Maximum speed of the vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_MaxForce">
            <summary>
            The Maximum force that can be apply on the vehicle
            </summary>
        </member>
        <member name="F:XKTools.Steering.Vehicle.m_LastPosition">
            <summary>
            The last position of the vehicle
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.Awake">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.OnDrawGizmos">
            <summary>
            Debug Draw Gizmos of the vehicule radius
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.DrawGUI">
            <summary>
            Debug Draw GUI of the vehicule radius
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.CollectForces">
            <summary>
            Collect all force ins steerings compoments
            </summary>
            <returns>the total force</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.RecalculateScaledValues">
            <summary>
            Recalculates the vehicle's scaled radius and center
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.Move(UnityEngine.Vector3,System.Single)">
            <summary>
            Move the vehicle by force
            </summary>
            <param name="forceRaw">the raw force to apply</param>
            <param name="deltaTime">the time of physics simulation</param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.ComputeRigidbody">
            <summary>
            Compute internals values for rigidbody
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.MoveRigidbody(UnityEngine.Vector3)">
            <summary>
            Move an rigidbody by force
            </summary>
            <param name="forceRaw">the raw force to apply</param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.ComputeKinematics(UnityEngine.Vector3,System.Single)">
            <summary>
            Compute internals values for Kinematic body
            </summary>
            <param name="forceRaw">the raw force to apply</param>
            <param name="deltaTime">the time to simulate physics</param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.MoveKinematics(System.Single)">
            <summary>
            Move an Kinematic body by force, and compute internals values
            </summary>
            <param name="deltaTime">the time to simulate physics</param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.ReadLastMoves(System.Boolean)">
            <summary>
            Read physics information since LastCall
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.IsInNeighborhood(XKTools.Steering.Vehicle,System.Single,System.Single,System.Single)">
            <summary>
            Calculates if a vehicle is in the neighborhood of another
            </summary>
            <param name="other">
            Another vehicle to check against<see cref="T:XKTools.Steering.Vehicle"/>
            </param>
            <param name="sqrMinDistance">
            Minimum distance <see cref="T:System.Single"/>
            </param>
            <param name="sqrMaxDistance">
            Maximum distance <see cref="T:System.Single"/>
            </param>
            <param name="cosMaxAngle">
            Cosine of the maximum angle between vehicles (for performance)<see cref="T:System.Single"/>
            </param>
            <returns>
            True if within the neighborhood, or false if otherwise<see cref="T:System.Boolean"/>
            </returns>
            <remarks>Originally SteerLibrary.inBoidNeighborhood</remarks>
        </member>
        <member name="M:XKTools.Steering.Vehicle.GetSeekForce(UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a vector to seek a target position
            </summary>
            <param name="target">
            Target position <see cref="T:UnityEngine.Vector3"/>
            </param>
            <param name="sqrCatchDistance">
            The distance the target is reached <see cref="T:System.Single"/>
            </param>
            <returns>
            Seek vector <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.GetFleeForce(UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a vector to flee a target position
            </summary>
            <param name="target">
            Target position <see cref="T:UnityEngine.Vector3"/>
            </param>
            <param name="sqrSafeDistance">
            The squared distance the flee end <see cref="T:UnityEngine.Vector3"/>
            </param>
            <returns>
            Flee vector <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.GetAvoidanceForce(UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="sqrSafeDistance"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.GetForceToTargetVelocity(UnityEngine.Vector3)">
            <summary>
            Return the force to get immediatelly the target velocity
            </summary>
            <param name="targetVelocity">the target velocity</param>
            <returns>the force to apply</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.DistanceFromPerimeter(XKTools.Steering.Vehicle)">
            <summary>
            Returns the distance from the this vehicle to another
            </summary>
            <returns>
            The distance between both vehicles' positions. If negative, they are overlapping.
            </returns>
            <param name='other'>
            Vehicle to compare against.
            </param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.ResetOrientation">
            <summary>
            Resets the vehicle's orientation.
            </summary>
        </member>
        <member name="M:XKTools.Steering.Vehicle.PredictNearestApproachTime(XKTools.Steering.Vehicle)">
            <summary>
            Predicts the time until nearest approach between this and another vehicle
            </summary>
            <returns>
            The nearest approach time.
            </returns>
            <param name='other'>
            Other vehicle to compare against
            </param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.ComputeNearestApproachPositions(XKTools.Steering.Vehicle,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Given the time until nearest approach (predictNearestApproachTime)
            determine position of each vehicle at that time, and the distance
            between them
            </summary>
            <returns>
            Distance between positions
            </returns>
            <param name='other'>
            Other vehicle to compare against
            </param>
            <param name='time'>
            Time to estimate.
            </param>
            <param name='ourPosition'>
            Our position.
            </param>
            <param name='hisPosition'>
            The other vehicle's position.
            </param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.isAhead(UnityEngine.Vector3)">
            <summary>
            Check if the position is ahead this vehicule
            </summary>
            <param name="target">the target position</param>
            <returns>true if the position is ahead</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.isAside(UnityEngine.Vector3)">
            <summary>
            Check if the position is aside this vehicule
            </summary>
            <param name="target">the target position</param>
            <returns>true if the position is aside</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.isBehind(UnityEngine.Vector3)">
            <summary>
            Check if the position is behind this vehicule
            </summary>
            <param name="target">the target position</param>
            <returns>true if the position is behind</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.isAhead(UnityEngine.Vector3,System.Single)">
            <summary>
            Check if the position is ahead this vehicule, in a angle defined cone
            </summary>
            <param name="target">the target position</param>
            <param name="cosThreshold">the cos of the cone angle</param>
            <returns>true if the position is ahead</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.isAside(UnityEngine.Vector3,System.Single)">
            <summary>
            Check if the position is aside this vehicule, in a angle defined cone
            </summary>
            <param name="target">the target position</param>
            <param name="cosThreshold">the cos of the cone angle</param>
            <returns>true if the position is aside</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.isBehind(UnityEngine.Vector3,System.Single)">
            <summary>
            Check if the position is behind this vehicule, in a angle defined cone
            </summary>
            <param name="target">the target position</param>
            <param name="cosThreshold">the cos of the cone angle</param>
            <returns>true if the position is behind</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.RegisterSteer(XKTools.Steering.Steer)">
            <summary>
            Register a steer component
            </summary>
            <param name="newSteer">the new steer component</param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.UnregisterSteer(XKTools.Steering.Steer)">
            <summary>
            Unregister a steer component
            </summary>
            <param name="oldSteer">the old steer component</param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.ApplyIgnorance(UnityEngine.Vector3)">
            <summary>
            Apply axis ignorance
            </summary>
            <param name="vector">the vector to modify</param>
            <returns>the vector to use</returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.Activate(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:XKTools.Steering.Vehicle.AdjustRawSteeringForce(UnityEngine.Vector3)">
            <summary>
            Adjust the steering force passed to ApplySteeringForce.
            </summary>
            <param name="force">
            A force to be applied to the vehicle<see cref="T:UnityEngine.Vector3"/>
            </param>
            <returns>
            Adjusted force vector <see cref="T:UnityEngine.Vector3"/>
            </returns>
            <remarks>
            Allows a specific vehicle class to redefine this adjustment.
            The default will return the value unmodified.
            </remarks>
        </member>
        <member name="M:XKTools.Steering.Vehicle.PredictFuturePosition(System.Single)">
            <summary>
            Predicts where the vehicle will be at a point in the future
            </summary>
            <param name="predictionTime">
            A time in seconds for the prediction <see cref="T:System.Single"/>
            </param>
            <returns>
            Vehicle position<see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:XKTools.Steering.Vehicle.PredictFuturePosition(System.Single,UnityEngine.Vector3)">
            <summary>
            Predicts where the vehicle will be at a point in the future
            </summary>
            <param name="predictionTime">
            A time in seconds for the prediction <see cref="T:System.Single"/>
            </param>
            <param name="additionnalAcceleration">
            An additional acceleration to add like gravity <see cref="T:System.Single"/>
            </param>
            <returns>
            Vehicle position<see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="P:XKTools.Steering.Vehicle.CanMove">
            <summary>
            Indicates if the current vehicle can move
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Center">
            <summary>
            Vehicle center on the transform
            </summary>
            <remarks>
            This property's setter recalculates a temporary value, so it's
            advised you don't re-scale the vehicle's transform after it has been set
            </remarks>
        </member>
        <member name="P:XKTools.Steering.Vehicle.AxisXIgnore">
            <summary>
            Does the vehicle ignore X axis
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.AxisYIgnore">
            <summary>
            Does the vehicle ignore Y axis
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.AxisZIgnore">
            <summary>
            Does the vehicle ignore Z axis
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.HasInertia">
            <summary>
            Does the vehicle continue going when there's no force applied to it?
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Mass">
            <summary>
            Mass for the vehicle
            </summary>
            <remarks>If the vehicle has a rigidbody, its mass will be updated if
            this property is set.</remarks>
        </member>
        <member name="P:XKTools.Steering.Vehicle.MaxForce">
            <summary>
            Maximum force that can be applied to the vehicle
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.MaxSpeed">
            <summary>
            The vehicle's maximum speed
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Radius">
            <summary>
            Vehicle radius
            </summary>
            <remarks>
            This property's setter recalculates a temporary value, so it's
            advised you don't re-scale the vehicle's transform after it has been set
            </remarks>
        </member>
        <member name="P:XKTools.Steering.Vehicle.ScaledCenter">
            <summary>
            The vehicle's center in the transform, scaled to by the transform's lossyScale
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.ScaledRadius">
            <summary>
            The vehicle's radius, scaled by the maximum of the transform's lossyScale values
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Steerings">
            <summary>
            List of steering behaviors
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Force">
            <summary>
            Current vehicle force
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Acceleration">
            <summary>
            Current vehicle acceleration
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Velocity">
            <summary>
            Current vehicle velocity
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Speed">
            <summary>
            Current vehicle speed
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Position">
            <summary>
            Vehicle's position
            </summary>
            <remarks>The vehicle's position is the transform's position displaced 
            by the vehicle center</remarks>
        </member>
        <member name="P:XKTools.Steering.Vehicle.Neighbors">
            <summary>
            Neighboors of this vehicle
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.DrawForce">
            <summary>
            Indicates if steering Forces have to drawn
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.CharacterController">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Steering.Vehicle.RigidbodyCpmt">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.FollowTransformPosition">
            <summary>
            Simple behaviour that apply to its transform the moves of the given transform to follow without being child of it
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.FollowTransformPosition.Update">
            <summary>
            Update the position of ourselves
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.FollowTransformPosition.FixedUpdate">
            <summary>
            Update the position of ourselves
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.FollowTransformPosition.FollowTransform(UnityEngine.Transform,System.Boolean)">
            <summary>
            Give to this game object the Transform to follow and indicates if we should use fixed update (for physical objects) or not
            </summary>
            <param name="t">The transform to follow</param>
            <param name="useFixedUpdate">Should we use fixed update ?</param>
        </member>
        <member name="T:XKTools.SimpleMoves.InterpolationRotation">
            <summary>
            Simple Component for GameObject Rotation Interpolation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.RotationA">
            <summary>
            The target Rotation A
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.RotationB">
            <summary>
            The target Rotation B
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.InterpolationTime">
            <summary>
            The duration of the interpolation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.PingPong">
            <summary>
            Does the interpolation PingPong
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.Repeat">
            <summary>
            Does the interpolation repeat
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.Smooth">
            <summary>
            Does the interpolation be smoothed
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.RandomizeStart">
            <summary>
            Does the Start be randomized
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationRotation.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationRotation.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationRotation.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationRotation.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationRotation.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.InterpolationScale">
            <summary>
            Simple Component for GameObject Scale Interpolation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.ScaleA">
            <summary>
            The target Scale A
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.ScaleB">
            <summary>
            The target Scale B
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.InterpolationTime">
            <summary>
            The duration of the interpolation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.PingPong">
            <summary>
            Does the interpolation PingPong
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.Repeat">
            <summary>
            Does the interpolation repeat
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.Smooth">
            <summary>
            Does the interpolation be smoothed
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.RandomizeStart">
            <summary>
            Does the Start be randomized
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationScale.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationScale.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationScale.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationScale.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationScale.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationScale.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.InterpolationTranslation">
            <summary>
            Simple Component for GameObject Translation Interpolation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.TranslationA">
            <summary>
            The target Translation A
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.TranslationB">
            <summary>
            The target Translation B
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.InterpolationTime">
            <summary>
            The duration of the interpolation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.PingPong">
            <summary>
            Does the interpolation PingPong
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.Repeat">
            <summary>
            Does the interpolation repeat
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.Smooth">
            <summary>
            Does the interpolation be smoothed
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.RandomizeStart">
            <summary>
            Does the Start be randomized
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.InterpolationTranslation.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationTranslation.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationTranslation.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationTranslation.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationTranslation.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.InterpolationTranslation.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.RandomRotation">
            <summary>
            Simple Component for GameObject Random Rotation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomRotation.MinRotation">
            <summary>
            Minimum of Rotation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomRotation.MaxRotation">
            <summary>
            Maximum of Rotation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomRotation.Additive">
            <summary>
            Operation Additive
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomRotation.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.RandomRotation.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.RandomScale">
            <summary>
            Simple Component for GameObject Random Scale
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomScale.MinScale">
            <summary>
            Minimum of translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomScale.MaxScale">
            <summary>
            Maximum of translation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.RandomScale.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.RandomTranslation">
            <summary>
            Simple Component for GameObject Random Translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomTranslation.MinTranslation">
            <summary>
            Minimum of translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomTranslation.MaxTranslation">
            <summary>
            Maximum of translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomTranslation.Additive">
            <summary>
            Operation Additive
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.RandomTranslation.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.RandomTranslation.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.SimpleMove">
            <summary>
            Mother class of all simple moves
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleMove.OperationTime">
            <summary>
            The time in update when the UV is Scrolled
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleMove.UpdateControl">
            <summary>
            the performance control of the operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleMove.Reset">
            <summary>
            Reset the simple move
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.SimpleRotation">
            <summary>
            Simple Component for GameObject Rotation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleRotation.SpeedMin">
            <summary>
            The Min Speed of the translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleRotation.SpeedMax">
            <summary>
            The Max Speed of the translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleRotation.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="P:XKTools.SimpleMoves.SimpleRotation.Speed">
            <summary>
            Speed of the rotation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleRotation.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleRotation.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleRotation.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleRotation.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleRotation.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.SimpleScale">
            <summary>
            Simple Component for GameObject Scale
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleScale.SpeedMin">
            <summary>
            The Min Speed of the translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleScale.SpeedMax">
            <summary>
            The Max Speed of the translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleScale.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleScale.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleScale.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleScale.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleScale.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.SimpleTranslation">
            <summary>
            Simple Component for GameObject Translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleTranslation.SpeedMin">
            <summary>
            The Min Speed of the translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleTranslation.SpeedMax">
            <summary>
            The Max Speed of the translation
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleTranslation.SpaceOfOperation">
            <summary>
            The space of the Operation
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleTranslation.Start">
            <summary>
            Behaviour Start
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleTranslation.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleTranslation.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleTranslation.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.SimpleUVScroll">
            <summary>
            Simple Component for UV Scrolling
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.SimpleUVScroll.UVSpeed">
            <summary>
            The speed of UV scrolling
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleUVScroll.FixedUpdate">
            <summary>
            Behaviour FixedUpdate
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleUVScroll.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.SimpleUVScroll.LateUpdate">
            <summary>
            Behaviour LateUpdate
            </summary>
        </member>
        <member name="T:XKTools.SimpleMoves.TimedAutoDestructor">
            <summary>
            Timed AutoDestuction Script
            </summary>
        </member>
        <member name="F:XKTools.SimpleMoves.TimedAutoDestructor.RemainingTime">
            <summary>
            The Remaining Time before Auto Destuction
            </summary>
        </member>
        <member name="M:XKTools.SimpleMoves.TimedAutoDestructor.Update">
            <summary>
            Behaviour Update
            </summary>
        </member>
        <member name="T:XKTools.Svn.SvnVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Svn.SvnVersion.c_Revision">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Svn.SvnVersion.c_Date">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Tree.TreeNode`1">
            <summary>
            This class can be used to build a tree
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.PushChild(XKTools.Tree.TreeNode{`0})">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.PushData(`0)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.GetPath(System.Collections.Generic.List{`0}@,System.Boolean)">
            <summary>
            Get path from leaf to parent
            </summary>
            <param name="lst">the list to create or fill</param>
            <param name="reverse">reverse path so it goes from parent to leaf</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.OnSetData">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Tree.TreeNode`1.Object">
            <summary>
            object to carry on
            </summary>
        </member>
        <member name="P:XKTools.Tree.TreeNode`1.Data">
            <summary>
            object to carry on
            </summary>
        </member>
        <member name="P:XKTools.Tree.TreeNode`1.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.IsLeaf">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Tree.TreeNode`1.IsRootNode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:XKTools.UI.TextLocalizer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UI.TextLocalizer.m_OverridenTextId">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.UI.XKDropdown">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UI.XKDropdown.m_StartOpened">
            <summary></summary>
        </member>
        <member name="F:XKTools.UI.XKDropdown.m_Container">
            <summary></summary>
        </member>
        <member name="M:XKTools.UI.XKDropdown.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UI.XKDropdown.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UI.XKDropdown.Toggle">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UI.XKDropdown.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UI.XKDropdown.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UI.XKDropdown.UpdateScale(System.Single)">
            <summary>
            
            </summary>
            <returns>True when the transition has reached an end</returns>
        </member>
        <member name="T:XKTools.UIHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UIHelper.GetWorldPos(UnityEngine.EventSystems.UIBehaviour,System.Single,UnityEngine.Camera)">
            <summary>
            This function work great with a camera oriented to forward
            </summary>
            <param name="uiObject"></param>
            <param name="dstFromCam">Wanted z value</param>
            <param name="cam">Will use Camera.main if null</param>
            <returns></returns>
        </member>
        <member name="M:XKTools.UIHelper.GetWorldPos(UnityEngine.Transform,System.Single,UnityEngine.Camera)">
            <summary>
            This function work great with a camera oriented to forward
            </summary>
            <param name="trs"></param>
            <param name="dstFromCam">Wanted z value</param>
            <param name="cam">Will use Camera.main if null</param>
            <returns></returns>
        </member>
        <member name="T:XKTools.ContinuousGesture">
            <summary>
            Continuous Gesture for Multitouch
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.OnEnterTouch(XKTools.Uninput.STouch)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.OnUpdateTouch(UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.SetLastPosition(XKTools.Uninput.STouch,UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.OnLeaveTouch(UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.ContinuousGesture.ComputeMoveFromHeightSubdivision(System.Int32)">
            <summary>
            
            </summary>
            <param name="eltCount"></param>
        </member>
        <member name="P:XKTools.ContinuousGesture.Gesture">
            <summary>
            Current continuous gesture
            </summary>
        </member>
        <member name="P:XKTools.ContinuousGesture.HeightSubdivision">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ContinuousGesture.ComputeMoveFromHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.ContinuousGesture.FirstMoveCoef">
            <summary>
            Default value is 0.5f
            </summary>
        </member>
        <member name="P:XKTools.ContinuousGesture.Rotation">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.DeviceOrientationFaker">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.DeviceOrientationFaker.Update">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.DeviceOrientationFaker.DefaultIsLandscape">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.GestureBaseComponent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GestureBaseComponent.m_Moved">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GestureBaseComponent.m_Stationary">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GestureBaseComponent.m_LastPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GestureBaseComponent.m_LastGesturePos">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GestureBaseComponent.m_FingerId">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.GestureBaseComponent.m_ConstraintZone">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GestureBaseComponent.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GestureBaseComponent.OnEnterTouch(XKTools.Uninput.STouch)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GestureBaseComponent.OnUpdateTouch(UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GestureBaseComponent.SetLastPosition(XKTools.Uninput.STouch,UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.GestureBaseComponent.OnLeaveTouch(UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="constraintRelativePos"></param>
        </member>
        <member name="P:XKTools.GestureBaseComponent.ConstraintZone">
            <summary>
            This rectangle is based on RelativePosition from BottomLeft (0, 0) to TopRight (1, 1)
            </summary>
        </member>
        <member name="P:XKTools.GestureBaseComponent.ConstraintTouchUpdate">
            <summary>
            Make sure the input is within the constraint zone for input update
            </summary>
            <remarks>The Began input will always be constrainted no matter what</remarks>
        </member>
        <member name="P:XKTools.GestureBaseComponent.SecondTouchBehaviour">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.GestureBaseComponent.LastGesturePos">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.MouseLimiter">
            <summary>
            <para>The purpose of this class is to limit the simultaneous left and right clic by giving priority to one of them.</para>
            <para>This class will have effect on touch validity at began time</para>
            <remarks>For now this class can manage conflicts with 2 buttons at the same time</remarks>
            </summary>
        </member>
        <member name="T:XKTools.MouseLimiter.EMouseButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.MouseLimiter.EMouseButton.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.MouseLimiter.EMouseButton.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.MouseLimiter.EMouseButton.Middle">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.MouseLimiter.EMouseButton.None">
            <summary>
            No priority, no input is considered
            </summary>
        </member>
        <member name="F:XKTools.MouseLimiter.EMouseButton.Count">
            <summary>
            No priority, all inputs are considered
            </summary>
        </member>
        <member name="F:XKTools.MouseLimiter.m_TestButtons">
            <summary>
            This variable is just caching to avoid new List at all frames
            </summary>
        </member>
        <member name="M:XKTools.MouseLimiter.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.MouseLimiter.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.MouseLimiter.AddLimit(XKTools.MouseLimiter.EMouseButton,XKTools.MouseLimiter.EMouseButton,XKTools.MouseLimiter.EMouseButton)">
            <summary>
            
            </summary>
            <param name="btn1"></param>
            <param name="btn2"></param>
            <param name="priority"></param>
        </member>
        <member name="T:XKTools.SlideGesture">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SlideGesture.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SlideGesture.OnUpdateTouch(UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.SlideGesture.OnLeaveTouch(UnityEngine.Vector2)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SlideGesture.LastPostion">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SlideGesture.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.SlideGesture.Gesture">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.UninputComponent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputComponent.m_Uninput">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputComponent.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Uninput">
            <summary>
            Class for Uninput
            
            <para>Remember to change version number when you make a big modification to this class.</para>
            
            <para>Connector :</para>
            <para>Make sure your project use Uninput and Network Manager.</para>
            <para>You can either launch connector from XKTools' Main (boolean "show connector"), or with a simple line of code "NetworkManager.Instance.ShowConnector()".</para>
            <para>You may also precise a default feedback quality by setting Uninput.NetworkQuality value.</para>
            </summary>
        </member>
        <member name="T:XKTools.Uninput.EQualityNetwork">
            <summary>
            To specify which network quality we need
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EQualityNetwork.Fast">
            <summary>
            Fast but truly ugly
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EQualityNetwork.Medium">
            <summary>
            Good compromise: quite ugly, quite fast
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EQualityNetwork.Slow">
            <summary>
            Pretty but slow
            </summary>
        </member>
        <member name="T:XKTools.Uninput.EFeatureType">
            <summary>
            The types of feature Uninput provides
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.None">
            <summary>
            None of those features
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.KeyboardInput">
            <summary>
            Keyboard inputs
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.Keyboard">
            <summary>
            Phone Keyboard
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.Motion">
            <summary>
            Motion
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.Screen">
            <summary>
            Screen
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.Touch">
            <summary>
            Touch and Mouse
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.Gesture">
            <summary>
            Gesture
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFeatureType.All">
            <summary>
            All of those features
            </summary>
        </member>
        <member name="F:XKTools.Uninput.OnInputEvent">
            <summary>
            Event on input entries
            </summary>
        </member>
        <member name="F:XKTools.Uninput.c_Tag">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.c_Version">
            <summary>
            Remember to change this value when you make a big modification to this class.
            </summary>
        </member>
        <member name="M:XKTools.Uninput.CreateInstance">
            <summary>
            Used as a creator to avoid using reflection on iOS. DO NOT USE DIRECTLY !
            </summary>
            <returns></returns>
        </member>
        <member name="M:XKTools.Uninput.Initialize">
            <summary>
            Initialize Uninput manager
            </summary>
        </member>
        <member name="M:XKTools.Uninput.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.CreateAvatar(System.Boolean,System.Boolean,XKTools.Net.PlayerData)">
            <summary>
            Called by NetworkController. Create an avatar.
            
            You may need to implement your own. If you do so, don't forget to write "NetworkController.CreatePlayer = YourFunction;" (after Uninput initialization)
            </summary>
            <param name="isLocal">local avatar (or remote)</param>
            <param name="isServer">server (or client)</param>
            <param name="playerDatas"></param>
            <returns></returns>
        </member>
        <member name="P:XKTools.Uninput.Overridden">
            <summary>
            When Uninput is overridden, it doesn't update itself
            </summary>
        </member>
        <member name="P:XKTools.Uninput.Avatar">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.NetworkFeedback">
            <summary>
            Object to display feedback on
            </summary>
        </member>
        <member name="P:XKTools.Uninput.NetworkQuality">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.ActivateFeature(XKTools.Uninput.EFeatureType,System.Boolean)">
            <summary>
            Enable or disable the given feature
            </summary>
            <param name="feature">The feature you want to enable/disable</param>
            <param name="b">True to enable the feature, false to disable</param>
        </member>
        <member name="T:XKTools.Uninput.EGestureStates">
            <summary>
            States of a gesture
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.Freeing">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.Waiting">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.InitSingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.TrackingSingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.InitDouble">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.TrackingDouble">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureStates.Analysing">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Uninput.EFiringGesture">
            <summary>
            Type of firing
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.None">
            <summary>
            No firing
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.LeftMove">
            <summary>
            Firing left
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.RightMove">
            <summary>
            Firing right
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.UpMove">
            <summary>
            Firing up
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.DownMove">
            <summary>
            Firing down
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.PinchIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.PinchOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.SingleTap">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.DoubleTap">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.TripleTap">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EFiringGesture.LongTap">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Uninput.EGestureInfos">
            <summary>
            Informations about a gesture
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureInfos.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureInfos.LongTapEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureInfos.LongTapStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureInfos.PinchStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EGestureInfos.PinchEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Uninput.GestureRecognizer">
            <summary>
            Helper for gesture recognizing
            </summary>
            <param name="gesture"></param>
            <param name="data"></param>
        </member>
        <member name="F:XKTools.Uninput.OnGestureRecognized">
            <summary>
            Gesture recognized event
            </summary>
        </member>
        <member name="P:XKTools.Uninput.Gesture">
            <summary>
            Current gesture
            </summary>
        </member>
        <member name="P:XKTools.Uninput.GestureInfo">
            <summary>
            Informations of current gesture
            </summary>
        </member>
        <member name="P:XKTools.Uninput.LongTouchInfoValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.PinchValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.ResetContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.TransformWithOrientation(UnityEngine.Vector2)">
            <summary>
            Adjust a vector according to screen orientation
            </summary>
            <param name="vec">Vector to adjust</param>
            <returns>Adjusted vector</returns>
        </member>
        <member name="T:XKTools.Uninput.EKeyboardType">
            <summary>
            Keyboard types
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.ASCIICapable">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.NumbersAndPunctuation">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.URL">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.NumberPad">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.PhonePad">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.NamePhonePad">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EKeyboardType.EmailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Uninput.KeyboardNotifier">
            <summary>
            Helper for keyboard notifications
            </summary>
        </member>
        <member name="F:XKTools.Uninput.OnKeyboardEnded">
            <summary>
            Keyboard notification event
            </summary>
        </member>
        <member name="M:XKTools.Uninput.OpenKeyboard(System.String,System.String,XKTools.Uninput.EKeyboardType)">
            <summary>
            Open the keyboard
            </summary>
            <param name="itemID"></param>
            <param name="initText">Default text</param>
            <param name="kbType">Keyboard type</param>
        </member>
        <member name="P:XKTools.Uninput.IsKeyboardOpened">
            <summary>
            Check if keyboard is already opened
            </summary>
        </member>
        <member name="P:XKTools.Uninput.PressedKeys">
            <summary>
            Current pressed keys
            </summary>
        </member>
        <member name="P:XKTools.Uninput.KeysDown">
            <summary>
            Current keys down
            </summary>
        </member>
        <member name="M:XKTools.Uninput.DeviceOrientationUpdater.#ctor(System.Int32,UnityEngine.DeviceOrientation,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.DeviceOrientationUpdater.EnableOrientation(UnityEngine.DeviceOrientation,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.DeviceOrientationUpdater.IsOrientationEnabled(UnityEngine.DeviceOrientation)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.DeviceOrientationUpdater.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.DeviceOrientationUpdater.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.DeviceOrientationUpdater.Update">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.Uninput.DeviceOrientationChanger">
            <summary>
            Helper for device orientation change detection
            </summary>
            <param name="from">Previous orientation</param>
            <param name="to">New orientation</param>
        </member>
        <member name="F:XKTools.Uninput.OnDeviceOrientationChanged">
            <summary>
            Device orientation change detection event
            </summary>
        </member>
        <member name="F:XKTools.Uninput.OnDeviceOrientationGUIChanged">
            <summary>
            Device orientation change detection event (for GUI)
            </summary>
        </member>
        <member name="F:XKTools.Uninput.s_DefaultDeviceOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.EnableDeviceOrientation(UnityEngine.DeviceOrientation,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.EnableDeviceOrientationGUI(UnityEngine.DeviceOrientation,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.IsDeviceOrientationEnabled(UnityEngine.DeviceOrientation)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.IsDeviceOrientationGUIEnabled(UnityEngine.DeviceOrientation)">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.DeviceOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.DeviceOrientationGUI">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.Acceleration">
            <summary>
            Acceleration based on orientation
            </summary>
        </member>
        <member name="T:XKTools.Uninput.ScreenOrientationChanger">
            <summary>
            Helper for screen orientation change detected
            </summary>
            <param name="from">Previous screen orientation</param>
            <param name="to">New screen orientation</param>
        </member>
        <member name="F:XKTools.Uninput.OnScreenOrientationChanged">
            <summary>
            Screen orientation change detected event
            </summary>
        </member>
        <member name="F:XKTools.Uninput.s_DefaultScreenOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.ScreenOri">
            <summary>
            Current screen orientation
            </summary>
        </member>
        <member name="P:XKTools.Uninput.IsLandscape">
            <summary>
            Check if device is landscape oriented
            </summary>
        </member>
        <member name="P:XKTools.Uninput.IsFourthGenAppleDevice">
            <summary>
            Check if device is 4th generation
            </summary>
        </member>
        <member name="P:XKTools.Uninput.CameraToCapture">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.ExchangePlane">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.DpiScale">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.Uninput.ActivateScreenAutoRotate(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allow screen autorotate on specific orientations
            </summary>
            <param name="bLeft">Landscape left</param>
            <param name="bRight">Landscape right</param>
            <param name="bUp">Portrait</param>
            <param name="bDown">Portrait upside down</param>
        </member>
        <member name="T:XKTools.Uninput.EPhase">
            <summary>
            Touch phases
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.Began">
            <summary>
            First detection of a touch
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.Stationary">
            <summary>
            Hasn't moved yet
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.Moved">
            <summary>
            Has moved
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.Leave">
            <summary>
            Last detection of a touch
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.Invalid">
            <summary>
            The touch won't be updated until it begins again
            <remarks>InvalidateTouch(int i) will help you cancel touch listener</remarks>
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.InvalidLeave">
            <summary>
            The touch won't be updated until it begins again
            <remarks>InvalidateTouch(int i) will help you cancel touch listener</remarks>
            </summary>
        </member>
        <member name="F:XKTools.Uninput.EPhase.None">
            <summary>
            No touch
            </summary>
        </member>
        <member name="T:XKTools.Uninput.STouch">
            <summary>
            Structure of complete details of a touch
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.Phase">
            <summary>
            Phase of touch
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.Moved">
            <summary>
            Has it moved yet ?
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.Position">
            <summary>
            Current absolute position
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.RelativePosition">
            <summary>
            Current relative position on screen (1 >= x >= 0 and 1 >= y >= 0)
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.BeganPosition">
            <summary>
            Current absolute position on began event
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.DeltaTime">
            <summary>
            Current Time.deltaTime
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.DeltaPosition">
            <summary>
            Position gap since last touch
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.FingerID">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="F:XKTools.Uninput.STouch.TapCount">
            <summary>
            Number of taps detected
            </summary>
        </member>
        <member name="T:XKTools.Uninput.TouchCountChanger">
            <summary>
            Helper for touch count change detection
            </summary>
            <param name="from">Last touch count</param>
            <param name="to">New touch count</param>
        </member>
        <member name="F:XKTools.Uninput.OnTouchCountChanged">
            <summary>
            Event for touch count detection
            </summary>
        </member>
        <member name="P:XKTools.Uninput.Touches">
            <summary>
            Current touches
            </summary>
        </member>
        <member name="P:XKTools.Uninput.MousePosition">
            <summary>
            Mouse Position (PC and Editor Only)
            </summary>
        </member>
        <member name="P:XKTools.Uninput.TouchCount">
            <summary>
            Current touch count
            </summary>
        </member>
        <member name="P:XKTools.Uninput.LastTouchCount">
            <summary>
            Last touch count
            </summary>
        </member>
        <member name="P:XKTools.Uninput.Roll">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.Uninput.FingerTolerance">
            <summary>
            Finger Tolerance in pixels
            </summary>
        </member>
        <member name="P:XKTools.Uninput.ContinuousFingerTolerance">
            <summary>
            Finger Tolerance in pixels for continuous move
            </summary>
        </member>
        <member name="P:XKTools.Uninput.BeganFingerTolerance">
            <summary>
            Finger Tolerance in pixels
            This detects the first movement based on the began position of the finger
            </summary>
        </member>
        <member name="M:XKTools.Uninput.InvalidateTouch(System.Int32)">
            <summary>
            Force invalid touch
            </summary>
        </member>
        <member name="T:XKTools.UninputAvatar">
            <summary>
            <para>Uninput's INetworkable avatar.</para>
            <para></para>
            <para>Using :</para>
            <para>     Simply add this component in your NetworkController.CreatePlayer method (default Uninput.CreateAvatar()).</para>
            <para>     Don't forget to specify NetAvatar.IsLocalPlayer !</para>
            </summary>
        </member>
        <member name="T:XKTools.UninputAvatar.EUpdateFrequency">
            <summary>
            Frequency of data updating and sending
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.EUpdateFrequency.Never">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.EUpdateFrequency.OnChange">
            <summary>
            Whenever a change is detected
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.EUpdateFrequency.Everytime">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.UninputAvatar.ETextureQuality">
            <summary>
            Quality of images through network (size in pixels)
            (Used here by Feedback and Webcam)
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.ETextureQuality.VeryLow">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.ETextureQuality.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.ETextureQuality.Good">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.ETextureQuality.High">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.UninputAvatar.CNetTouches">
             <summary>
            Touch memo
             </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.CNetTouches.touches">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.CNetTouches.touchCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.CNetTouches.frameNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefConfiguration">
            <summary>
            Constant defining a configuration reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefFeedback">
            <summary>
            Constant defining a motion reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefGlobal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefKey">
            <summary>
            Constant defining a key reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefMotion">
            <summary>
            Constant defining a motion reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefScreenOrientation">
            <summary>
            Constant defining a screen orientation reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefTouch">
            <summary>
            Constant defining a touch reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.c_RefVersion">
            <summary>
            Constant defining a version reference to send through network
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.m_IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.m_IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.m_PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.UninputAvatar.m_SendTestData">
            <summary>
            Set it to true if you want to send different datas through network (server to clients)
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.OnEnter">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.OnLeave">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.OnError(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XKTools.UninputAvatar.XKTools#Net#INetworkable#ReceiveData(System.String,System.Byte[],XKTools.Net.INetworkable)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="buffer"></param>
            <param name="from"></param>
        </member>
        <member name="P:XKTools.UninputAvatar.IsLocalPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UninputAvatar.IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.XKTools#Net#INetworkable#SetLocalServer(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="local"></param>
            <param name="server"></param>
        </member>
        <member name="P:XKTools.UninputAvatar.PlayerDatas">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.UninputAvatar.CheckPhaseValidity(XKTools.Uninput.EPhase,XKTools.Uninput.EPhase)">
            <summary>
            Check validity of Uninput phase change
            </summary>
            <param name="previous"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:XKTools.UninputAvatar.SendConfigurationChanges(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:XKTools.UninputAvatar.OnScreenOrientationChanged(UnityEngine.ScreenOrientation,UnityEngine.ScreenOrientation)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:XKTools.UninputAvatar.ChangeUpdateFrequency(System.String,XKTools.UninputAvatar.EUpdateFrequency)">
            <summary>
            
            </summary>
            <param name="reference">Use NetAvatar constant keys</param>
            <param name="frequency"></param>
        </member>
        <member name="P:XKTools.UninputAvatar.TextureFeedback">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UninputAvatar.FeedbackTimer">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UninputAvatar.FeedbackQuality">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UninputAvatar.ShouldRecomputeGUI">
            <summary>
            
            </summary>
        </member>
        <member name="P:XKTools.UninputAvatar.TouchesBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.EContinuousGesture">
            <summary>
            Continuous gestures types
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.StationaryMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.LeftMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.RightMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.UpMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.DownMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.ShortTap">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.MediumTap">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.EContinuousGesture.LongTap">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ESlideGesture">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ESlideGesture.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ESlideGesture.Move">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ESlideGesture.StationaryMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ESlideGesture.Leave">
            <summary>
            
            </summary>
        </member>
        <member name="T:XKTools.ESecondTouchBehaviour">
            <summary>
            
            </summary>
        </member>
        <member name="F:XKTools.ESecondTouchBehaviour.None">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="F:XKTools.ESecondTouchBehaviour.Invalidate">
            <summary>
            Stop all behaviours until touchcount gets back to 0
            </summary>
        </member>
        <member name="F:XKTools.ESecondTouchBehaviour.Override">
            <summary>
            Becomes main input
            </summary>
        </member>
        <member name="T:XKTools.XKDebug">
            <summary>
            
            </summary>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
            <param name="color"></param>
            <param name="duration"></param>
            <param name="depthTest"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
            <param name="color"></param>
            <param name="duration"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay(System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay``1(``0,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
            <param name="color"></param>
            <param name="duration"></param>
            <param name="depthTest"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay``1(``0,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
            <param name="color"></param>
            <param name="duration"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay``1(``0,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawRay``1(``0,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="dir"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="duration"></param>
            <param name="depthTest"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="duration"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine(System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine``1(``0,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="duration"></param>
            <param name="depthTest"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine``1(``0,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="duration"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine``1(``0,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
        </member>
        <member name="M:XKTools.XKDebug.DrawLine``1(``0,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:XKTools.XKDebug.Break(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XKTools.XKDebug.Break``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
        </member>
        <member name="T:StrExtensions">
            <summary>
            Strings extensions
            </summary>
        </member>
        <member name="M:StrExtensions.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replace a character at given idx
            </summary>
            <param name="str">The string to modify</param>
            <param name="idx">The idx</param>
            <param name="newValue">The new value to set</param>
            <returns>The new string</returns>
        </member>
        <member name="M:StrExtensions.ReplaceAt(System.String,System.Int32,System.String)">
            <summary>
            Replace a character by a string at given idx
            </summary>
            <param name="str">The string to modify</param>
            <param name="idx">The idx</param>
            <param name="newValue">The new value to set</param>
            <returns>The new string</returns>
        </member>
        <member name="M:StrExtensions.Shorten(System.String,System.Int32)">
            <summary>
            Shorten the string to avoid being longer than the specified length
            </summary>
            <param name="str">The string to shorten</param>
            <param name="maxLength">The max length of the str</param>
            <returns>A new string shortened</returns>
        </member>
        <member name="M:StrExtensions.Matches(System.String,System.String,System.Char)">
            <summary>
            Check if the two strings match (same length, same letters except for the match char)
            </summary>
            <param name="str1">The string to compare</param>
            <param name="str2">The second string to compare</param>
            <param name="matchChar">The char that will match with any other</param>
            <returns>True if the two strings match</returns>
        </member>
        <member name="T:System.Half">
             <summary>
             [Code from http://sourceforge.net/projects/csharp-half/
              Caution: implementation is not conform to http://en.wikipedia.org/wiki/Half-precision_floating-point_format#Precision_limitations_on_decimal_values_in_.5B0.2C_1.5D
              converning the integer precision limitations: values are rounded to a multiple of 32 until 65535 instead of 65519]
             Represents a half-precision floating point number.
             </summary>
             <remarks>
             Note:
                 Half is not fast enought and precision is also very bad, 
                 so is should not be used for matemathical computation (use Single instead).
                 The main advantage of Half type is lower memory cost: two bytes per number. 
                 Half is typically used in graphical applications.
                 
             Note: 
                 All functions, where is used conversion half->float/float->half, 
                 are approx. ten times slower than float->double/double->float, i.e. ~3ns on 2GHz CPU.
            
             References:
                 - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
                 - IEEE 754 revision, link: http://grouper.ieee.org/groups/754/
             </remarks>
        </member>
        <member name="F:System.Half.value">
            <summary>
            Internal representation of the half-precision floating-point number.
            </summary>
        </member>
        <member name="F:System.Half.Epsilon">
            <summary>
            Represents the smallest positive System.Half value greater than zero. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.MaxValue">
            <summary>
            Represents the largest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.MinValue">
            <summary>
            Represents the smallest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.NaN">
            <summary>
            Represents not a number (NaN). This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.NegativeInfinity">
            <summary>
            Represents negative infinity. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.PositiveInfinity">
            <summary>
            Represents positive infinity. This field is constant.
            </summary>
        </member>
        <member name="M:System.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified single-precision floating-point number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 32-bit signed integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 64-bit signed integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Double)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified double-precision floating-point number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified decimal number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 32-bit unsigned integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 64-bit unsigned integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.Negate(System.Half)">
            <summary>
            Returns the result of multiplying the specified System.Half value by negative one.
            </summary>
            <param name="half">A System.Half.</param>
            <returns>A System.Half with the value of half, but the opposite sign. -or- Zero, if half is zero.</returns>
        </member>
        <member name="M:System.Half.Add(System.Half,System.Half)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>A System.Half value that is the sum of half1 and half2.</returns>
        </member>
        <member name="M:System.Half.Subtract(System.Half,System.Half)">
            <summary>
            Subtracts one specified System.Half value from another.
            </summary>
            <param name="half1">A System.Half (the minuend).</param>
            <param name="half2">A System.Half (the subtrahend).</param>
            <returns>The System.Half result of subtracting half2 from half1.</returns>
        </member>
        <member name="M:System.Half.Multiply(System.Half,System.Half)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the multiplicand).</param>
            <param name="half2">A System.Half (the multiplier).</param>
            <returns>A System.Half that is the result of multiplying half1 and half2.</returns>
        </member>
        <member name="M:System.Half.Divide(System.Half,System.Half)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the dividend).</param>
            <param name="half2">A System.Half (the divisor).</param>
            <returns>The System.Half that is the result of dividing half1 by half2.</returns>
            <exception cref="T:System.DivideByZeroException">half2 is zero.</exception>
        </member>
        <member name="M:System.Half.op_UnaryPlus(System.Half)">
            <summary>
            Returns the value of the System.Half operand (the sign of the operand is unchanged).
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of the operand, half.</returns>
        </member>
        <member name="M:System.Half.op_UnaryNegation(System.Half)">
            <summary>
            Negates the value of the specified System.Half operand.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The result of half multiplied by negative one (-1).</returns>
        </member>
        <member name="M:System.Half.op_Increment(System.Half)">
            <summary>
            Increments the System.Half operand by 1.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half incremented by 1.</returns>
        </member>
        <member name="M:System.Half.op_Decrement(System.Half)">
            <summary>
            Decrements the System.Half operand by one.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half decremented by 1.</returns>
        </member>
        <member name="M:System.Half.op_Addition(System.Half,System.Half)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of adding half1 and half2.</returns>
        </member>
        <member name="M:System.Half.op_Subtraction(System.Half,System.Half)">
            <summary>
            Subtracts two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of subtracting half1 and half2.</returns>        
        </member>
        <member name="M:System.Half.op_Multiply(System.Half,System.Half)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of multiplying half1 by half2.</returns>
        </member>
        <member name="M:System.Half.op_Division(System.Half,System.Half)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the dividend).</param>
            <param name="half2">A System.Half (the divisor).</param>
            <returns>The System.Half result of half1 by half2.</returns>
        </member>
        <member name="M:System.Half.op_Equality(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether two instances of System.Half are equal.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 and half2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_Inequality(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether two instances of System.Half are not equal.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 and half2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_LessThan(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is less than half1; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_GreaterThan(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is greater than half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_LessThanOrEqual(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than or equal to another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is less than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_GreaterThanOrEqual(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than or equal to another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is greater than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Byte)~System.Half">
            <summary>
            Converts an 8-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 8-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int16)~System.Half">
            <summary>
            Converts a 16-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>A System.Half that represents the converted 16-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Char)~System.Half">
            <summary>
            Converts a Unicode character to a System.Half.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>A System.Half that represents the converted Unicode character.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int32)~System.Half">
            <summary>
            Converts a 32-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>A System.Half that represents the converted 32-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int64)~System.Half">
            <summary>
            Converts a 64-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>A System.Half that represents the converted 64-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Single)~System.Half">
            <summary>
            Converts a single-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A single-precision floating-point number.</param>
            <returns>A System.Half that represents the converted single-precision floating point number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Double)~System.Half">
            <summary>
            Converts a double-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A double-precision floating-point number.</param>
            <returns>A System.Half that represents the converted double-precision floating point number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Decimal)~System.Half">
            <summary>
            Converts a decimal number to a System.Half.
            </summary>
            <param name="value">decimal number</param>
            <returns>A System.Half that represents the converted decimal number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Byte">
            <summary>
            Converts a System.Half to an 8-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Char">
            <summary>
            Converts a System.Half to a Unicode character.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A Unicode character that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int16">
            <summary>
            Converts a System.Half to a 16-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int32">
            <summary>
            Converts a System.Half to a 32-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int64">
            <summary>
            Converts a System.Half to a 64-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Single">
            <summary>
            Converts a System.Half to a single-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A single-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Double">
            <summary>
            Converts a System.Half to a double-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A double-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Decimal">
            <summary>
            Converts a System.Half to a decimal number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A decimal number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.SByte)~System.Half">
            <summary>
            Converts an 8-bit signed integer to a System.Half.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>A System.Half that represents the converted 8-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt16)~System.Half">
            <summary>
            Converts a 16-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt32)~System.Half">
            <summary>
            Converts a 32-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt64)~System.Half">
            <summary>
            Converts a 64-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 64-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.SByte">
            <summary>
            Converts a System.Half to an 8-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt16">
            <summary>
            Converts a System.Half to a 16-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt32">
            <summary>
            Converts a System.Half to a 32-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt64">
            <summary>
            Converts a System.Half to a 64-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.CompareTo(System.Half)">
            <summary>
            Compares this instance to a specified System.Half object.
            </summary>
            <param name="other">A System.Half object.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:System.Half.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified System.Object.
            </summary>
            <param name="obj">An System.Object or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater
            than value. -or- value is null.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a System.Half</exception>
        </member>
        <member name="M:System.Half.Equals(System.Half)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Half object represent the same value.
            </summary>
            <param name="other">A System.Half object to compare to this instance.</param>
            <returns>true if value is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Object
            represent the same type and value.
            </summary>
            <param name="obj">An System.Object.</param>
            <returns>true if value is a System.Half and equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Half.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type System.Half.
            </summary>
            <returns>The enumerated constant (TypeCode)255.</returns>
        </member>
        <member name="M:System.Half.GetBytes(System.Half)">
            <summary>
            Returns the specified half-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.Half.GetBits(System.Half)">
            <summary>
            Converts the value of a specified instance of System.Half to its equivalent binary representation.
            </summary>
            <param name="value">A System.Half value.</param>
            <returns>A 16-bit unsigned integer that contain the binary representation of value.</returns>        
        </member>
        <member name="M:System.Half.ToHalf(System.Byte[],System.Int32)">
            <summary>
            Returns a half-precision floating point number converted from two bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A half-precision floating point number formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentException">
            startIndex is greater than or equal to the length of value minus 1, and is
            less than or equal to the length of value minus 1.
            </exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:System.Half.ToHalf(System.UInt16)">
            <summary>
            Returns a half-precision floating point number converted from its binary representation.
            </summary>
            <param name="bits">Binary representation of System.Half value</param>
            <returns>A half-precision floating point number formed by its binary representation.</returns>
        </member>
        <member name="M:System.Half.Sign(System.Half)">
            <summary>
            Returns a value indicating the sign of a half-precision floating-point number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
            A number indicating the sign of value. Number Description -1 value is less
            than zero. 0 value is equal to zero. 1 value is greater than zero.
            </returns>
            <exception cref="T:System.ArithmeticException">value is equal to System.Half.NaN.</exception>
        </member>
        <member name="M:System.Half.Abs(System.Half)">
            <summary>
            Returns the absolute value of a half-precision floating-point number.
            </summary>
            <param name="value">A number in the range System.Half.MinValue ≤ value ≤ System.Half.MaxValue.</param>
            <returns>A half-precision floating-point number, x, such that 0 ≤ x ≤System.Half.MaxValue.</returns>
        </member>
        <member name="M:System.Half.Max(System.Half,System.Half)">
            <summary>
            Returns the larger of two half-precision floating-point numbers.
            </summary>
            <param name="value1">The first of two half-precision floating-point numbers to compare.</param>
            <param name="value2">The second of two half-precision floating-point numbers to compare.</param>
            <returns>
            Parameter value1 or value2, whichever is larger. If value1, or value2, or both val1
            and value2 are equal to System.Half.NaN, System.Half.NaN is returned.
            </returns>
        </member>
        <member name="M:System.Half.Min(System.Half,System.Half)">
            <summary>
            Returns the smaller of two half-precision floating-point numbers.
            </summary>
            <param name="value1">The first of two half-precision floating-point numbers to compare.</param>
            <param name="value2">The second of two half-precision floating-point numbers to compare.</param>
            <returns>
            Parameter value1 or value2, whichever is smaller. If value1, or value2, or both val1
            and value2 are equal to System.Half.NaN, System.Half.NaN is returned.
            </returns>
        </member>
        <member name="M:System.Half.IsNaN(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to not a number (System.Half.NaN).
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if value evaluates to not a number (System.Half.NaN); otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity or System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsNegativeInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsPositiveInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <returns>The System.Half number equivalent to the number contained in value.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent 
            using the specified culture-specific format information.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific parsing information about value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is
            System.Globalization.NumberStyles.Number.
            </param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent 
            using the specified style and culture-specific format.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is 
            System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific information about the format of value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style and provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Half@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not a number in a valid format, or represents a number less than System.Half.MinValue
            or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Half@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent
            using the specified style and culture-specific format. A return value indicates
            whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the permitted format of value. A typical value to specify is System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific parsing information about value.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than
            System.Half.MinValue or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style 
            is the System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
        </member>
        <member name="M:System.Half.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the value of this instance.</returns>
        </member>
        <member name="M:System.Half.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by provider.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation 
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by format and provider.</returns>
            <exception cref="T:System.FormatException">format is invalid.</exception>
        </member>
        <member name="M:System.Half.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#GetTypeCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="conversionType"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:System.HalfHelper">
            <summary>
            [Code from http://sourceforge.net/projects/csharp-half/
             The only modifications done here are in HalfToSingle and SingleToHalf
             in order to remove the 'unsafe' property]
            Helper class for Half conversions and some low level operations.
            This class is internally used in the Half class.
            </summary>
            <remarks>
            References:
                - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
            </remarks>
        </member>
        <member name="T:SystemExtensions">
            <summary>
             Extensions of base UnityEngine Object
            </summary>
        </member>
        <member name="M:SystemExtensions.ContainsIndex(System.Collections.ICollection,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SystemExtensions.ReadValue``1(System.Collections.Hashtable,System.Object,``0,System.Boolean)">
            <summary>
            Reads a value from Hashtable
            </summary>
            <typeparam name="V">Must be IConvertible (int, float, class, object, ...)</typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <param name="defaultValue">If the key is unknown, this value will be returned</param>
            <param name="addIfMissing">Adds the default value to the key if the key is not already existing</param>
            <returns>The ExchangeTable value or the default value in case of unknown key</returns>
        </member>
        <member name="M:SystemExtensions.ReadXKValue``1(System.Collections.Hashtable,System.Object,``0,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="key"></param>
            <param name="defaultValue">If the key is unknown, this value will be returned</param>
            <param name="addIfMissing">Adds the default value to the key if the key is not already existing</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ReadValue(System.Collections.Hashtable,System.Object,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="key"></param>
            <param name="defaultValue">If the key is unknown, this value will be returned</param>
            <param name="addIfMissing">Adds the default value to the key if the key is not already existing</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ReadValueSimple(System.Collections.Hashtable,System.Object,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="key"></param>
            <param name="defaultValue">If the key is unknown, this value will be returned</param>
            <param name="addIfMissing">Adds the default value to the key if the key is not already existing</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.WriteValue(System.Collections.Hashtable,System.Object,System.Object)">
            <summary>
            Set data into ExchangeTable
            </summary>
            <param name="table"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SystemExtensions.CheckDiff(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Check the differences between the two given tables
            </summary>
            <param name="table">The first table</param>
            <param name="other">The table to check with</param>
            <returns>The differences</returns>
        </member>
        <member name="M:SystemExtensions.IsInRange(System.Collections.ICollection,System.Int32)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.IsInRange(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.Checksum(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            Return true if the value is between the two given ( Inclusive )
            </summary>
            <param name="value"> this float</param>
            <param name="minValue">the min value</param>
            <param name="maxValue">the max value</param>
            <returns>true if value is between the two values</returns>
        </member>
        <member name="M:SystemExtensions.IsBetween(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Return true if the value is between the two given, possibly exclusive
            </summary>
            <param name="value"> this float</param>
            <param name="minValue">the min value</param>
            <param name="maxValue">the max value</param>
            <param name="Exclusive">Does the limits be exclusives</param>
            <returns>true if value is between the two values</returns>
        </member>
        <member name="M:SystemExtensions.IsBetween(System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Return true if the value is between the two given, possibly separately exclusive
            </summary>
            <param name="value"> this float</param>
            <param name="minValue">the min value</param>
            <param name="maxValue">the max value</param>
            <param name="minExclusive">Does the min be exclusive</param>
            <param name="maxExclusive">Does the max be exclusive</param>
            <returns>true if value is between the two values</returns>
        </member>
        <member name="M:SystemExtensions.MoreOrLessEquals(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="obj">this float</param>
            <param name="f">other float</param>
            <param name="precision">equality precision</param>
        </member>
        <member name="M:SystemExtensions.ToInt(System.Single,System.Int32)">
            <summary>
            Converts a float into an int preserving a given number of decimal.
            for 
            </summary>
            <param name="obj"></param>
            <param name="decimals">Number of decimals to store into the integer value</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            Return true if the value is between the two given ( Inclusive )
            </summary>
            <param name="value"> this double</param>
            <param name="minValue">the min value</param>
            <param name="maxValue">the max value</param>
            <returns>true if value is between the two values</returns>
        </member>
        <member name="M:SystemExtensions.IsBetween(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Return true if the value is between the two given, possibly exclusive
            </summary>
            <param name="value"> this double</param>
            <param name="minValue">the min value</param>
            <param name="maxValue">the max value</param>
            <param name="Exclusive">Does the limits be exclusives</param>
            <returns>true if value is between the two values</returns>
        </member>
        <member name="M:SystemExtensions.IsBetween(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Return true if the value is between the two given, possibly separately exclusive
            </summary>
            <param name="value"> this double</param>
            <param name="minValue">the min value</param>
            <param name="maxValue">the max value</param>
            <param name="minExclusive">Does the min be exclusive</param>
            <param name="maxExclusive">Does the max be exclusive</param>
            <returns>true if value is between the two values</returns>
        </member>
        <member name="M:SystemExtensions.MoreOrLessEquals(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="obj">this double</param>
            <param name="f">other double</param>
            <param name="precision">equality precision</param>
        </member>
        <member name="M:SystemExtensions.ToByte(System.Int32)">
            <summary>
            Convert the integer value to a byte one
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToByte(System.Int16)">
            <summary>
            Convert the short value to a byte one
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToShort(System.Int32)">
            <summary>
            Convert the integer value to a short one
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToBool(System.Int32)">
            <summary>
            Convert an int into a boolean
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToFloat(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="decimals">Number of decimals to get from the integer value</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToBool(System.Byte)">
            <summary>
            Convert a byte into a boolean
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToInt(System.Boolean)">
            <summary>
            Convert a boolean into an int
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToByte(System.Boolean)">
            <summary>
            Convert a boolean into a byte
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.TotalSeconds(System.DateTime)">
            <summary>
            Return seconds since 1970/01/01
            </summary>
            <param name="obj">this date</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.TotalSeconds(System.DateTime,System.DateTime)">
            <summary>
            Return seconds since origin
            </summary>
            <param name="obj">this date</param>
            <param name="origin"> </param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.TotalMilliseconds(System.DateTime)">
            <summary>
            Return milliseconds since 1970/01/01
            </summary>
            <param name="obj">this date</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.TotalMilliseconds(System.DateTime,System.DateTime)">
            <summary>
            Return milliseconds since origin
            </summary>
            <param name="obj">this date</param>
            <param name="origin"> </param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToDateTimeFromSeconds(System.Double)">
            <summary>
            Return the date from seconds
            </summary>
            <param name="obj">the timespan since 1970/01/01</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToDateTimeFromSeconds(System.Double,System.DateTime)">
            <summary>
            Return the date from seconds
            </summary>
            <param name="obj">the timespan since origin</param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToDateTimeFromMilliseconds(System.Double)">
            <summary>
            Return the date from milliseconds
            </summary>
            <param name="obj">the timespan since 1970/01/01</param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToDateTimeFromMilliseconds(System.Double,System.DateTime)">
            <summary>
            Return the date from milliseconds
            </summary>
            <param name="obj">the timespan since origin</param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.ToDictionary``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts a list to a dictionary whose Keys are the index of the list and Values are the actual list values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.Randomize``1(System.Collections.Generic.List{``0})">
            <summary>
            Randomizes the given list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SystemExtensions.AddSorted``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="item"></param>
        </member>
        <member name="M:SystemExtensions.ToList``1(System.Collections.ArrayList)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SystemExtensions.GetKey(System.Collections.Hashtable,System.Object)">
            <summary>
            Return the key associated with the value given.
            WARNING : IT CAN BE USE ONLY IF YOUR HASHTABLE HAS UNIQUE VALUES
            I.E. IF EACH THERE IS NO TWO KEY WITH THE SAME VALUE
            </summary>
            <param name="hashtable"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SystemExtensions.EnumUnion32`1">
            <summary>
            Used to compare generic enums
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SystemExtensions.EqualsEnum``1(System.Object,``0)">
            <summary>
            Compare enum as object without additionnal boxing
            </summary>
        </member>
        <member name="T:UnityEngineExtensions">
            <summary>
             Extensions of base UnityEngine Object
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.ClassNameClean(System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.LimitDecimalPrecision(System.String,System.Char,System.Int32)">
            <summary>
            This funciton assumes the given string is a floating point string serialized
            </summary>
            <param name="str"></param>
            <param name="decimalChar"></param>
            <param name="decimalPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ParseInt(System.String)">
            <summary>
            This functions performs a safe int parsing, defaultValue is 0.0f
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ParseInt(System.String,System.Int32)">
            <summary>
            This functions performs a safe float parsing
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ParseFloat(System.String)">
            <summary>
            This functions performs a safe float parsing, defaultValue is 0.0f
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IndentLine(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="indentLevel"></param>
            <param name="addNewLine"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ParseFloat(System.String,System.Single)">
            <summary>
            This functions performs a safe float parsing
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ParseDouble(System.String)">
            <summary>
            This functions performs a safe float parsing, defaultValue is 0.0f
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ParseDouble(System.String,System.Double)">
            <summary>
            This functions performs a safe float parsing
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetHierarchyAsFormatedString(UnityEngine.Transform)">
            <summary>
            
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetHierarchyAsFormatedString(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            
            </summary>
            <param name="trans"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToColor(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToColor32(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(UnityEngine.Object)">
            <summary>
            This fuction checks object validity
            </summary>
            <param name="obj">the  object to check</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            This fuction checks object validity
            </summary>
            <param name="obj">the  object to check</param>
            <param name="context">Log Context</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(UnityEngine.Object,System.String)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(UnityEngine.Object,System.String,UnityEngine.Object)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <param name="context">Log Context</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(UnityEngine.Object,System.String,System.Boolean)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <param name="debugBreak">Does it break if null</param>
            <returns>true if object is valid, false otherwise</returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(UnityEngine.Object,System.String,System.Boolean,UnityEngine.Object)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <param name="debugBreak">Does it break if null</param>
            <param name="context">Log Context</param>
            <returns>true if object is valid, false otherwise</returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(System.Object)">
            <summary>
            This fuction checks object validity
            </summary>
            <param name="obj">the  object to check</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(System.Object,UnityEngine.Object)">
            <summary>
            This fuction checks object validity
            </summary>
            <param name="obj">the  object to check</param>
            <param name="context">Log Context</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(System.Object,System.String)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(System.Object,System.String,UnityEngine.Object)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <param name="context">Log Context</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(System.Object,System.String,System.Boolean)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <param name="debugBreak">Does it break if null</param>
            <returns>true if object is valid, false otherwise</returns>
        </member>
        <member name="M:UnityEngineExtensions.IsValid(System.Object,System.String,System.Boolean,UnityEngine.Object)">
            <summary>
            This fuction checks object validity and logs an error if it's not
            You also can ask for Debug.Break() in case of invalidity
            </summary>
            <param name="obj">the  object to check</param>
            <param name="objName">the logged name of object if null</param>
            <param name="debugBreak">Does it break if null</param>
            <param name="context">Log Context</param>
            <returns>true if object is valid, false otherwise</returns>
        </member>
        <member name="M:UnityEngineExtensions.IsNonNull(System.Object)">
            <summary>
            This fuction checks object nullity (for interfaces)
            </summary>
            <param name="obj">the object to check</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.IsNull(System.Object)">
            <summary>
            This fuction checks object nullity (for interfaces)
            </summary>
            <param name="obj">the object to check</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.SafeConvert``1(System.Object@)">
            <summary>
            Try to convert safely
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">the object to convert</param>
            <returns>true on success</returns>
        </member>
        <member name="M:UnityEngineExtensions.SafeConvert``1(``0@)">
            <summary>
            Try to convert safely
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">the object to convert</param>
            <returns>true on success</returns>
        </member>
        <member name="M:UnityEngineExtensions.SafeConvert``1(System.Object)">
            <summary>
            This function checks nullity and return a usable value of given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">the object to convert</param>
            <returns>The valid object or null if obj.IsNull() is true</returns>
        </member>
        <member name="M:UnityEngineExtensions.CancelUnunsedWarning(System.Object)">
            <summary>
            Does nothing, juste here to avoid a "unused member" warning.
            This extension's calls should be temporary
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:UnityEngineExtensions.LogError(System.Object,System.Object)">
            <summary>
            Log an error using XKTools.Logger
            </summary>
            <param name="obj">this object</param>
            <param name="logs">your log</param>
        </member>
        <member name="M:UnityEngineExtensions.LogWarning(System.Object,System.Object)">
            <summary>
            Log a warning using XKTools.Logger
            </summary>
            <param name="obj">this UnityEngine.Object</param>
            <param name="logs">your log</param>
        </member>
        <member name="M:UnityEngineExtensions.LogInfo(System.Object,System.Object)">
            <summary>
            Log an information using XKTools.Logger
            </summary>
            <param name="obj">this object</param>
            <param name="logs">your log</param>
        </member>
        <member name="M:UnityEngineExtensions.LogDebug(System.Object,System.Object)">
            <summary>
            Log something for debug using XKTools.Logger
            </summary>
            <param name="obj">this object</param>
            <param name="logs">your log</param>
        </member>
        <member name="M:UnityEngineExtensions.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Get a component, or add it if didn't get it
            </summary>
            <typeparam name="T">the component type</typeparam>
            <param name="obj">this GameObject</param>
            <returns>the requested Component</returns>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            Look at position smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="worldPosition">the world position to look</param>
            <param name="maxRadianDelta">maximum rotation radian delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Int32)">
            <summary>
            Look at position smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="worldPosition">the world position to look</param>
            <param name="maxDegreeDelta">maximum rotation degree delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>
            Look at position smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="target">the transform to look</param>
            <param name="maxRadianDelta">maximum rotation radian delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Transform,System.Int32)">
            <summary>
            Look at position smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="target">the transform to look</param>
            <param name="maxDegreeDelta">maximum rotation degree delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Look at position smoothly, keeping an up vector
            </summary>
            <param name="obj">this transform</param>
            <param name="worldPosition">the world position to look</param>
            <param name="worldUp">the desired world up</param>
            <param name="maxRadianDelta">maximum rotation radian delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Look at position smoothly, keeping an up vector
            </summary>
            <param name="obj">this transform</param>
            <param name="worldPosition">the world position to look</param>
            <param name="worldUp">the desired world up</param>
            <param name="maxDegreeDelta">maximum rotation degree delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            Look at position smoothly, keeping an up vector
            </summary>
            <param name="obj">this transform</param>
            <param name="target">the transform to look</param>
            <param name="worldUp">the desired world up</param>
            <param name="maxRadianDelta">maximum rotation radian delta</param>
        </member>
        <member name="M:UnityEngineExtensions.SmoothLookAt(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,System.Int32)">
            <summary>
            Look at position smoothly, keeping an up vector
            </summary>
            <param name="obj">this transform</param>
            <param name="target">the transform to look</param>
            <param name="worldUp">the desired world up</param>
            <param name="maxDegreeDelta">maximum rotation degree delta</param>
        </member>
        <member name="M:UnityEngineExtensions.MoveTowards(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            Move to a position smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="position">the position to reach</param>
            <param name="maxPositionDelta">maximum position delta</param>
        </member>
        <member name="M:UnityEngineExtensions.RotateTowards(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            rotate toward angles smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="eulerAngles">the eulerAngles to reach</param>
            <param name="maxRadianDelta">maximum rotation radian delta</param>
        </member>
        <member name="M:UnityEngineExtensions.RotateTowards(UnityEngine.Transform,UnityEngine.Vector3,System.Int32)">
            <summary>
            rotate toward angles smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="eulerAngles">the eulerAngles to reach</param>
            <param name="maxDegreeDelta">maximum rotation degree delta</param>
        </member>
        <member name="M:UnityEngineExtensions.RotateTowards(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)">
            <summary>
            rotate toward angles smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="rotation">the rotation to reach</param>
            <param name="maxRadianDelta">maximum rotation radian delta</param>
        </member>
        <member name="M:UnityEngineExtensions.RotateTowards(UnityEngine.Transform,UnityEngine.Quaternion,System.Int32)">
            <summary>
            rotate toward angles smoothly
            </summary>
            <param name="obj">this transform</param>
            <param name="rotation">the rotation to reach</param>
            <param name="maxDegreeDelta">maximum rotation degree delta</param>
        </member>
        <member name="M:UnityEngineExtensions.GetPathBuilder(UnityEngine.Transform)">
            <summary>
            Compute transform's full path as a StringBuilder
            </summary>
            <see cref="M:UnityEngineExtensions.GetPath(UnityEngine.Transform)"/>
            <param name="t"></param>
            <returns>The StringBuilder containing the full path</returns>
        </member>
        <member name="M:UnityEngineExtensions.GetPath(UnityEngine.Transform)">
            <summary>
            Compute a transform's full path as a string.
            </summary>
            <param name="t"></param>
            <returns>The full path in the form "/root1/root2/transfrom"</returns>
        </member>
        <member name="M:UnityEngineExtensions.GetBrothers(UnityEngine.Transform)">
            <summary>
            Get all the brothers of the given Transform (the transforms which have the same parents)
            The parent of the given transform must not be null
            </summary>
            <param name="t">The transform we want to find the brothers of</param>
            <returns>An array of transform</returns>
        </member>
        <member name="M:UnityEngineExtensions.GetComponentsInHierarchy``1(UnityEngine.GameObject)">
            <summary>
            Merges GetComponents and GetComponentsInChildren - Useless, since GetComponentsInChildren has the same behaviour
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetComponentInHierarchy``1(UnityEngine.GameObject)">
            <summary>
            Get the first occurence of the component asked for, in hierarchy, starting with the object on which the funciton is called
            </summary>
            <typeparam name="T">Component to get</typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetComponentInAllChildren``1(UnityEngine.MonoBehaviour)">
            <summary>
            Get the first occurence of the component asked for, in children, starting with the object on which the funciton is called and considering deactivated objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetComponentInAllChildren``1(UnityEngine.GameObject)">
            <summary>
            Get the first occurence of the component asked for, in children, starting with the object on which the funciton is called and considering deactivated objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetComponentsInAllChildren``1(UnityEngine.MonoBehaviour)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.GetComponentsInAllChildren``1(UnityEngine.GameObject)">
            <summary>
            Get all the occurences of the component asked for, in children, starting with the object on which the funciton is called and considering deactivated objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.CanView(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            Check if the camera can the world point
            </summary>
            <param name="obj">this camera</param>
            <param name="worldPosition">the point to test</param>
            <returns>true if the camera view the point</returns>
        </member>
        <member name="M:UnityEngineExtensions.CanView(UnityEngine.Camera,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Check if the camera can the volume defined by center point and extends
            </summary>
            <param name="obj">this camera</param>
            <param name="center">the center of the tested object</param>
            <param name="extents">the extends of the tested object</param>
            <returns>true if the camera view the point</returns>
        </member>
        <member name="M:UnityEngineExtensions.CanView(UnityEngine.Camera,UnityEngine.Collider)">
            <summary>
            Check if the camera can view the collider
            </summary>
            <param name="obj">this camera</param>
            <param name="collider">the collider of the tested object</param>
            <returns>true if the camera view the point</returns>
        </member>
        <member name="M:UnityEngineExtensions.Normal(UnityEngine.Vector2)">
            <summary>
            Function that returns the vector normal (orthogonal) to this one
            </summary>
            <param name="self">this vector</param>
            <returns>Vector normal to this one</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalizedSafe(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Safe function for vector normalization
            </summary>
            <param name="obj">this vector</param>
            <param name="logError"></param>
            <returns>this vector normalized, or vector zero</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalizedSafe(UnityEngine.Vector2)">
            <summary>
            Safe function for vector normalization
            </summary>
            <param name="obj">this vector</param>
            <returns>this vector normalized, or vector zero</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalXZ(UnityEngine.Vector3)">
            <summary>
            Function that returns the vector normal (orthogonal) to this one, 
            in a 2D space defined by XZ
            </summary>
            <param name="self">this vector</param>
            <returns>Vector normal to this one</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalXY(UnityEngine.Vector3)">
            <summary>
            Function that returns the vector normal (orthogonal) to this one, 
            in a 2D space defined by XY
            </summary>
            <param name="self">this vector</param>
            <returns>Vector normal to this one</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalYZ(UnityEngine.Vector3)">
            <summary>
            Function that returns the vector normal (orthogonal) to this one, 
            in a 2D space defined by YZ
            </summary>
            <param name="self">this vector</param>
            <returns>Vector normal to this one</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalizedSafe(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Safe function for vector normalization
            </summary>
            <param name="obj">this vector</param>
            <param name="logError"></param>
            <returns>this vector normalized, or vector zero</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalizedSafe(UnityEngine.Vector3)">
            <summary>
            Safe function for vector normalization
            </summary>
            <param name="obj">this vector</param>
            <returns>this vector normalized, or vector zero</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalizedSafe(UnityEngine.Vector4,System.Boolean)">
            <summary>
            Safe function for vector normalization
            </summary>
            <param name="obj">this vector</param>
            <param name="logError"></param>
            <returns>this vector normalized, or vector zero</returns>
        </member>
        <member name="M:UnityEngineExtensions.NormalizedSafe(UnityEngine.Vector4)">
            <summary>
            Safe function for vector normalization
            </summary>
            <param name="obj">this vector</param>
            <returns>this vector normalized, or vector zero</returns>
        </member>
        <member name="M:UnityEngineExtensions.ToDeg(UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.RotateDeg(UnityEngine.Vector2,System.Single)">
            <summary>
            X is forward
            </summary>
            <param name="obj"></param>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToRad(UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToRadVector2(System.Single)">
            <summary>
            X is forward
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.RotateRad(UnityEngine.Vector2,System.Single)">
            <summary>
            X is forward
            </summary>
            <param name="obj"></param>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToDegVector2(System.Single)">
            <summary>
            X is forward
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToDegXY(UnityEngine.Vector3)">
            <summary>
            X is forward
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToRadXY(UnityEngine.Vector2)">
            <summary>
            X is forward
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToRadVector3XY(System.Single)">
            <summary>
            X is forward
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToDegVector3XY(System.Single)">
            <summary>
            X is forward
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToDegXZ(UnityEngine.Vector3)">
            <summary>
            Z is forward
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToRadXZ(UnityEngine.Vector3)">
            <summary>
            Z is forward
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToRadVector3XZ(System.Single)">
            <summary>
            Z is forward
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToDegVector3XZ(System.Single)">
            <summary>
            Z is forward
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.MoreOrLessEquals(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            
            </summary>
            <param name="obj">this vector</param>
            <param name="v">other vector</param>
            <param name="precision">equality precision</param>
        </member>
        <member name="M:UnityEngineExtensions.MoreOrLessEquals(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="obj">this vector</param>
            <param name="v">other vector</param>
            <param name="precision">equality precision</param>
        </member>
        <member name="M:UnityEngineExtensions.MoreOrLessEquals(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
            <summary>
            
            </summary>
            <param name="obj">this vector</param>
            <param name="v">other vector</param>
            <param name="precision">equality precision</param>
        </member>
        <member name="M:UnityEngineExtensions.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Approximately(UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.NoX(UnityEngine.Vector2)">
            <summary>
            Return the same vector with the X component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.X(UnityEngine.Vector2)">
            <summary>
            Return the same vector with only the X component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.X(UnityEngine.Vector2,System.Single)">
            <summary>
            Set the X component
            </summary>
            <param name="obj">this object</param>
            <param name="x"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Y(UnityEngine.Vector2)">
            <summary>
            Return the same vector with only the Y component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Y(UnityEngine.Vector2,System.Single)">
            <summary>
            Set the Y component
            </summary>
            <param name="obj">this object</param>
            <param name="y"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoY(UnityEngine.Vector2)">
            <summary>
            Return the same vector with the Y component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.ToVector3XY(UnityEngine.Vector2)">
            <summary>
            Map to a Vector3 using (X -> X, Y -> Y, 0f -> Z)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToVector3XZ(UnityEngine.Vector2)">
            <summary>
            Map to a Vector3 using (X -> X, 0f -> Y, Y -> Z)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToVector3YZ(UnityEngine.Vector2)">
            <summary>
            Map to a Vector3 using (0f -> X, X -> Y, Y -> Z)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.X(UnityEngine.Vector3)">
            <summary>
            Return the same vector with only the X component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.X(UnityEngine.Vector3,System.Single)">
            <summary>
            Set the X component
            </summary>
            <param name="obj">this object</param>
            <param name="x"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Y(UnityEngine.Vector3)">
            <summary>
            Return the same vector with only the Y component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Y(UnityEngine.Vector3,System.Single)">
            <summary>
            Set the Y component
            </summary>
            <param name="obj">this object</param>
            <param name="y"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Z(UnityEngine.Vector3)">
            <summary>
            Return the same vector with only the Z component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Z(UnityEngine.Vector3,System.Single)">
            <summary>
            Set the Z component
            </summary>
            <param name="obj">this object</param>
            <param name="z"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoX(UnityEngine.Vector3)">
            <summary>
            Return the same vector with the X component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoY(UnityEngine.Vector3)">
            <summary>
            Return the same vector with the Y component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoZ(UnityEngine.Vector3)">
            <summary>
            Return the same vector with the Z component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.X(UnityEngine.Vector4)">
            <summary>
            Return the same vector with only the X component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.X(UnityEngine.Vector4,System.Single)">
            <summary>
            Set the X component
            </summary>
            <param name="obj">this object</param>
            <param name="x"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Y(UnityEngine.Vector4)">
            <summary>
            Return the same vector with only the Y component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Y(UnityEngine.Vector4,System.Single)">
            <summary>
            Set the Y component
            </summary>
            <param name="obj">this object</param>
            <param name="y"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Z(UnityEngine.Vector4)">
            <summary>
            Return the same vector with only the Z component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.Z(UnityEngine.Vector4,System.Single)">
            <summary>
            Set the Z component
            </summary>
            <param name="obj">this object</param>
            <param name="z"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.W(UnityEngine.Vector4)">
            <summary>
            Return the same vector with only the W component
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.W(UnityEngine.Vector4,System.Single)">
            <summary>
            Set the W component
            </summary>
            <param name="obj">this object</param>
            <param name="w"> </param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoX(UnityEngine.Vector4)">
            <summary>
            Return the same vector with the X component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoY(UnityEngine.Vector4)">
            <summary>
            Return the same vector with the Y component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoZ(UnityEngine.Vector4)">
            <summary>
            Return the same vector with the Z component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.NoW(UnityEngine.Vector4)">
            <summary>
            Return the same vector with the W component to 0
            </summary>
            <param name="obj">this object</param>
            <returns>the modified vector</returns>
        </member>
        <member name="M:UnityEngineExtensions.XY(UnityEngine.Vector3)">
            <summary>
            Return a Vector2 without the Z component
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.XZ(UnityEngine.Vector3)">
            <summary>
            Return a Vector2 without the Y component
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.YZ(UnityEngine.Vector3)">
            <summary>
            Return a Vector2 without the X component
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Multiply(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Return a vector which has for members, the members of the two vectors multiplied by one another
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Multiply(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Return a vector which has for members, the members of the two vectors multiplied by one another
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Multiply(UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            Return a vector which has for members, the members of the two vectors multiplied by one another
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Equals(UnityEngine.Color32,UnityEngine.Color32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="otherColor"></param>
            <param name="considerAlpha"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Equals(UnityEngine.Color,UnityEngine.Color@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="otherColor"></param>
            <param name="considerAlpha"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.AdjustLit(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="minBright"></param>
            <param name="maxBright"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.Blend(UnityEngine.Color32,UnityEngine.Color32@,ColorBlendMode,System.Boolean)">
            <summary>
            Blend a color with another
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.Blend(UnityEngine.Color,UnityEngine.Color@,ColorBlendMode,System.Boolean)">
            <summary>
            Blend a color with another
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.Blend(UnityEngine.Texture2D,UnityEngine.Texture2D,ColorBlendMode,System.Boolean)">
            <summary>
            Blend a texture with another
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.Blend(UnityEngine.Texture2D,UnityEngine.Color32@,ColorBlendMode,System.Boolean)">
            <summary>
            Blend a texture with another
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.Blend(UnityEngine.Color[],UnityEngine.Color@,ColorBlendMode,System.Boolean)">
            <summary>
            Blend a texture with another
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.Blend(UnityEngine.Color32[],UnityEngine.Color32@,ColorBlendMode,System.Boolean)">
            <summary>
            Blend a texture with another
            </summary>
        </member>
        <member name="M:UnityEngineExtensions.ToIntArray(UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToIntArray(UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToInt(UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToInt(UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToTk2d(UnityEngine.Color)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToTk2d(UnityEngine.Color32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngineExtensions.ToOBJ(UnityEngine.SkinnedMeshRenderer,System.String)">
            <summary>
            
            </summary>
            <param name="rnd"></param>
            <param name="folder"></param>
        </member>
        <member name="M:UnityEngineExtensions.ToOBJ(UnityEngine.MeshFilter,System.String)">
            <summary>
            
            </summary>
            <param name="mf"></param>
            <param name="folder"></param>
        </member>
        <member name="M:UnityEngineExtensions.ToOBJ(UnityEngine.MeshFilter,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="mf"></param>
            <param name="folder"></param>
            <param name="name"></param>
        </member>
        <member name="T:ColorBlendMode">
            <summary>
            Enum of color Blend Modes
            </summary>
        </member>
        <member name="F:ColorBlendMode.Replace">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.TaintChangeDouble">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.TaintLessHalf">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.TaintChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.TaintLess">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Darken">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Multiply">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Divide">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.ColorBurn">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.LinearBurn">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Lighten">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Screen">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.ColorDodge">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.LinearDodge">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.SoftLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.HardLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.VividLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.LinearLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.PinLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Difference">
            <summary>
            
            </summary>
        </member>
        <member name="F:ColorBlendMode.Exclusion">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
